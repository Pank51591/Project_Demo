C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BUZZER_PROCESS
OBJECT MODULE PLACED IN ..\Output\Buzzer_Process.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\Funtion\Buzzer_Process.c LARGE OBJECTADVANCE
                    -D OPTIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTou
                    -chKey_Lib;..\IAP_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\Buzzer_Process.lst) TABS(2) OBJECT(..\Output\Buzzer_Process
                    -.obj)

line level    source

   1          #include "SC_System.h"
   2          extern void SC_PWM3_Init_2Khz(void);
   3          
   4          extern void SC_PWM3_Init_41Khz(void);
   5          
   6          extern void SC_PWM3_Init(void);
   7          extern void SC_PWM3_Init_33Khz(void);
   8          
   9          
  10          extern uint8_t gcBurner1OpenCount;       
  11          extern uint8_t gcBurner1CloseCount;       
  12          
  13          extern uint8_t gcBurner2OpenCount;        
  14          extern uint8_t gcBurner2CloseCount;       
  15          
  16          extern uint8_t gcBurner3OpenCount;        
  17          extern uint8_t gcBurner3CloseCount;      
  18          
  19          extern uint8_t gcBurner4OpenCount;         
  20          extern uint8_t gcBurner4CloseCount;        
  21          
  22          extern uint8_t gcBurner5OpenCount;        
  23          extern uint8_t gcBurner5CloseCount;        
  24          
  25          extern uint8_t gcBurner6OpenCount;         
  26          extern uint8_t gcBurner6CloseCount;        
  27          
  28          extern uint8_t gcBurnerStatus;            
  29          extern uint8_t gcBurnerOpenCount;   
  30          
  31          extern uint8_t gcKeyStatus;                
  32          extern uint8_t gcKeyCount;                
  33          extern uint8_t gcOneMsCount;               
  34          extern uint32_t gcButton1State;             
  35          extern uint8_t gcKeyValue;                
  36          extern uint16_t giKeySW6LongDownTime;      
  37          extern uint8_t gcBuzzerTime; 
  38          extern uint8_t gcMCBuzzerstatus;
  39          extern uint8_t gcAHCloseBuzzerStatus;
  40          
  41          
  42          uint16_t gcBatLowWarrnBuzzerTime = 0;
  43          uint8_t  gcBatLowWarrnBuzzerStatus = 0;
  44          uint8_t  gcBatLowWarrnBuzzerCount = 0;
  45          uint8_t  gcMCBuzzerTime = 0;
  46          uint8_t  gcAHCloseBuzzerTime = 0;
  47          
  48          void Buzzer_Process(void)
  49           {
  50   1           
  51   1           if (KeyBuzzerFlag)
  52   1           {
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 2   

  53   2              if (gcBuzzerTime == 0)        //6.30
  54   2              {
  55   3                SC_PWM3_Init();    //4KHz
  56   3                Set_Buzzer;
  57   3              }
  58   2              gcBuzzerTime++;
  59   2              if (gcBuzzerTime > 2)
  60   2              {
  61   3                  gcBuzzerTime = 0;
  62   3                  Clr_Buzzer;
  63   3                  Clr_KeyBuzzerFlag;
  64   3              }
  65   2      
  66   2           }
  67   1           else if (KeySureBuzzerFlag)     //按键确认声音
  68   1           {
  69   2              if (gcBuzzerTime == 0)
  70   2              {
  71   3                SC_PWM3_Init_41Khz();
  72   3                Set_Buzzer_41Khz;
  73   3              }
  74   2              gcBuzzerTime++;
  75   2              if (gcBuzzerTime > 100)
  76   2              {
  77   3                  gcBuzzerTime = 0;
  78   3                  Clr_Buzzer;
  79   3                  Clr_KeySureBuzzerFlag;
  80   3              }
  81   2           }
  82   1           else if(BatLowWarrnFlag)     //低电压报警
  83   1           {
  84   2             switch(gcBatLowWarrnBuzzerStatus)
  85   2             {
  86   3               case 0:
  87   3               {
  88   4                  SC_PWM3_Init_2Khz();
  89   4                  Set_Buzzer_2Khz;
  90   4                  gcBatLowWarrnBuzzerStatus = 1;
  91   4                  gcBatLowWarrnBuzzerTime = 0;
  92   4               }
  93   3               break;
  94   3               case 1:
  95   3               {
  96   4                 gcBatLowWarrnBuzzerTime++;
  97   4                 if (gcBatLowWarrnBuzzerTime >= 80)     //（1）
  98   4                 {
  99   5                   gcBatLowWarrnBuzzerTime = 0;
 100   5                   Clr_Buzzer;
 101   5                   gcBatLowWarrnBuzzerStatus = 2;
 102   5                 }
 103   4               }
 104   3               break;
 105   3               case 2:
 106   3               {
 107   4                 gcBatLowWarrnBuzzerTime++;
 108   4                 if (gcBatLowWarrnBuzzerTime >= 200)
 109   4                 {
 110   5                   gcBatLowWarrnBuzzerTime = 0;
 111   5                   SC_PWM3_Init_2Khz();
 112   5                   Set_Buzzer_2Khz;
 113   5                   gcBatLowWarrnBuzzerStatus = 3;
 114   5                 }
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 3   

 115   4               }
 116   3               break;
 117   3               case 3:
 118   3               {
 119   4                 gcBatLowWarrnBuzzerTime++;
 120   4                 if (gcBatLowWarrnBuzzerTime >= 80)     //(2)
 121   4                 {
 122   5                   gcBatLowWarrnBuzzerTime = 0;
 123   5                   Clr_Buzzer;
 124   5                   gcBatLowWarrnBuzzerStatus = 4;
 125   5                 }
 126   4               }
 127   3               break;
 128   3               case 4:
 129   3               {
 130   4                 gcBatLowWarrnBuzzerTime++;
 131   4                 if (gcBatLowWarrnBuzzerTime >= 200)
 132   4                 {
 133   5                   gcBatLowWarrnBuzzerTime = 0;
 134   5                  SC_PWM3_Init_2Khz();
 135   5                  Set_Buzzer_2Khz;
 136   5                   gcBatLowWarrnBuzzerStatus = 5;
 137   5                 }
 138   4               }
 139   3               break; 
 140   3               case 5:
 141   3               {
 142   4                 gcBatLowWarrnBuzzerTime++;
 143   4                 if (gcBatLowWarrnBuzzerTime >= 80)    //(3)
 144   4                 {
 145   5                   gcBatLowWarrnBuzzerTime = 0;
 146   5                   Clr_Buzzer;
 147   5                   gcBatLowWarrnBuzzerStatus = 6;
 148   5                 }
 149   4               }
 150   3               break;
 151   3               case 6:
 152   3               {
 153   4                 gcBatLowWarrnBuzzerTime++;
 154   4                 if (gcBatLowWarrnBuzzerTime >= 200)
 155   4                 {
 156   5                   gcBatLowWarrnBuzzerTime = 0;
 157   5                   Clr_Buzzer;
 158   5                   gcBatLowWarrnBuzzerStatus = 7;
 159   5               }
 160   4               }
 161   3               break;
 162   3               case 7:
 163   3               {
 164   4                 gcBatLowWarrnBuzzerTime++;
 165   4                 if (gcBatLowWarrnBuzzerTime > 1410)
 166   4                 {
 167   5                   gcBatLowWarrnBuzzerTime = 0;
 168   5                   gcBatLowWarrnBuzzerStatus = 0;
 169   5      //             gcBatLowWarrnBuzzerCount++;
 170   5      //             if (gcBatLowWarrnBuzzerCount > 26)        //低电压报警1分钟
 171   5      //             {
 172   5      //               gcBatLowWarrnBuzzerCount = 0;
 173   5      //               Clr_BatLowWarrnEnFlag;
 174   5      //               Clr_BatLowWarrnFlag;           //清低电压报警，此时LED闪烁停止
 175   5      //             }
 176   5                 }
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 4   

 177   4               }
 178   3               break;
 179   3               default:
 180   3                 
 181   3               break;
 182   3             }
 183   2           }
 184   1      ////     else if (ModeChangeFlag)    //模式切换
 185   1      ////     {
 186   1      ////       switch(gcMCBuzzerstatus)
 187   1      ////       { 
 188   1      ////         case 0 :
 189   1      ////         {
 190   1      ////           SC_PWM3_Init_41Khz();
 191   1      ////           Set_Buzzer_41Khz;
 192   1      ////           gcMCBuzzerTime = 0;
 193   1      ////           gcMCBuzzerstatus = 1;
 194   1      ////           
 195   1      ////         }
 196   1      ////         break;
 197   1      ////         case 1 :
 198   1      ////         {
 199   1      ////           gcMCBuzzerTime++;
 200   1      ////           if(gcMCBuzzerTime >= 100) 
 201   1      ////           {
 202   1      ////             gcMCBuzzerTime = 0;
 203   1      ////             Clr_Buzzer;
 204   1      ////             gcMCBuzzerstatus = 2;
 205   1      ////           }
 206   1      ////         }
 207   1      ////         break;
 208   1      ////         case 2 :
 209   1      ////         {
 210   1      ////           gcMCBuzzerTime++;
 211   1      ////           if(gcMCBuzzerTime >= 100) 
 212   1      ////           {
 213   1      ////             gcMCBuzzerTime = 0;
 214   1      ////             SC_PWM3_Init_41Khz();
 215   1      ////             Set_Buzzer_41Khz;
 216   1      ////             gcMCBuzzerstatus = 3;
 217   1      ////           }
 218   1      ////         }
 219   1      ////         break;
 220   1      ////         case 3 :
 221   1      ////         {
 222   1      ////           gcMCBuzzerTime++;
 223   1      ////           if(gcMCBuzzerTime >= 100) 
 224   1      ////           {
 225   1      ////             gcMCBuzzerTime = 0;
 226   1      ////             Clr_Buzzer;
 227   1      ////             gcMCBuzzerstatus = 0;
 228   1      ////             Clr_ModeChangeFlag;
 229   1      ////           }
 230   1      ////         }
 231   1      ////         break;
 232   1      ////         default :
 233   1      ////           break;
 234   1      ////       }
 235   1      ////  
 236   1      ////     }
 237   1           else if (AllHodCloseFlag)    //所有的炉头都关闭
 238   1           {
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 5   

 239   2            switch(gcAHCloseBuzzerStatus)
 240   2            {
 241   3              case 0:
 242   3              {
 243   4                 SC_PWM3_Init_41Khz();
 244   4                 Set_Buzzer_41Khz;
 245   4                 gcAHCloseBuzzerTime = 0;
 246   4                 gcAHCloseBuzzerStatus = 1;
 247   4              }
 248   3              break;
 249   3              case 1:
 250   3              {
 251   4                gcAHCloseBuzzerTime++;
 252   4                 if(gcAHCloseBuzzerTime >= 100) 
 253   4                 {
 254   5                   gcAHCloseBuzzerTime = 0;
 255   5                   Clr_Buzzer;
 256   5                   gcAHCloseBuzzerStatus = 2;
 257   5                 }
 258   4              }
 259   3              break;
 260   3              case 2:
 261   3              {
 262   4                  gcAHCloseBuzzerTime++;
 263   4                 if(gcAHCloseBuzzerTime >= 100) 
 264   4                 {
 265   5                   gcAHCloseBuzzerTime = 0;
 266   5                   SC_PWM3_Init_41Khz();
 267   5                    Set_Buzzer_41Khz;
 268   5                   gcAHCloseBuzzerStatus = 3;
 269   5                 }
 270   4              }
 271   3              break;
 272   3              case 3:
 273   3              {
 274   4                gcAHCloseBuzzerTime++;
 275   4                 if(gcAHCloseBuzzerTime >= 100) 
 276   4                 {
 277   5                   gcAHCloseBuzzerTime = 0;
 278   5                   Clr_Buzzer;
 279   5                   gcAHCloseBuzzerStatus = 4;
 280   5                 }
 281   4              }
 282   3              break;    
 283   3              case 4:
 284   3              {
 285   4                  gcAHCloseBuzzerTime++;
 286   4                 if(gcAHCloseBuzzerTime >= 100) 
 287   4                 {
 288   5                   gcAHCloseBuzzerTime = 0;
 289   5                   SC_PWM3_Init_41Khz();
 290   5                    Set_Buzzer_41Khz;
 291   5                   gcAHCloseBuzzerStatus = 5;
 292   5                 }
 293   4              }
 294   3              break;
 295   3              case 5:
 296   3              {
 297   4                gcAHCloseBuzzerTime++;
 298   4                 if(gcAHCloseBuzzerTime >= 100) 
 299   4                 {
 300   5                   gcAHCloseBuzzerTime = 0;
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    04/26/2023 14:07:04 PAGE 6   

 301   5                   Clr_Buzzer;
 302   5                   gcAHCloseBuzzerStatus = 0;
 303   5                   Clr_AllHodCloseFlag;
 304   5                 }
 305   4              }
 306   3              break;
 307   3              default:
 308   3                break;
 309   3              
 310   3            }
 311   2           }
 312   1           else  /*蜂鸣器不响*/
 313   1           {
 314   2               Clr_Buzzer;
 315   2               gcBuzzerTime = 0;
 316   2               gcBatLowWarrnBuzzerTime = 0;
 317   2               gcBatLowWarrnBuzzerCount = 0;
 318   2               gcBatLowWarrnBuzzerStatus = 0;
 319   2           }
 320   1               
 321   1           
 322   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    839    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
