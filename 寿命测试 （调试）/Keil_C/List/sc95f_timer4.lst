C51 COMPILER V9.01   SC95F_TIMER4                                                          09/07/2020 16:59:34 PAGE 1   
C51 COMPILER V9.01, COMPILATION OF MODULE SC95F_TIMER4
OBJECT MODULE PLACED IN ..\Output\sc95f_timer4.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_timer4.c OMF2 BROWSE INCDIR(..\FWLib\SC95F_Lib
                    -\inc;..\User) DEFINE(SC95F8x2x) DEBUG PRINT(..\List\sc95f_timer4.lst) OBJECT(..\Output\sc95f_timer4.obj)
line level    source
   1         
   2         
   3         
   4         
   5         
   6         
   7         
   8         
   9         
  10         
  11          
  12          #include "sc95f_timer4.h"
  13          
  14          
  20          void TIM4_DeInit()
  21          {
  22   1              TXINX = 0x04;   
  23   1              TXCON = 0X00;
  24   1              TXMOD = 0X00;
  25   1              RCAPXH = 0X00;
  26   1              RCAPXL = 0X00;
  27   1              THX = 0X00;
  28   1              TLX = 0X00;
  29   1              IE1 &= 0X3F;
  30   1              IP1 &= 0X3F;
  31   1              ET2 = 0;
  32   1              IPT2 = 0;
  33   1      }
  34          
  35          
  41          void TIM4_PrescalerSelection(TIM4_PresSel_TypeDef TIM4_PrescalerSelection)
  42          {
  43   1              TXINX = 0x04;
  44   1              if(TIM4_PrescalerSelection == TIM4_PRESSEL_FSYS_D12)
  45   1              {
  46   2                      TXMOD &= 0X7F;
  47   2              }
  48   1              else if(TIM4_PrescalerSelection == TIM4_PRESSEL_FSYS_D1)
  49   1              {
  50   2                      TXMOD |= 0X80;
  51   2              }       
  52   1      }
  53          
  54          
  60          void TIM4_WorkMode1Config(uint16_t TIM4_SetCounter)
  61          {       
  62   1              TXINX = 0x04;
  63   1              RCAPXL = TIM4_SetCounter % 256;
  64   1              RCAPXH = TIM4_SetCounter / 256;
  65   1      
  66   1              TLX = RCAPXL;
  67   1              THX = RCAPXH;
  68   1      }
  69          
  75          void TIM4_Cmd(FunctionalState NewState)
  76          {
  77   1              TXINX = 0x04;
  78   1              if (NewState == DISABLE)
  79   1          {
  80   2             TRX = 0;
  81   2          }
  82   1          else
  83   1          {
  84   2             TRX = 1;
  85   2          }
  86   1      }
  87          
  94          void TIM4_ITConfig(FunctionalState NewState, PriorityStatus Priority)
  95          {
  96   1              TXINX = 0x04;
  97   1              if(NewState == DISABLE)
  98   1              {
  99   2                      IE1 &= 0X7F;
 100   2              }
 101   1              else
 102   1              {
 103   2                      IE1 |= 0X80;
 104   2              }
 105   1              if(Priority == LOW)
 106   1              {
 107   2                      IP1 &= 0X7F;
 108   2              }
 109   1              else
 110   1              {
 111   2                      IP1 |= 0X80;
 112   2              }
 113   1      
 114   1      }
 115          
 116          
 122          FlagStatus TIM4_GetFlagStatus(TIM4_Flag_TypeDef TIM4_Flag)
 123          {       
 124   1              FlagStatus status = RESET;
 125   1              TXINX = 0x04;
 126   1              if((TIM4_Flag & TXCON) != (uint8_t)RESET)
 127   1              {
 128   2                      status = SET;                   
 129   2              }
 130   1              else
 131   1              {
 132   2                      status = RESET; 
 133   2              }
 134   1              return status;  
 135   1      }
 136          
 137          
 143          void TIM4_ClearFlag(TIM4_Flag_TypeDef TIM4_Flag)
 144          {
 145   1              TXINX = 0x04;
 146   1              TXCON &= (~TIM4_Flag);
 147   1      }
 148          
 149          #if defined (SC95F8x2x) || defined (SC95F7x2x)  
 150          
 158          void TIM4_TimeBaseInit(TIM4_CountMode_TypeDef TIM4_CountMode, TIM4_CountDirection_TypeDef TIM4_CountDirect
             -ion)
 159          {       
 160   1              TXINX = 0x04;
 161   1              if(TIM4_CountMode == TIM4_MODE_TIMER)
 162   1              {
 163   2                      TXCON &= 0XFD;
 164   2              }
 165   1              else if(TIM4_CountMode == TIM4_MODE_COUNTER)
 166   1              {
 167   2                      TXCON |= 0X02;
 168   2              }
 169   1      
 170   1              if(TIM4_CountDirection == TIM4_COUNTDIRECTION_UP)
 171   1              {
 172   2                      TXMOD &= 0XFE;
 173   2              }
 174   1              else if(TIM4_CountDirection == TIM4_COUNTDIRECTION_DOWN_UP)
 175   1              {
 176   2                      TXMOD |= 0X01;
 177   2              }                       
 178   1      }
 179          
 180          
 186          void TIM4_WorkMode0Config(uint16_t TIM4_SetCounter)
 187          {
 188   1              TXINX = 0x04;
 189   1      
 190   1              TLX = TIM4_SetCounter % 256;
 191   1              THX = TIM4_SetCounter / 256;    
 192   1      }
 193          
 194          
 200          void TIM4_WorkMode3Config(uint16_t TIM4_SetCounter)
 201          {
 202   1              TXINX = 0x04;
 203   1              RCAPXL = TIM4_SetCounter % 256;
 204   1              RCAPXH = TIM4_SetCounter / 256;
 205   1              TXMOD |= 0X02;                  
 206   1      }
 207          
 214          void TIM4_WorkModeConfig(TIM4_WorkMode_TypeDef TIM4_WorkMode, uint16_t TIM4_SetCounter)
 215          {       
 216   1              switch (TIM4_WorkMode)
 217   1              {
 218   2                      case TIM4_WORK_MODE0:
 219   2                              TIM4_WorkMode0Config(TIM4_SetCounter);
 220   2                      break;
 221   2      
 222   2                      case TIM4_WORK_MODE1:
 223   2                              TIM4_WorkMode1Config(TIM4_SetCounter);
 224   2                      break;
 225   2      
 226   2                      case TIM4_WORK_MODE3:
 227   2                              TIM4_WorkMode3Config(TIM4_SetCounter);
 228   2                      break;
 229   2      
 230   2                      default:
 231   2                      break;
 232   2              }               
 233   1      }
 234          
 240          void TIM4_SetEXEN4(FunctionalState NewState)
 241          {
 242   1              TXINX = 0x04;
 243   1              if (NewState == DISABLE)
 244   1          {
 245   2             EXENX = 0;
 246   2          }
 247   1          else
 248   1          {
 249   2             EXENX = 1;
 250   2          }
 251   1      }
 252          
 253          #endif
 254          
MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.
C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
