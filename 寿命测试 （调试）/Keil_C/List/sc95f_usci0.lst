C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 1   
C51 COMPILER V9.01, COMPILATION OF MODULE SC95F_USCI0
OBJECT MODULE PLACED IN ..\Output\sc95f_usci0.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_usci0.c OMF2 BROWSE INCDIR(..\FWLib\SC95F_Lib\
                    -inc;..\User) DEFINE(SC95F8x2x) DEBUG PRINT(..\List\sc95f_usci0.lst) OBJECT(..\Output\sc95f_usci0.obj)
line level    source
   1         
   2         
   3         
   4         
   5         
   6         
   7         
   8         
   9         
  10         
  11          
  12          #include "sc95f_usci0.h"
  13          
  14          
  20          void USCI0_DeInit(void)
  21          {
  22   1              OTCON &= 0XCF;
  23   1              US0CON0 = 0X00;
  24   1              US0CON1 = 0X00;
  25   1              US0CON2 = 0X00;
  26   1              US0CON3 = 0X00;
  27   1              IE1 &= (~0X01);
  28   1              IP1 &= (~0X01);                 
  29   1      }
  30          
  31          
  44          void USCI0_SPI_Init(USCI0_SPI_FirstBit_TypeDef FirstBit, USCI0_SPI_BaudRatePrescaler_TypeDef BaudRatePresc
             -aler, USCI0_SPI_Mode_TypeDef Mode,
  45                                            USCI0_SPI_ClockPolarity_TypeDef ClockPolarity, USCI0_SPI_ClockPhase_TypeDef ClockPhase, USCI0_SPI_TX
             -E_INT_TypeDef SPI_TXE_INT,USCI0_TransmissionMode_TypeDef TransmissionMode)
  46          {
  47   1              
  48   1              OTCON = (OTCON & 0XCF) | 0X10;
  49   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)  
                      SPI_TXE_INT =  USCI0_SPI_TXE_DISINT
                      US0CON1 = US0CON1 & (~0X05) | FirstBit | TransmissionMode;
                      #endif
  53   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)  
  54   1              US0CON1 = US0CON1 & (~0X05) | FirstBit | SPI_TXE_INT | TransmissionMode;
  55   1              #endif
  56   1              US0CON0 = US0CON0 & 0X80 | BaudRatePrescaler | Mode | ClockPolarity | ClockPhase;
  57   1      }
  58          
  59          
  65          void USCI0_SPI_Cmd(FunctionalState NewState)
  66          {
  67   1              OTCON = (OTCON & 0XCF) | 0X10;
  68   1              if(NewState != DISABLE)
  69   1              {
  70   2                      US0CON0 |= 0X80;
  71   2              }       
  72   1              else
  73   1              {
  74   2                      US0CON0 &= (~0X80);
  75   2              }       
  76   1      }
  77          
  83          void USCI0_SPI_SendData_8(uint8_t Data)
  84          {
  85   1              US0CON2 = Data;
  86   1      }
  87          
  88          
  94          uint8_t USCI0_SPI_ReceiveData_8(void)
  95          {
  96   1              return US0CON2;         
  97   1      }
  98          
  99          
 105          void USCI0_SPI_SendData_16(uint16_t Data)
 106          {
 107   1              US0CON3 = (uint8_t) (Data >> 8);
 108   1              US0CON2 = (uint8_t) Data;
 109   1      }
 110          
 111          
 117          uint16_t USCI0_SPI_ReceiveData_16(void)
 118          {
 119   1              uint16_t SPI_data;
 120   1              SPI_data = (uint16_t)((US0CON3 << 8) |  US0CON2);
 121   1              return SPI_data;                
 122   1      }
 123          
 124          
 130          void USCI0_TWI_Slave_Init(uint8_t TWI_Address)
 131          {
 132   1              OTCON = OTCON & 0XCF | 0X20;
 133   1              US0CON2 = TWI_Address<<1;               
 134   1      }
 135          
 136          
 142          void USCI0_TWI_MasterCommunicationRate(USCI0_TWI_MasterCommunicationRate_TypeDef TWI_MasterCommunicationRa
             -te)
 143          {
 144   1              OTCON = OTCON & 0XCF | 0X20;
 145   1              US0CON1 |= TWI_MasterCommunicationRate;         
 146   1      }
 147          
 148          
 154          void USCI0_TWI_Start(void)
 155          {
 156   1              US0CON1 |= 0x20;                
 157   1      }
 158          
 159          
 165          void USCI0_TWI_MasterModeStop(void)
 166          {
 167   1              US0CON1 |= 0x10;                
 168   1      }
 169          
 170          
 176          void USCI0_TWI_SlaveClockExtension(FunctionalState NewState)
 177          {
 178   1              OTCON = OTCON & 0XCF | 0X20;
 179   1              if (NewState != DISABLE)
 180   1              {
 181   2                      US0CON1 |= 0x40;        
 182   2              }
 183   1              else
 184   1              {
 185   2                      US0CON1 &= 0XBF;
 186   2              }               
 187   1      }
 188          
 189          
 195          void USCI0_TWI_AcknowledgeConfig(FunctionalState NewState)
 196          {
 197   1              OTCON = OTCON & 0XCF | 0X20;
 198   1              if (NewState != DISABLE)
 199   1              {
 200   2                      US0CON0 |= 0X08;        
 201   2              }
 202   1              else
 203   1              {
 204   2                      US0CON0 &= 0XF7;
 205   2              }
 206   1      }
 207          
 208          
 214          void USCI0_TWI_GeneralCallCmd(FunctionalState NewState)
 215          {
 216   1              OTCON = OTCON & 0XCF | 0X20;
 217   1              if (NewState != DISABLE)
 218   1              {
 219   2                      US0CON2 |= 0X01;        
 220   2              }
 221   1              else
 222   1              {
 223   2                      US0CON2 &= 0XFE;
 224   2              }       
 225   1      }
 226          
 227          
 233          void USCI0_TWI_Cmd(FunctionalState NewState)
 234          {
 235   1              OTCON = OTCON & 0XCF | 0X20;
 236   1              if(NewState != DISABLE)
 237   1              {
 238   2                      US0CON0 |= 0X80;        
 239   2              }
 240   1              else
 241   1              {
 242   2                      US0CON0 &= (~0X80);
 243   2              }
 244   1      }
 245          
 246          
 252          void USCI0_TWI_SendData(uint8_t Data)
 253          {
 254   1              US0CON3 = Data; 
 255   1      }
 256          
 257          
 263          uint8_t USCI0_TWI_ReceiveData(void)
 264          {
 265   1              return US0CON3;
 266   1      }
 267          
 268          
 277          void USCI0_UART_Init(uint32_t UARTFsys, uint32_t BaudRate, USCI0_UART_Mode_TypeDef Mode, USCI0_UART_RX_Typ
             -eDef RxMode) 
 278          {
 279   1              OTCON |= 0x30;
 280   1              US0CON0 = US0CON0 & 0X0F | Mode | RxMode;
 281   1              if(Mode == USCI0_UART_Mode_8B)
 282   1              {
 283   2                      if(BaudRate == USCI0_UART_BaudRate_FsysDIV12)
 284   2                      {
 285   3                              US0CON0 &= 0XDF;                
 286   3                      }
 287   2                      else if(BaudRate == USCI0_UART_BaudRate_FsysDIV4)
 288   2                      {
 289   3                              US0CON0 |= 0X20;                
 290   3                      }
 291   2              }
 292   1              else
 293   1              {
 294   2                      US0CON2 = UARTFsys / BaudRate / 256;
 295   2                      US0CON1 = UARTFsys / BaudRate % 256;
 296   2              }       
 297   1      }
 298          
 299          
 305          void USCI0_UART_SendData8(uint8_t Data)
 306          {
 307   1         US0CON3 = Data;
 308   1      }
 309          
 310          
 316          uint8_t USCI0_UART_ReceiveData8(void)
 317          {
 318   1              return US0CON3;
 319   1      }
 320          
 321          
 327          void USCI0_UART_SendData9(uint16_t Data)
 328          {
 329   1              uint8_t Data_9Bit;
 330   1              Data_9Bit = (Data>>8);
 331   1              if(Data_9Bit)
 332   1              {
 333   2                      US0CON0 |= 0x08;
 334   2              }
 335   1              else
 336   1              {
 337   2                      US0CON0 &= 0xf7;
 338   2              }
 339   1              
 340   1              US0CON3 = (uint8_t)Data;
 341   1      }
 342          
 343          
 349          uint16_t USCI0_UART_ReceiveData9(void)
 350          {
 351   1              uint16_t Data9;
 352   1              Data9 =  US0CON3 + ((uint16_t)(US0CON0&0X04)<<6);
 353   1              return Data9;
 354   1      }
 355          
 356          
 363          void USCI0_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 364          {
 365   1          if(NewState != DISABLE)
 366   1          {
 367   2             IE1 |= 0x01;
 368   2          }
 369   1          else
 370   1          {
 371   2             IE1 &= 0xFE;
 372   2          }
 373   1      
 374   1              if(Priority != LOW)
 375   1              {
 376   2                      IP1 |= 0x01;
 377   2              }
 378   1              else
 379   1              {
 380   2                      IP1 &= 0xFE;
 381   2              }
 382   1      }
 383          
 384          
 390          FlagStatus USCI0_GetFlagStatus(USCI0_Flag_TypeDef USCI0_FLAG)
 391          {
 392   1              FlagStatus bitstatus = RESET;
 393   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)
                      if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL))
                      #endif
 396   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)
 397   1              if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG==USCI0_SPI_FLAG_
             -TXE))
 398   1              #endif
 399   1              {
 400   2                      if((USCI0_FLAG & US0CON1) != (uint8_t)RESET)
 401   2                      {
 402   3                              bitstatus = SET;                        
 403   3                      }
 404   2                      else
 405   2                      {       
 406   3                              bitstatus = RESET;
 407   3                      }
 408   2              }
 409   1              else
 410   1              {
 411   2                      if((USCI0_FLAG & US0CON0) != (uint8_t)RESET)
 412   2                      {
 413   3                              bitstatus = SET;                        
 414   3                      }
 415   2                      else
 416   2                      {       
 417   3                              bitstatus = RESET;
 418   3                      }
 419   2              }
 420   1              
 421   1              return bitstatus;
 422   1      }
 423          
 424          
 430          void USCI0_ClearFlag(USCI0_Flag_TypeDef USCI0_FLAG)
 431          {
 432   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)
                      if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL))
                      #endif  
 435   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)
 436   1              if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG==USCI0_SPI_FLAG_
             -TXE))
 437   1              #endif
 438   1              {
 439   2                      US0CON1 &= (~USCI0_FLAG);
 440   2              }
 441   1              else
 442   1              {
 443   2                      US0CON0 &= (~USCI0_FLAG);
 444   2              }
 445   1      }
 446          
 447          
 454          void USCI0_TWI_SendAddr(uint8_t Addr,USCI0_TWI_RWType RW)
 455          {
 456   1              US0CON3 = (Addr<<1)|RW; 
 457   1      }
 458          
 459          #if defined (SC95F8x2x) || defined (SC95F7x2x)  
 460          
 471          void USCI0_SC_Init( FunctionalState ClockEnable,
 472                                                  USCI0_SC_ERS_TypeDef ErrorSignal,
 473                                                  USCI0_SC_TREN_TypeDef TrenMode,
 474                                                  USCI0_SC_CONS_TypeDef ConsMode,
 475                                                  FunctionalState ReSend,
 476                                                  USCI0_SC_Check_TypeDef CheckType
 477                                             ) 
 478          {
 479   1              if(ClockEnable!= DISABLE)
 480   1              {
 481   2                      US0CON0|=0x40;
 482   2              }
 483   1              else
 484   1              {
 485   2                      US0CON0&=~0x40;
 486   2              }
 487   1      
 488   1              US0CON0&= ~0x3d;
 489   1              US0CON0|= TrenMode|ConsMode|CheckType|(ErrorSignal<<3);
 490   1      
 491   1              if(ReSend!= DISABLE)
 492   1              {
 493   2                       US0CON0|=0x02;
 494   2              }
 495   1              else
 496   1              {
 497   2                       US0CON0&=~0x02;
 498   2              }
 499   1      
 500   1      }
 501          
 507          void USCI0_SC_EGT(uint8_t EgtCount)
 508          {
 509   1              US0CON4 = EgtCount;
 510   1      }
 511          
 512          
 519          void USCI0_SC_ETU_SET(USCI0_SC_PresSel_TypeDef SC_PrescalerSelection,uint16_t EtuCk)
 520          {
 521   1              US0CON2 = (EtuCk>>8);
 522   1              US0CON1 = (uint8_t)EtuCk;
 523   1              US0CON2 = (SC_PrescalerSelection<<4);
 524   1      }
 525          
 531          void USCI0_SC_Cmd(FunctionalState NewState)
 532          {
 533   1              if(NewState == DISABLE)
 534   1              {
 535   2                      US0CON0 &= 0X7F;
 536   2              }
 537   1              else
 538   1              {
 539   2                      US0CON0 |= 0x80;
 540   2              }       
 541   1      }
 542          
 548          FlagStatus USCI0_SC_GetFlagStatus(USCI0_SC_Flag_TypeDef USCI0_SC_FLAG)
 549          {
 550   1     
 551   1     
 552   1     
 553   1                US0CON5 |= (USCI0_SC_FLAG&0X80);
 554   1                return USCI0_SC_FLAG&US0CON5;
 555   1      }
 556          
 562          void USCI0_SC_SendData(uint8_t Data)
 563          {
 564   1              US0CON3 = Data;
 565   1      }
 566          
 572          uint8_t USCI0_SC_ReceiveData(void)
 573          {
 574   1              return US0CON3;
 575   1      }
 576          
 608          
 609          
 610                                     
 611                         
 612          
 613          
 614          
 615          
MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    633    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.
C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
