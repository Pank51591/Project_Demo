C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TKDRIVER
OBJECT MODULE PLACED IN ..\Output\TKDriver.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\Drivers\TKDriver\C\TKDriver.C LARGE OBJECTADVANCE
                    -D OPTIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTou
                    -chKey_Lib;..\IAP_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\TKDriver.lst) TABS(2) OBJECT(..\Output\TKDriver.obj)

line level    source

   1          //*************************************************************************************************
   2          //  Copyright (c)   ÉîÛÚÊÐÈüÔªÎ¢µç×ÓÓÐÏÞ¹«Ë¾
   3          //  ÎÄ¼þÃû³Æ  :  S_TouchKeyCFG.c
   4          //  ×÷Õß    : 
   5          //  Ä£¿é¹¦ÄÜ  :  ´¥¿Ø¼üÅäÖÃÎÄ¼þ
   6          //  °æ±¾    :
   7          //  ¸ü¸Ä¼ÇÂ¼  :
   8          //  ×¢ÒâÊÂÏî  :  ÓÃ»§ÐèÒªÅäÖÃµÄÎÄ¼þÔÚS_TouchKeyCFG.hÖÐ
   9          //  ¿â°æ±¾±ê¼Ç  : 
  10          //************************************************************************************************
  11          #include "S_TouchKeyCFG.h"
  12          #include "TKDriver.h"
  13          #include "stdio.h"
  14          #include "SC95F8x1xB_C.H"
  15          #include "HeadFiles\SysFunVarDefine.h"
  16          #include "Lifetest.h"
  17          //#include "SC_System.h"
  18          
  19          #define ScanTimeCon 3
  20          //*************************************************************************************
  21          //     ¼Ä´æÆ÷¶¨Òå
  22          //*************************************************************************************
  23          /*PSW*/
  24          sfr   TK_PSW      =   0xD0;             //³ÌÐò×´Ì¬×Ö
  25          sbit  TK_CY   =   TK_PSW^7;           //½øÎ»  
  26          
  27          #if defined(SC95F8x3x) || defined(SC92L853x) || defined(SC95F8x6x) || defined(SC95F8x1xB) 
  28          //sfr     BTMCON      =   0XFB;               //µÍÆµ¶¨Ê±Æ÷¿ØÖÆ¼Ä´æÆ÷
  29          #elif defined(SC92F848x) || defined(SC92F859x) 
              sfr     BTMCON      =   0XCE; 
              #endif
  32          
  33          
  34          sfr   TK_IE1      =   0xA9;             //ÖÐ¶Ï¿ØÖÆ¼Ä´æ
  35          /*system*/
  36          //sfr   PCON      =   0x87;             //µçÔ´¹ÜÀí¿ØÖÆ¼Ä´æÆ÷
  37          
  38          sfr   TKCR  = 0xE8;               //TouchKey¿ØÖÆ¼Ä´æÆ÷
  39          
  40          sfr   TKTMH = 0xE7;               //´¥Ãþ°´¼ü¶¨Ê±¼Ä´æÆ÷L
  41          sfr   TKTML = 0xE6;               //´¥Ãþ°´¼ü¶¨Ê±¼Ä´æÆ÷L
  42          sfr16   TKTM    =   0xE6;
  43          
  44          sfr   TKCNTH  = 0xE5;               //TouchKey¼ÆÊýÆ÷Öµ¸ß7Î»
  45          sfr   TKCNTL  = 0xE4;               //TouchKey¼ÆÊýÆ÷ÖµµÍ8Î»
  46          sfr16   TKCNT   =   0xE4;
  47          
  48          sfr   TKCFG2  = 0xE3;               //´¥Ãþ°´¼ü²Î¿¼µçÑ¹ÅäÖÃ¼Ä´æÆ÷
  49          sfr   TKCFG1  = 0xE2;               //TouchKeyÅäÖÃ¼Ä´æÆ÷2
  50          sfr   TKCFG0  = 0xE1;               //TouchKeyÅäÖÃ¼Ä´æÆ÷1
  51          
  52          /*TKCR*/
  53          sbit  ENTKS = TKCR^7;               //TouchKey¿ª¹ØµçÔ´
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 2   

  54          sbit  TRIG  = TKCR^6;               //TouchKey´¥·¢¿ª¹Ø£ºÐ´1ÓÐÐ§£¬´¥·¢Ò»´ÎkeyÉ¨ÃèÖÜÆÚ
  55          sbit  TRIF  = TKCR^5;               //TouchKeyÖÐ¶Ï±êÖ¾
  56          //===========================================================================
  57          //È«¾Ö±äÁ¿¶¨Òå
  58          unsigned  char  xdata   SOCAPI_TouchKeyStatus;  //API½Ó¿Ú×´Ì¬£ºbit7-Ò»ÂÖÉ¨ÃèÍê³É±êÖ¾  1:Íê³É  0£ºÎ´Íê³É
  59                                      //         bit6-Í¨µÀ´¥Ãþ¼ÆÊýÒç³ö±êÖ¾ 1:Òç³ö  0:Î´Òç³ö
  60          //===============================================================================
  61          //È«¾Ö±äÁ¿ÉùÃ÷£º¸ÃÇøÓò²»¿ÉÐÞ¸Ä
  62          unsigned  int   xdata   RawData [SOCAPI_SET_TOUCHKEY_TOTAL];      
  63          unsigned  int   data    BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  64          unsigned    int   xdata   FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];                        
  65          unsigned  char    xdata   RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];       
  66          unsigned  char    xdata   TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];        
  67          unsigned  char    xdata   NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];        
  68          unsigned  char  xdata   CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];                 
  69          unsigned    char    xdata       LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL];
  70          unsigned  char    xdata   FloatAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  71          unsigned  char  xdata       BaseLineAdjusttmp[SOCAPI_SET_TOUCHKEY_TOTAL];   
  72          int                 xdata       DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  73          char              xdata   SetNoiseThreshold;
  74          unsigned  char  xdata   ConfirmTouchCnt;
  75          unsigned  char  xdata   MultipleDealTpye = 0; 
  76          
  77          //×Ô¶¨Òå±äÁ¿
  78          unsigned  int   xdata       UpdateBaseLNum;         // µ¥¼ü³¤°´¼ÆÊýÆ÷
  79          unsigned  int   xdata       MultipleLNum;         // ¶à°´¼ü¸ÉÈÅ¼ÆÊý
  80          bit   WakeUp_Flag = 0;
  81          
  82          extern unsigned char gcSleepDelayTime;
  83          
  84          
  85          //Íâ²¿±äÁ¿½Ó¿Ú
  86          extern  unsigned  char  data    CurrentChannelMax;    //µ±Ç°Ñ¡ÖÐµÄkeysensorµÄ¸öÊý
  87          extern  bit  bMultiple; //¶à°´¼ü±êÖ¾
  88          extern  unsigned  int     xdata       ScanTime;
  89            
  90          extern  bit  GetIsNeedUpdateBaseline(void);
  91          extern  void SetNeedUpdateBaseline(void);
  92          extern  unsigned long int SensorKeyFlag(void);
  93          extern  void MultipleDeal(unsigned char CycleCnt);
  94          extern  void FilterDataDeal(unsigned char i);
  95          extern  void TouchKey_Service(void);
  96          void  TKSleepMode(void);
  97          extern void ADC_Process(void);
  98          extern void Life_Process(void);
  99          
 100          /***************µ¯»É¿â¶ÀÓÐ***************/
 101          #define   SOCAPI_SET_CS_FUNCTION            1   //0:±íÊ¾²»½øÐÐCS²âÊÔ,1: ±íÊ¾½øÐÐCS²âÊÔ,Ä¬ÈÏ0
 102          #define   SOCAPI_INHIBITION_ZONE              8   //ÒÖÖÆÇø¼ä%£¬ÉèÖÃ·¶Î§5-10£¬Ä¬ÈÏ7,¼´£¨7*10£©%=70% £¬Á¬Ë®Ê±¼Ó´ó¸Ã
             -²ÎÊý,¶Ô½²»úÉèÖÃÐ¡
 103          #define   SOCAPI_MAX_KEY_MUTIPLE            300   //¶àÉÙ´Î¸ÉÈÅ¸üÐÂ»ùÏß£¬Ä¬ÈÏ300*5=1500
 104          #define   SOCAPI_MAX_KEY_NUM_INVALID          3   //Ç¿ÖÆ¸üÐÂ»ùÏß°´¼üÏÞÖÆ¸öÊý£¬Ä¬ÈÏ3
 105          /****************************************/
 106          
 107          #define     AppType               0
 108          #define     IsDoubleKey           1
 109          #define     AirSeparationDistance       2
 110          #define     CONFIRMTOUCHCNT                 3
 111          #define     INIT_AUTO_UPDATE_TIME       4
 112          #define     SET_KEY_CONTI_TIME              5  
 113          #define     SET_SYNC_UPDATE         6
 114          #define     SET_UPDATE_SPEED        7 
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 3   

 115          #define     AUTO_UPDATE_TIME            8
 116          #define     FilteredKValue          9
 117          #define     SET_ANTIJAM             10
 118          #define     BAUD                    11
 119          #define     DwellTime               12
 120          #define     SaveTime                13
 121          #define     NOISE                   16
 122          
 123          #define     SET_TOUCH_FREQ          0
 124          #define     SET_RESOLUTION          1
 125          #define     SET_GAIN_CFG          2
 126          #define     SCANTIME            3
 127          #define     SET_ICHA            4
 128          #define     FINGER_THRESHOLD_H          6
 129          #define     FINGER_THRESHOLD_L          7
 130          
 131          //**********************************************************************************  
 132          //                µÍ¹¦ºÄÉèÖÃ                //
 133          //**********************************************************************************
 134          
 135          #define     TK_LowPowerMode                
 136          
 137          #ifdef  TK_LowPowerMode
 138          
 139          #define   BTM_TIMEBASE_15600US     0X00   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª15.6MS
 140          #define   BTM_TIMEBASE_31300US     0X01   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª31.3MS
 141          #define   BTM_TIMEBASE_62500US     0X02   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª62.5MS
 142          #define   BTM_TIMEBASE_125MS       0X03   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª125MS
 143          #define   BTM_TIMEBASE_250MS       0X04   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª250MS
 144          #define   BTM_TIMEBASE_500MS       0X05   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª500MS
 145          #define   BTM_TIMEBASE_1S          0X06   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª1S
 146          #define   BTM_TIMEBASE_2S          0X07   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª2S
 147          #define   BTM_TIMEBASE_4S          0X08   //µÍÆµÊ±ÖÓÖÐ¶ÏÊ±¼äÎª4S
 148          
 149          #include <intrins.h>
 150          
 151          #define      WakeUpKeyNum                      WakeUpKeyNum_Set                    //µÍ¹¦ºÄÄ£Ê½ÏÂÉ¨Ãè°´¼ü¸
             -öÊý     
 152          #define      WakeUpKeyChannel                  WakeUpKeyChannel_Set                //µÍ¹¦ºÄÏÂÉ¨Ãè°´¼üµÄ¶ÔÓ
             -¦Í¨µÀ
 153          #define      TK_SeepTimervSetting              TK_SeepTimervSetting_Set            //µÍ¹¦ºÄÏÂ°´¼üÖ®¼äµÄÉ¨Ã
             -è¼ä¸ô
 154          #define      TK_WakeUpConfirmTouchCnt          TK_WakeUpConfirmTouchCnt_Set      //µÍ¹¦ºÄÏÂÈ·ÈÏ°´¼ü´ÎÊý
 155          
 156          #if TK_SeepTimervSetting == BTM_TIMEBASE_4S             //µÍ¹¦ºÄÏÂ»ùÏß¸üÐÂ¼ä¸ô¶¨Òå
                #define  BaselineUpdateCnt  1                   
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_2S             
                #define  BaselineUpdateCnt  3
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_1S             
                #define  BaselineUpdateCnt  6
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_500MS          
                #define  BaselineUpdateCnt  12
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_250MS           
                #define  BaselineUpdateCnt  24
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_125MS
 167            #define  BaselineUpdateCnt  48
 168          #elif TK_SeepTimervSetting == BTM_TIMEBASE_62500US
                #define  BaselineUpdateCnt  96
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_31300US
                #define  BaselineUpdateCnt  192
              #elif TK_SeepTimervSetting == BTM_TIMEBASE_15600US
                #define  BaselineUpdateCnt  384                 
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 4   

              #endif
 175          
 176          bit  LowPowerScan_Flag = 0;                                         //µÍ¹¦ºÄÉ¨Ãè±êÖ¾
 177          bit  SingleKeyFastScan_Flag = 0;                                    //µ¥°´¼ü¿ìËÙÉ¨Ãè±êÖ¾
 178          bit  BTM_WakeUpFlag =0;                       //BTM»½ÐÑ±êÖ¾Î»
 179          bit  Touch_WakeUpFlag=0;                      //°´¼ü»½ÐÑ±êÖ¾Î»
 180          
 181          unsigned    char    xdata       WakeUpKey_List[WakeUpKeyNum];
 182          unsigned  char  xdata       WakeUpThenScanCount = 0; 
 183          unsigned  int   WakeUpNum;                    //»½ÐÑ´ÎÊý¼ÆÊý--ÓÃÓÚµÍ¹¦ºÄÏÂ¸üÐÂ»ùÏß
 184          unsigned  char  data WakeUpKeyValue;                  //==WakeUpKey_List[WakeUpKey_Index]
 185          unsigned  int   ScanTimeTemp0;                  //==ScanTime
 186          
 187          //**********************************************************************************  
 188          //                Ãæ°åÑ¡ÔñÉèÖÃ                //
 189          //**********************************************************************************
 190          
 191          //unsigned char  Sensitivity_4mmValue[1][8]={0x03,0x2e,0x04,0x0a,0x21,0x05,0x00,0x9c,};  //4MM ¸Ö»¯²£Á§ 01
 192          //unsigned char  Sensitivity_4mmValue[1][8]={0x03,0x2e,0x04,0x08,0x22,0x06,0x00,0xad,};  //4MM ¸Ö»¯²£Á§ 02
 193          //unsigned char  Sensitivity_8mmValue[1][8]={0x03,0x2e,0x04,0x1a,0x22,0x05,0x00,0x98,}; // 8mm Î¢¾§²£Á§
 194          //unsigned char  Sensitivity_4mmValue[1][8]={0x03,0x2e,0x04,0x0e,0x22,0x05,0x01,0x5f,};  //4MM ¸Ö»¯²£Á§ 06
             -28
 195          //unsigned char  Sensitivity_8mmValue[1][8]={0x03,0x2e,0x04,0x10,0x22,0x05,0x00,0xc7,};  // 8mm Î¢¾§²£Á§
 196          
 197          
 198          unsigned char  Sensitivity_4mmValue[1][8]={0x03,0x32,0x04,0x08,0x23,0x05,0x00,0xc6,};      //c6 = 198
 199          unsigned char  Sensitivity_8mmValue[1][8]={0x03,0x2a,0x04,0x10,0x22,0x05,0x00,0xf5,};  // 8mm Î¢¾§²£Á§7c
 200          
 201          
 202          extern void Time_Process(void);
 203          extern void SleepLED_Process(void);
 204          extern void WakeAutoSleep(void);
 205          
 206          void Set_Cfg()
 207          { 
 208   1        unsigned char i;
 209   1          if(P31==0)       //½ÓÉÏ
 210   1          {
 211   2            for(i=0;i<8;i++)
 212   2            {
 213   3              TKChannelCfg[0][i]=Sensitivity_4mmValue[0][i];
 214   3            }     
 215   2          }
 216   1          else
 217   1          {
 218   2            for(i=0;i<8;i++)
 219   2            {
 220   3              TKChannelCfg[0][i]=Sensitivity_8mmValue[0][i];
 221   3            }         
 222   2          }
 223   1      }
 224          
 225          
 226          //**********************************************************************************
 227          
 228          /**************************************************
 229          *º¯ÊýÃû³Æ£ºvoid BtmInit(void) 
 230          *º¯Êý¹¦ÄÜ£º
 231          *Èë¿Ú²ÎÊý£ºvoid 
 232          *³ö¿Ú²ÎÊý£ºvoid
 233          **************************************************/
 234          void BTM_Init(void)
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 5   

 235          {
 236   1          BTMCON = BTMCON & 0XF0 | TK_SeepTimervSetting;
 237   1          BTMCON |= 0X80;
 238   1          TK_IE1 |= 0X04;
 239   1      }
 240          
 241          /**************************************************
 242          *º¯ÊýÃû³Æ£ºvoid BtmInit(void) interrupt 0
 243          *º¯Êý¹¦ÄÜ£ºBtmÖÐ¶Ï·þÎñº¯Êý
 244          *Èë¿Ú²ÎÊý£ºvoid 
 245          *³ö¿Ú²ÎÊý£ºvoid
 246          **************************************************/
 247          void BtmInit(void) interrupt  9
 248          {
 249   1         BTM_WakeUpFlag = 1;
 250   1      
 251   1      }
 252          #endif
 253          
 254          //**********************************************************************************  
 255          //                  º¯Êý½Ó¿Úµ÷ÓÃ²¿·Ö                  //
 256          //**********************************************************************************
 257          /**************************************************
 258          *º¯ÊýÃû³Æ£ºunsigned int SetOneKeyPushResetTime(void) 
 259          *º¯Êý¹¦ÄÜ£º°´¼ü×î³¤µÄÊä³öÊ±¼ä
 260          *Èë¿Ú²ÎÊý£ºvoid
 261          *³ö¿Ú²ÎÊý£ºunsigned int SOCAPI_SET_KEY_CONTI_TIME
 262          *±¸×¢  £ºÕâ¸ö·µ»ØÖµµÄÉèÖÃ£¬ ÊÇ¸ù¾ÝÓÐ¶à³¤Ê±¼äÆô¶¯TouchKeyRestart£¨£©
 263          ÀýÈç10ms Æô¶¯Ò»´Î£¬ ÄÇSOCAPI_SET_KEY_CONTI_TIME*10ms£¬³¬¹ýÊ±¼äºó´Ë°´¼üÎÞÐ§¡£
 264          **************************************************/
 265          unsigned int SetOneKeyPushResetTime(void)   
 266          {   
 267   1        return  TKCFG[SET_KEY_CONTI_TIME];
 268   1      }
 269          
 270          /**************************************************
 271          *º¯ÊýÃû³Æ£ºint  GetBaselineUpdateThreshold(void)
 272          *º¯Êý¹¦ÄÜ£º¸üÐÂËÙ¶È 
 273          *Èë¿Ú²ÎÊý£ºvoid
 274          *³ö¿Ú²ÎÊý£ºint 
 275          *±¸×¢  £º
 276          **************************************************/
 277          int  GetBaselineUpdateThreshold(void)
 278          {
 279   1        return TKCFG[SET_UPDATE_SPEED]; 
 280   1      }
 281          
 282          /**************************************************
 283          *º¯ÊýÃû³Æ£ºunsigned char GetInitAutoUpdateTime(void)
 284          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯×Ô¶¯Ð£×¼´ÎÊý
 285          *Èë¿Ú²ÎÊý£ºvoid
 286          *³ö¿Ú²ÎÊý£ºunsigned  char 
 287          *±¸×¢  £º
 288          **************************************************/
 289          unsigned char GetInitAutoUpdateTime(void)
 290          {
 291   1        return  TKCFG[INIT_AUTO_UPDATE_TIME];
 292   1      }
 293          /**************************************************
 294          *º¯ÊýÃû³Æ£º char GetCsFunction(void)
 295          *º¯Êý¹¦ÄÜ£º½øÐÐCS ²âÊÔ
 296          *Èë¿Ú²ÎÊý£ºvoid
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 6   

 297          *³ö¿Ú²ÎÊý£ºchar SOCAPI_SET_CS_FUNCTION
 298          *±¸×¢  £º
 299          **************************************************/
 300          char GetCsFunction(void)
 301          {
 302   1        return SOCAPI_SET_CS_FUNCTION; 
 303   1      }
 304          /**************************************************
 305          *º¯ÊýÃû³Æ£ºint  GetCurrFingerValue(unsigned char i)
 306          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°µÄfinger Öµ
 307          *Èë¿Ú²ÎÊý£ºunsigned char
 308          *³ö¿Ú²ÎÊý£ºint 
 309          *±¸×¢  £º
 310          **************************************************/
 311          unsigned int   GetCurrFingerValue(unsigned char i)
 312          { 
 313   1        return  TKChannelCfg[i][FINGER_THRESHOLD_H]*256+TKChannelCfg[i][FINGER_THRESHOLD_L] ;
 314   1      }
 315          
 316          /**************************************************
 317          *º¯ÊýÃû³Æ£ºunsigned char  GetScanTimeValue(unsigned char i)
 318          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄÉ¨ÃèÊ±¼ä
 319          *Èë¿Ú²ÎÊý£ºunsigned char
 320          *³ö¿Ú²ÎÊý£ºunsigned char 
 321          *±¸×¢  £º
 322          **************************************************/
 323          unsigned char  GetScanTimeValue(unsigned char i)
 324          { 
 325   1        return TKChannelCfg[i][SCANTIME];
 326   1      }
 327          /**************************************************
 328          *º¯ÊýÃû³Æ£ºunsigned char IsDoubleKeyOrSlideKey(void)
 329          *º¯Êý¹¦ÄÜ£º¼ì²âÊÇ·ñÊÇµ¯»É»¬Ìõ»òÕßË«¼ü
 330          *Èë¿Ú²ÎÊý£ºvoid
 331          *³ö¿Ú²ÎÊý£ºunsigned char 
 332          *±¸×¢  £º
 333          **************************************************/
 334          unsigned char IsDoubleKeyOrSlideKey(void)
 335          {
 336   1          return TKCFG[IsDoubleKey];
 337   1      }
 338          /**************************************************
 339          *º¯ÊýÃû³Æ£ºunsigned char  GetBaseLineAdjustValue(unsigned char i)
 340          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄ»ùÏßµ÷Õû
 341          j
 342          *Èë¿Ú²ÎÊý£ºunsigned char
 343          *³ö¿Ú²ÎÊý£ºunsigned char 
 344          *±¸×¢  £º
 345          **************************************************/
 346          unsigned char  GetBaseLineAdjustValue(unsigned char i)
 347          { 
 348   1           return BaseLineAdjusttmp[i]; 
 349   1      }
 350          /**************************************************
 351          *º¯ÊýÃû³Æ£ºunsigned char GetUpConfirmCnt(void)
 352          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼üµ¯Æð´ÎÊý
 353          *Èë¿Ú²ÎÊý£ºvoid
 354          *³ö¿Ú²ÎÊý£º·µ»Ø°´¼üµ¯ÆðÈ·ÈÏ´ÎÊý 
 355          *±¸×¢  £º
 356          **************************************************/
 357          unsigned char GetUpConfirmCnt(void)
 358          {
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 7   

 359   1        return ConfirmTouchCnt>>1;
 360   1      }
 361          /**************************************************
 362          *º¯ÊýÃû³Æ£ºunsigned char GetTKYzCnt(void)
 363          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÈ·ÈÏ´ÎÊý
 364          *Èë¿Ú²ÎÊý£ºvoid
 365          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆ´ÎÊý 
 366          *±¸×¢  £º
 367          **************************************************/
 368          
 369          unsigned char GetTKYzCnt(void)
 370          {
 371   1        return (ConfirmTouchCnt/3);
 372   1      }
 373          
 374          /**************************************************
 375          *º¯ÊýÃû³Æ£ºint GetTKYzThreshold(unsigned char i)
 376          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÇø¼ä
 377          *Èë¿Ú²ÎÊý£ºunsigned char i
 378          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆÇø¼ä
 379          *±¸×¢  £º
 380          **************************************************/
 381          int GetTKYzThreshold(unsigned char i)
 382          { 
 383   1        unsigned int SetFingerThresholdtmp; 
 384   1        
 385   1        SetFingerThresholdtmp = GetCurrFingerValue(i); 
 386   1          SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 387   1      
 388   1        return SetFingerThresholdtmp;
 389   1      }
 390          /**************************************************
 391          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 392          *º¯Êý¹¦ÄÜ£ºµ±Ç°Í¨µÀÑ¡Ôñ
 393          *Èë¿Ú²ÎÊý£ºvoid
 394          *³ö¿Ú²ÎÊý£ºvoid
 395          *±¸×¢  £º
 396          **************************************************/
 397          void CurrentSensorChoose(void)
 398          {
 399   1        unsigned char   i = 0;
 400   1        unsigned char   Ctk_Channel_mark = 0;
 401   1        unsigned char   WakeUpKey_Channel_mark = 0;
 402   1        unsigned long int CurrentSensorKey = 0 ; 
 403   1        
 404   1        CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 405   1          
 406   1        for(i=0;i<31;i++)
 407   1        {
 408   2          CurrentSensorKey=CurrentSensorKey>>1;
 409   2          if(TK_CY)
 410   2          {
 411   3            CurrentChannel[Ctk_Channel_mark] = i;           //Ñ¡Ôñ´¥Ãþµ±Ç°µÄÍ¨µÀ
 412   3                  #ifdef  TK_LowPowerMode
 413   3            if(WakeUpKey_Channel_mark<WakeUpKeyNum)
 414   3                  {
 415   4                      if((WakeUpKeyChannel&((unsigned long int)1<<i)))
 416   4                      {
 417   5                          WakeUpKey_List[WakeUpKey_Channel_mark++] = Ctk_Channel_mark;
 418   5                      }
 419   4                  }
 420   3                  #endif
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 8   

 421   3            Ctk_Channel_mark++;
 422   3            if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 423   3              break;
 424   3          }   
 425   2        }
 426   1        CurrentChannelMax = Ctk_Channel_mark;             //µ±Ç°Ñ¡ÔñµÄ°´¼üÊý 
 427   1      }
 428          
 429          /**************************************************
 430          *º¯ÊýÃû³Æ£ºunsigned char  GetCfgMsg(unsigned char i)
 431          *º¯Êý¹¦ÄÜ£º»ñÈ¡Touch KEY ÅäÖÃÐÅÏ¢
 432          *Èë¿Ú²ÎÊý£ºvoid
 433          *³ö¿Ú²ÎÊý£ºint 
 434          *±¸×¢  £º
 435          **************************************************/
 436          unsigned char  GetCfgMsg(unsigned char i)
 437          {
 438   1        switch(i)
 439   1        { 
 440   2           case 0:  return TKChannelCfg[0][SET_TOUCH_FREQ];
 441   2           case 1:  return TKChannelCfg[0][SET_RESOLUTION];
 442   2           case 2:  return TKChannelCfg[0][SET_GAIN_CFG];
 443   2           case 3:  return GetBaseLineAdjustValue(0); //TKChannelCfg[0][SET_GAIN_CFG];
 444   2           case 4:  return TKCFG[SET_ANTIJAM];
 445   2           default:return 0;    
 446   2        }
 447   1      }
 448          
 449          /**************************************************
 450          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 451          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯TK¼Ä´æÆ÷
 452          *Èë¿Ú²ÎÊý£ºvoid
 453          *³ö¿Ú²ÎÊý£ºvoid
 454          *±¸×¢  £º
 455          **************************************************/
 456          void TouchKeyCFGInit(void)
 457          {
 458   1        unsigned char   i;
 459   1        ConfirmTouchCnt = TKCFG[CONFIRMTOUCHCNT];
 460   1        SetNoiseThreshold = TKCFG[NOISE];
 461   1        CurrentSensorChoose(); 
 462   1        for(i=0;i<CurrentChannelMax;i++)
 463   1        {
 464   2          BaseLineAdjusttmp[i] =TKChannelCfg[i][SET_ICHA];; 
 465   2        } 
 466   1        UpdateBaseLNum = 0;
 467   1          #ifdef  TK_LowPowerMode
 468   1          BTM_Init();
 469   1          #endif 
 470   1      }
 471          
 472          /**************************************************
 473          *º¯ÊýÃû³Æ£ºunsigned int TouchKeyScan(void)
 474          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼ü½Ó¿Ú
 475          *Èë¿Ú²ÎÊý£ºvoid
 476          *³ö¿Ú²ÎÊý£º°´¼üÍ¨µÀ£¬ ·µ»ØµÄÊÇÒ»¸öint , Í¨µÀÊý
 477          *±¸×¢  £º1,  µ÷ÓÃ´¥¿Ø¿â¼ì²âº¯ÊýSensorKeyFlag()
 478                 2,  ·ÖÎöµÃ³ö16¸öÍ¨µÀ£¬ÄÄ¸öÍ¨µÀÓÐ°´ÏÂ£¬°´ÏÂbit Î»ÉèÖÃÎª1£¬·ñÔòÎª0
 479                 3,  ¼ì²âÊÇ·ñÐèÒªÁ¢¼´¸üÐÂbaseline:  ´óÓÚMAX_KEY_RESET_BASELINE ¸ö°´¼ü°´ÏÂÊ±Á¢¼´¸üÐÂbaseline
 480                 4,  Ë«¼ü»òÕßµ¥¼ü°´ÏÂÊ±£¬ Ê±¼ä´óÓÚSetOneKeyPushResetTime()½á¹ûÊ±¸üÐÂbaseline 
 481          **************************************************/
 482          unsigned char OffHandCount = 0;
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 9   

 483          unsigned int  NumCount = 0;
 484          unsigned long int TouchKeyScan(void)
 485          {
 486   1        unsigned char t;
 487   1          unsigned char MultipleCnt = 0;//°´¼ü¼ÆÊý
 488   1        unsigned long int Keyvalue = 0; 
 489   1        unsigned long int KeyData = 0;  
 490   1        int WakeupDiffData = 0; 
 491   1        int WakeupSetFingerThresholdtmp;
 492   1        
 493   1      
 494   1        if(WakeUp_Flag == 0)
 495   1        {
 496   2          if(GetIsNeedUpdateBaseline() == 0)        //¼ì²âÊÇ·ñÐèÒª¸üÐÂbaseline 
 497   2          {
 498   3            Keyvalue = SensorKeyFlag();         //SensorÅÐ¶Ï, ÕâÀïÈç¹ûbMultiple = 1 ±íÊ¾ÖÐ¼äÓÐ¸ÉÈÅ   //·ÖÎö°´¼ü£¬µÃ³ö±ê×
             -¼µÄ16Í¨µÀbit Î»                                      
 499   3            for(t=0;t<CurrentChannelMax;t++)
 500   3            {
 501   4              Keyvalue = Keyvalue>>1;
 502   4              if(TK_CY)
 503   4              {
 504   5                KeyData |= ((unsigned long int)0x01 << (CurrentChannel[t]));              
 505   5                MultipleCnt++;              
 506   5              }
 507   4            }                
 508   3            if(MultipleCnt >= 2)              //½øÈë¶à°´¼ü´¦Àí
 509   3            {     
 510   4              bMultiple = 1;      
 511   4              if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 512   4              {
 513   5                SetNeedUpdateBaseline();        // Á¢¼´¸üÐÂbaseline ,ÀýÈçÑÇ¿ËÁ¦°å¸ÇÉÏÈ¥
 514   5              }
 515   4              else
 516   4              {         
 517   5                if(IsDoubleKeyOrSlideKey())
 518   5                {
 519   6                  bMultiple = 0;
 520   6                }          
 521   5              }     
 522   4            }     
 523   3        
 524   3            if(bMultiple == 0)                //½øÈë°´¼üÅÐ¶Ï
 525   3            {   
 526   4              if(KeyData != 0x0)                //µ¥¸ö°´¼ü´ïµ½¶à³¤Ê±¼ä¾Íupdate baseline ,ËÉÊÖ¼ì²â
 527   4              {     
 528   5                UpdateBaseLNum++; 
 529   5              }
 530   4              else  
 531   4              {
 532   5                UpdateBaseLNum = 0;   
 533   5              } 
 534   4            } 
 535   3            else
 536   3            {   
 537   4                //¿¼ÂÇ»ùÏß¸üÐÂ    
 538   4              MultipleLNum++; 
 539   4              KeyData = 0x00;
 540   4            }
 541   3        
 542   3            if(UpdateBaseLNum > SetOneKeyPushResetTime()) //°´¼ü³¬³ö×î³¤Êä³öÊ±¼ä¸üÐÂ»ùÏß
 543   3            {
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 10  

 544   4              SetNeedUpdateBaseline(); 
 545   4              UpdateBaseLNum = 0;
 546   4            }
 547   3                
 548   3            if(MultipleLNum >SOCAPI_MAX_KEY_MUTIPLE)    //¸ÉÈÅ¼ÆÊý´óÓÚ×î´ó¼ÆÊý¸üÐÂ»ùÏß
 549   3            {
 550   4              SetNeedUpdateBaseline(); 
 551   4              MultipleDealTpye = 1; 
 552   4              MultipleLNum = 0;
 553   4            }  
 554   3          }     
 555   2          else
 556   2          {
 557   3            MultipleDeal(TKCFG[AUTO_UPDATE_TIME]);      //»ùÏß¸´Î»´¦Àí
 558   3          }
 559   2        }
 560   1        else
 561   1        {
 562   2              #ifdef  TK_LowPowerMode
 563   2          
 564   2          if(Touch_WakeUpFlag==1)
 565   2          {
 566   3            KeyData |= ((unsigned long int)0x01 << (CurrentChannel[WakeUpKeyValue]));
 567   3      
 568   3            WakeupDiffData = RawData[WakeUpKeyValue]-BaseLine[WakeUpKeyValue];
 569   3            WakeupSetFingerThresholdtmp = GetCurrFingerValue(WakeUpKeyValue);
 570   3      
 571   3            if(WakeupDiffData <= (WakeupSetFingerThresholdtmp-((WakeupSetFingerThresholdtmp)>>2)))
 572   3            { 
 573   4              NumCount=0;
 574   4              if(++OffHandCount>5)
 575   4              {
 576   5                OffHandCount = 0;
 577   5                WakeUp_Flag = 0;
 578   5                Touch_WakeUpFlag=0;
 579   5                KeyData = 0;
 580   5              }
 581   4              for(t=0;t<CurrentChannelMax;t++)
 582   4              {
 583   5                FilterDataDeal(t);
 584   5                if(!WakeUp_Flag)
 585   5                {
 586   6                  if(WakeUpKeyValue == t)
 587   6                  continue;
 588   6                  BaseLine[t] = RawData[t]; 
 589   6                }
 590   5              }
 591   4                
 592   4            }
 593   3            else
 594   3            {
 595   4              OffHandCount=0;
 596   4              if(++NumCount > SetOneKeyPushResetTime()) //°´¼ü³¬³ö×î³¤Êä³öÊ±¼ä¸üÐÂ»ùÏß
 597   4              {
 598   5                SetNeedUpdateBaseline(); 
 599   5                NumCount = 0;
 600   5                WakeUp_Flag = 0;
 601   5                Touch_WakeUpFlag=0;
 602   5                KeyData = 0;
 603   5              }   
 604   4            }
 605   3            
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 11  

 606   3          
 607   3          }
 608   2          else
 609   2          {
 610   3            if(++WakeUpThenScanCount>5)
 611   3            {
 612   4              WakeUpThenScanCount = 0;
 613   4              WakeUp_Flag = 0;
 614   4            }
 615   3            for(t=0;t<CurrentChannelMax;t++)
 616   3            {
 617   4              FilterDataDeal(t);
 618   4              if(!WakeUp_Flag)
 619   4              {
 620   5                
 621   5                BaseLine[t] = RawData[t]; 
 622   5              } 
 623   4            }
 624   3            
 625   3          }
 626   2          
 627   2          #endif
 628   2        }  
 629   1        
 630   1        return KeyData;
 631   1      }
 632          
 633          /**************************************************
 634          *º¯ÊýÃû³Æ£ºvoid CTK_ISR(void) interrupt 11
 635          *º¯Êý¹¦ÄÜ£º´¥ÃþÖÐ¶Ï·þÎñº¯Êý
 636          *Èë¿Ú²ÎÊý£ºvoid
 637          *³ö¿Ú²ÎÊý£ºvoid
 638          *±¸×¢  £º
 639          **************************************************/
 640          void CTK_ISR(void) interrupt  11
 641          {
 642   1         TouchKey_Service();
 643   1      }
 644          
 645          /**************************************************
 646          *º¯ÊýÃû³Æ£ºbit GetLowPowerScanFlag(void)
 647          *º¯Êý¹¦ÄÜ£d»ñÈ¡µÍ¹¦ºÄÄ£Ê½
 648          *Èë¿Ú²ÎÊý£ºvoid
 649          *³ö¿Ú²ÎÊý£ºvoid  
 650          **************************************************/
 651          bit GetLowPowerScanFlag(void)
 652          {
 653   1          #ifdef  TK_LowPowerMode
 654   1          return LowPowerScan_Flag;
 655   1          #endif
 656   1      }
 657          
 658          /**************************************************
 659          *º¯ÊýÃû³Æ£ºvoid TouchKey_LowPower_Init(unsigned char i)
 660          *º¯Êý¹¦ÄÜ£dµÍ¹¦ºÄ³õÊ¼»¯
 661          *Èë¿Ú²ÎÊý£ºvoid
 662          *³ö¿Ú²ÎÊý£ºvoid  
 663          **************************************************/
 664          unsigned  char    xdata       BaseLineAdjusttmp_Low[SOCAPI_SET_TOUCHKEY_TOTAL];
 665          unsigned  char  xdata       CurrentChannel_Low[SOCAPI_SET_TOUCHKEY_TOTAL];
 666          unsigned  int   xdata       ScanTimeTemp_Low[SOCAPI_SET_TOUCHKEY_TOTAL];
 667          int   data       SetFingerThresholdtmp_Low[SOCAPI_SET_TOUCHKEY_TOTAL];
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 12  

 668          void TouchKey_LowPower_Init(void)
 669          {
 670   1          unsigned char i;
 671   1            
 672   1          for(i=0;i<WakeUpKeyNum;i++)
 673   1          {
 674   2              WakeUpKeyValue = WakeUpKey_List[i];
 675   2              ScanTimeTemp_Low[WakeUpKeyValue] = ScanTimeTemp0*TKChannelCfg[WakeUpKeyValue][SCANTIME];
 676   2              BaseLineAdjusttmp_Low[WakeUpKeyValue] = BaseLineAdjusttmp[WakeUpKeyValue];//(TKCFG1 & 0X80) | Base
             -LineAdjusttmp[WakeUpKeyValue];
 677   2              CurrentChannel_Low[WakeUpKeyValue] =  0xc0|CurrentChannel[WakeUpKeyValue];
 678   2      
 679   2              SetFingerThresholdtmp_Low[WakeUpKeyValue] = TKChannelCfg[WakeUpKeyValue][FINGER_THRESHOLD_H]*256+T
             -KChannelCfg[WakeUpKeyValue][FINGER_THRESHOLD_L];        
 680   2      
 681   2              TKCFG0 &= 0XF0;
 682   2              TKCFG0 |= TKChannelCfg[0][SET_TOUCH_FREQ];
 683   2          }
 684   1      }
 685          
 686          /**************************************************
 687          *º¯ÊýÃû³Æ£ºvoid TouchKey_IntoLowPowerMode(void)
 688          *º¯Êý¹¦ÄÜ£d½øÈëµÍ¹¦ºÄÄ£Ê½
 689          *Èë¿Ú²ÎÊý£ºvoid
 690          *³ö¿Ú²ÎÊý£ºvoid  
 691          **************************************************/
 692          void TouchKey_IntoLowPowerMode(void)
 693          {
 694   1          #ifdef  TK_LowPowerMode
 695   1        unsigned char t;
 696   1          LowPowerScan_Flag = 1;
 697   1      
 698   1        ScanTimeTemp0 = ScanTime >> ScanTimeCon;
 699   1          Customer_IntoLowPowerMode_Init();
 700   1      
 701   1          TouchKey_LowPower_Init();
 702   1         
 703   1        for(t=0;t<CurrentChannelMax;t++)
 704   1        {
 705   2           TouchCnt[t] = 0;
 706   2        }
 707   1          #endif
 708   1      }
 709          
 710          #ifdef  TK_LowPowerMode
 711          /**************************************************
 712          *º¯ÊýÃû³Æ£ºvoid TouchKey_QuitLowPowerMode(void)
 713          *º¯Êý¹¦ÄÜ£dÍË³öµÍ¹¦ºÄÄ£Ê½
 714          *Èë¿Ú²ÎÊý£ºvoid
 715          *³ö¿Ú²ÎÊý£ºvoid  
 716          **************************************************/
 717          void TouchKey_QuitLowPowerMode(void)
 718          {
 719   1         LowPowerScan_Flag = 0;
 720   1           WakeUp_Flag = 1;
 721   1         
 722   1           TKCR = 0x80|CurrentChannel[0];
 723   1         TKTM = ScanTime*TKChannelCfg[0][SCANTIME]; 
 724   1         TRIG = 1;
 725   1         while(TRIF == 0);  
 726   1         TRIF = 0;
 727   1         TK_IE1 = TK_IE1|0x10;            //Ê¹ÄÜTKÖÐ¶Ï
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 13  

 728   1           TRIG = 1; 
 729   1           Customer_QuitLowPowerMode_Init();
 730   1      }
 731          
 732          
 733          /**************************************************
 734          *º¯ÊýÃû³Æ£ºvoid Lowpower_BaselineUpdate(unsigned char i)
 735          *º¯Êý¹¦ÄÜ£dµÍ¹¦ºÄ»ùÏß¸üÐÂ
 736          *Èë¿Ú²ÎÊý£ºunsigned char
 737          *³ö¿Ú²ÎÊý£ºvoid  
 738          **************************************************/
 739          void Lowpower_BaselineUpdate(unsigned char i)
 740          {
 741   1        BaseLine[WakeUpKeyValue] =BaseLine[WakeUpKeyValue]-(BaseLine[WakeUpKeyValue]>>i)+(RawData[WakeUpKeyValue]
             ->>i);
 742   1      }
 743          
 744          
 745          /**************************************************
 746          *º¯ÊýÃû³Æ£ºvoid TouchKey_LowPower_Dispose(void)
 747          *º¯Êý¹¦ÄÜ£dµÍ¹¦ºÄÉ¨ÃèÊý¾Ý´¦Àí
 748          *Èë¿Ú²ÎÊý£ºvoid
 749          *³ö¿Ú²ÎÊý£ºvoid  
 750          **************************************************/
 751          
 752          void TouchKey_LowPower_Dispose(void)
 753          {  
 754   1        int data differData; 
 755   1      
 756   1        unsigned char data WakeUpKey_Index;
 757   1      
 758   1        
 759   1        BTM_WakeUpFlag = 0;
 760   1      
 761   1        TRIG = 1;
 762   1          PCON = 0x02;  //PCONµÄbit1 STOPÎ»Ð´1£¬ÅäÖÃMCU½øÈëSTOPÄ£Ê½
 763   1        _nop_();    //ÖÁÉÙÐèÒª8¸ö_nop_()
 764   1          _nop_();
 765   1          _nop_();
 766   1          _nop_();
 767   1          _nop_();
 768   1          _nop_();
 769   1          _nop_();
 770   1        _nop_();
 771   1      
 772   1          TRIG = 1;
 773   1          PCON = 0x02;  //PCONµÄbit1 STOPÎ»Ð´1£¬ÅäÖÃMCU½øÈëSTOPÄ£Ê½
 774   1        _nop_();    //ÖÁÉÙÐèÒª8¸ö_nop_()
 775   1          _nop_();
 776   1          _nop_();
 777   1          _nop_();
 778   1          _nop_();
 779   1          _nop_();
 780   1          _nop_();
 781   1        _nop_();
 782   1        
 783   1        for(WakeUpKey_Index=0; WakeUpKey_Index<WakeUpKeyNum; WakeUpKey_Index++) //Ñ­»·É¨Ãè°´¼ü
 784   1        {
 785   2      
 786   2      
 787   2              WakeUpKeyValue = WakeUpKey_List[WakeUpKey_Index];
 788   2          TKCFG1 =  BaseLineAdjusttmp_Low[WakeUpKeyValue]; 
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 14  

 789   2          TKTM = ScanTimeTemp_Low[WakeUpKeyValue];//ScanTimeTemp;
 790   2          TKCR = CurrentChannel_Low[WakeUpKeyValue];
 791   2      
 792   2              PCON = 0x02;  //PCONµÄbit1 STOPÎ»Ð´1£¬ÅäÖÃMCU½øÈëSTOPÄ£Ê½
 793   2            _nop_();    //ÖÁÉÙÐèÒª8¸ö_nop_()
 794   2              _nop_();
 795   2              _nop_();
 796   2              _nop_();
 797   2              _nop_();
 798   2              _nop_();
 799   2              _nop_();
 800   2            _nop_();       
 801   2      
 802   2              differData = (TKCNT<<ScanTimeCon)-BaseLine[WakeUpKeyValue] ; 
 803   2        
 804   2          if(differData >= SetFingerThresholdtmp_Low[WakeUpKeyValue])
 805   2            {
 806   3             SingleKeyFastScan_Flag = 1;
 807   3             break;       
 808   3            } 
 809   2      
 810   2               if(WakeUpNum==WakeUpKey_Index)
 811   2                  BaseLine[WakeUpKeyValue] += differData>>2;
 812   2        }
 813   1      
 814   1      
 815   1        if(++WakeUpNum>=BaselineUpdateCnt)
 816   1        {
 817   2          WakeUpNum = 0;
 818   2        }
 819   1        
 820   1      
 821   1      }
 822          
 823          /**************************************************
 824          *º¯ÊýÃû³Æ£ºvoid SingleKeyFastScan(void)
 825          *º¯Êý¹¦ÄÜ£dµ¥°´¼ü¿ìËÙÉ¨ÃèÄ£Ê½
 826          *Èë¿Ú²ÎÊý£ºvoid
 827          *³ö¿Ú²ÎÊý£ºvoid  
 828          **************************************************/
 829          void SingleKeyFastScan(void)
 830          { 
 831   1        unsigned char i;
 832   1        int differData; 
 833   1        int SetFingerThresholdtmp;
 834   1        
 835   1        SingleKeyFastScan_Flag = 0;
 836   1        TK_IE1 = TK_IE1|0x10; //´ò¿ªTKÖÐ¶Ï
 837   1        TKCFG1 = (TKCFG1 & 0X80) | BaseLineAdjusttmp[WakeUpKeyValue];
 838   1        TKCR = 0x80|CurrentChannel[WakeUpKeyValue]; 
 839   1        TKTM = ScanTimeTemp0*TKChannelCfg[WakeUpKeyValue][SCANTIME];
 840   1        
 841   1        for(i=0;i<TK_WakeUpConfirmTouchCnt;i++)      //
 842   1          {        
 843   2        
 844   2           TRIG = 1;
 845   2           TKSleepMode();
 846   2           RawData[WakeUpKeyValue] = TKCNT << ScanTimeCon;
 847   2           FilterDataDeal(WakeUpKeyValue);
 848   2               differData = RawData[WakeUpKeyValue]-BaseLine[WakeUpKeyValue] ;
 849   2           SetFingerThresholdtmp = GetCurrFingerValue(WakeUpKeyValue);
 850   2      
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 15  

 851   2           if(differData >= SetFingerThresholdtmp)
 852   2               {   
 853   3                  TouchCnt[WakeUpKeyValue]++;  
 854   3               }             
 855   2               else
 856   2           {
 857   3            break;
 858   3           }
 859   2          }
 860   1        
 861   1          if(TouchCnt[WakeUpKeyValue]>=TK_WakeUpConfirmTouchCnt)
 862   1          {    
 863   2           TouchKey_QuitLowPowerMode();       
 864   2           Touch_WakeUpFlag= 1; 
 865   2        }
 866   1          else
 867   1          {
 868   2          
 869   2              TouchCnt[WakeUpKeyValue] = 0;
 870   2          
 871   2          }
 872   1      }
 873          
 874          
 875          void  TKSleepMode(void)
 876          {   
 877   1        
 878   1        PCON = 0x02;  //PCONµÄbit1 STOPÎ»Ð´1£¬ÅäÖÃMCU½øÈëSTOPÄ£Ê½
 879   1        _nop_();    //ÖÁÉÙÐèÒª8¸ö_nop_()
 880   1          _nop_();
 881   1          _nop_();
 882   1          _nop_();
 883   1          _nop_();
 884   1          _nop_();
 885   1          _nop_();
 886   1        _nop_();
 887   1      }
 888          #endif
 889          /**************************************************
 890          *º¯ÊýÃû³Æ£ºvoid LowPower_Touchkey_Scan(void)
 891          *º¯Êý¹¦ÄÜ£dµÍ¹¦ºÄÄ£Ê½TKÉ¨Ãè
 892          *Èë¿Ú²ÎÊý£ºvoid
 893          *³ö¿Ú²ÎÊý£ºvoid  
 894          **************************************************/
 895           
 896          
 897          void LowPower_Touchkey_Scan(void)
 898          {               
 899   1          #ifdef  TK_LowPowerMode 
 900   1          
 901   1          TKCR &= 0x7f;//~0x80;
 902   1          PCON = 0x02;  //PCONµÄbit1 STOPÎ»Ð´1£¬ÅäÖÃMCU½øÈëSTOPÄ£Ê½
 903   1          _nop_();    //ÖÁÉÙÐèÒª8¸ö_nop_()
 904   1          _nop_();
 905   1          _nop_();
 906   1          _nop_();
 907   1          _nop_();
 908   1          _nop_();
 909   1          _nop_();
 910   1          _nop_();
 911   1          TKCR |= 0x80; //´ò¿ªTKµçÔ´
 912   1      
C51 COMPILER V9.60.0.0   TKDRIVER                                                          04/26/2023 14:07:04 PAGE 16  

 913   1        //½øÐÐ°´¼ü´¦Àí
 914   1        if(BTM_WakeUpFlag)
 915   1        {
 916   2        //  P31=1;  ;       //·ÇBTM»½ÐÑ£¬ÓÃ»§¸ù¾ÝÐèÒª×ÔÐÐÔöÌí´¦Àí³ÌÐò
 917   2          
 918   2          TouchKey_LowPower_Dispose();       //¼ì²â°´¼ü 
 919   2          
 920   2          if( SingleKeyFastScan_Flag == 1)
 921   2            {                  
 922   3              SingleKeyFastScan();       //ÈôÓÐ°´¼üÐÅÏ¢½øÈëµ¥°´¼ü¿ìËÙ¶à´ÎÉ¨ÃèÈ·¶¨°´¼üÊÇ·ñÕæÊµÐÅºÅ¡£
 923   3            }
 924   2        
 925   2          // ÓÃ»§BTM»½ÐÑºóµÄ´¦Àíº¯Êý
 926   2            Customer_BTM_Dispose();
 927   2              
 928   2            Time_Process();
 929   2            Life_Process(); 
 930   2        
 931   2            SleepLED_Process();
 932   2          
 933   2            WakeAutoSleep();
 934   2      //      Key_Scan();
 935   2            
 936   2          //  P31=0;  ;       //·ÇBTM»½ÐÑ£¬ÓÃ»§¸ù¾ÝÐèÒª×ÔÐÐÔöÌí´¦Àí³ÌÐò
 937   2          }
 938   1        else
 939   1        {
 940   2        //  P31=~P31;   ;       //·ÇBTM»½ÐÑ£¬ÓÃ»§¸ù¾ÝÐèÒª×ÔÐÐÔöÌí´¦Àí³ÌÐò
 941   2          //LowPowerScan_Flag = 0;
 942   2          
 943   2          TouchKey_QuitLowPowerMode();
 944   2          
 945   2        }
 946   1        #endif    
 947   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2398    ----
   CONSTANT SIZE    =     34    ----
   XDATA SIZE       =     58      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
