C51 COMPILER V9.60.0.0   SR_EEPROM                                                         04/26/2023 14:07:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SR_EEPROM
OBJECT MODULE PLACED IN ..\Output\SR_EEPROM.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\SR_EEPROM.c LARGE OBJECTADVANCED OPTIMIZE(9,
                    -SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKey_Lib;..\
                    -IAP_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\SR_EEPROM.lst) TABS(2) OBJECT(..\Output\SR_EEPROM.obj)

line level    source

   1          #include "SC_Init.h"  // MCU initialization header file, including all firmware library header files
   2          #include "SC_it.h"
   3          #include "..\Drivers\SCDriver_List.h"
   4          #include "HeadFiles\SysFunVarDefine.h"
   5          
   6          #include "IapOperation.h"
   7           
   8          #include "stdlib.h"
   9          #include "SC_System.h"
  10          
  11           unsigned char Readbuff[12]={0,0,0,0,0,0,0,0,0,0,0};
  12           unsigned char gcRFWorkChennel;
  13           unsigned int  giRandVlaue1;
  14           unsigned char gcRandValue; 
  15           uint8_t RadioFREQ[10];
  16          
  17           
  18          /**************************************************
  19          *函数名称：unsigned char IAP_Read(unsigned long Add,unsigned char ADER)
  20          *函数功能：单Byte读取
  21          *入口参数：Add ：需要擦除的地址(0X00~0X1FFFF（FLASH物理地址）
  22          *         Data：要写入的Byte，ADER:操作对象 APROM为00，EEPROM为02
  23          *出口参数：void
  24          **************************************************/
  25          unsigned char IAP_Read(unsigned long Add,unsigned char Iapade)
  26          {
  27   1        unsigned char xdata IAP_IapData;
  28   1        unsigned char code *point = 0;
  29   1        //保存IAPADE、EA
  30   1        unsigned char tempADER = IAPADE;
  31   1        unsigned char tempEA = EA;
  32   1      
  33   1        EA = 0; //关闭中断
  34   1      
  35   1        IAPADE = Iapade;  
  36   1        IAP_IapData = *(point+Add);
  37   1          
  38   1          //恢复IAPADE、EA，避免MOVC位置出错
  39   1        IAPADE = tempADER;    
  40   1        EA = tempEA;
  41   1        return IAP_IapData;
  42   1        
  43   1      }
  44          
  45          
  46          /**************************************************
  47          *函数名称：void IAP_Write_NByte(unsigned long Add,unsigned char ADER)
  48          *函数功能：写N个Byte
  49          *入口参数：Sadd 写入的起始地址,Eadd 写入的结束地址，ADER:操作对象 APROM为00，EEP
             -ROM为02
  50          *出口参数：void
  51          **************************************************/
  52          void IAP_Write_NByte(unsigned long Sadd,unsigned long Eadd, unsigned char TBuff[],unsigned char Iapade)
C51 COMPILER V9.60.0.0   SR_EEPROM                                                         04/26/2023 14:07:04 PAGE 2   

  53          {
  54   1        unsigned char i = 0;
  55   1        
  56   1        for(; Sadd < Eadd; Sadd ++)
  57   1        {
  58   2          
  59   2          IAP_ProgramByteOption(Sadd,TBuff[i], Iapade);
  60   2          
  61   2          i++;
  62   2          
  63   2        }
  64   1      
  65   1      }
  66          
  67          /**************************************************
  68          *函数名称：void IAP_Write_NByte(unsigned long Add,unsigned char ADER)
  69          *函数功能：写N个Byte
  70          *入口参数：Sadd 读取的起始地址,Eadd 读取的结束地址，ADER:操作对象 APROM为00，EEP
             -ROM为02
  71          *出口参数：void
  72          **************************************************/
  73          void IAP_Read_NByte(unsigned long Sadd,unsigned long Eadd,unsigned char Iapade)
  74          {
  75   1        
  76   1        unsigned char i = 0;
  77   1        
  78   1        for(; Sadd < Eadd; Sadd ++)
  79   1        {
  80   2           Readbuff[i]=IAP_Read(Sadd,Iapade);
  81   2      
  82   2            i++;
  83   2        }
  84   1       
  85   1      }
  86          
  87          void SR_EEPROM_Init(void)
  88          {
  89   1      
  90   1        IAP_Read_NByte(0,10,EEPROM);         // 18
  91   1        
  92   1        if (Readbuff[0] != 0x55)     //首地址写55
  93   1        {
  94   2          Readbuff[0] = 0x55;
  95   2          Readbuff[1] = 0;
  96   2          Readbuff[2] = 0;  
  97   2          
  98   2          Readbuff[3] = 0;
  99   2          
 100   2          Readbuff[4] = 0;
 101   2          Readbuff[5] = 0;
 102   2          
 103   2      
 104   2          IAP_SectorEraseOption(0x0,EEPROM);
 105   2          
 106   2          IAP_Write_NByte(0,10,Readbuff,EEPROM);          //写数据
 107   2      
 108   2          RadioFREQ[0] = 0;
 109   2          RadioFREQ[1] = 0;
 110   2          RadioFREQ[2] = 0;
 111   2          RadioFREQ[3] = 0;
 112   2          RadioFREQ[4] = 0;
 113   2          RadioFREQ[5] = 0;
C51 COMPILER V9.60.0.0   SR_EEPROM                                                         04/26/2023 14:07:04 PAGE 3   

 114   2          
 115   2        }
 116   1        else
 117   1        {
 118   2      
 119   2          RadioFREQ[0] = Readbuff[1];
 120   2        
 121   2          RadioFREQ[1] = Readbuff[2]; 
 122   2          
 123   2          RadioFREQ[2] = Readbuff[3];
 124   2          
 125   2          RadioFREQ[3] = Readbuff[4];
 126   2          
 127   2          RadioFREQ[4] = Readbuff[5];
 128   2          
 129   2          RadioFREQ[5] = Readbuff[6];
 130   2        }
 131   1      }
 132          
 133          void Write_EEPROM(void)
 134          {
 135   1          IAP_SectorEraseOption(0x0,EEPROM);
 136   1        
 137   1          Readbuff[0] = 0x55;
 138   1          Readbuff[1] = RadioFREQ[0];
 139   1          Readbuff[2] = RadioFREQ[1];
 140   1          Readbuff[3] = RadioFREQ[2];
 141   1          Readbuff[4] = RadioFREQ[3];
 142   1          Readbuff[5] = RadioFREQ[4];
 143   1          Readbuff[6] = RadioFREQ[5];
 144   1        
 145   1          IAP_Write_NByte(0,10,Readbuff,EEPROM);
 146   1        
 147   1      }
 148          
 149          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    525    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     26      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
