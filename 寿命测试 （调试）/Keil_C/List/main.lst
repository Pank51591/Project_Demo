C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\main.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE)
                    - BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKey_Lib;..\IAP_L
                    -ib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\main.lst) TABS(2) OBJECT(..\Output\main.obj)

line level    source

   1          //Set:请按照改设置进行OPTION，否则可能出错
   2          //WDT:Enable                EXternal 32K: Enable
   3          //Systerm clock:Fosc/1      P5.2 Normal
   4          //LVR 1.9V                  Vref: Internal 2.048V
   5          //IAP Range：EEPROM Only    DISJTG:Normal
   6          //Start from:APROM          LDROM Size:0K
   7          
   8          //2022-5-25  修改在开关断开后，LED渐亮渐灭变更为闪烁 闪烁时间在define FLASHTIME 中定义
   9          //2022-5-30  修改内部与外部IR判断方法，因为电池版本没有外部红外，所以重新定义判断值 300~2100之间认为是外部
             -IR，其它值认为是内部IR。
  10          
  11          #include "SC_System.h"
  12          #include "Key_Process.h"
  13          #include "Burner_Process.h"
  14          #include "Buzzer_Process.h"
  15          #include "ADC_Process.h"
  16          #include "Time_Process.h"
  17          #include "Output_Process.h"
  18          #include "Sleep_Process.h"
  19          #include "Lifetest.h"
  20          #include "SR_EEPROM.h"
  21          #include "IapOperation.h"
  22          
  23          struct Flag_Struct MyFlag;
  24          
  25          uint8_t gcBurner1OpenCount;          
  26          uint8_t gcBurner1CloseCount;        
  27          
  28          uint8_t gcBurner2OpenCount;         
  29          uint8_t gcBurner2CloseCount;       
  30          
  31          uint8_t gcBurner3OpenCount;         
  32          uint8_t gcBurner3CloseCount;        
  33          
  34          uint8_t gcBurner4OpenCount;        
  35          uint8_t gcBurner4CloseCount;         
  36          
  37          uint8_t gcBurner5OpenCount;         
  38          uint8_t gcBurner5CloseCount;         
  39          
  40          uint8_t gcBurner6OpenCount;          
  41          uint8_t gcBurner6CloseCount;        
  42          
  43          uint8_t gcBurnerStatus;             
  44          uint8_t gcBurnerOpenCount;        
  45          uint8_t gcMCBuzzerstatus;
  46          uint8_t gcAHCloseBuzzerStatus;
  47          
  48          uint8_t gcKeyStatus;                
  49          uint8_t gcKeyCount;                 
  50          uint8_t gcOneMsCount;                
  51          uint32_t gcButton1State;            
  52          uint8_t gcKeyValue;                 
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 2   

  53          uint16_t giKeySW6LongDownTime;      
  54          uint8_t  IRSendCommand[4]={0,0,0,0};
  55          uint32_t gllIRSendData;                //IR Send Data
  56          uint32_t gllIRSendDataBak;                //IR Send Data
  57          
  58          
  59          uint8_t  IRSendDataBitCount;          // 24bit
  60          uint8_t  gcIRSendStatus;
  61          uint16_t  gcIRSendDelayTime;            // 1S
  62          uint8_t gcIRSendCount = 0;              // 3
  63          uint8_t gcIRSendLightOnCount = 0;       //灯开发送计数
  64          uint8_t gcIRSendLightOnTime = 0;
  65          
  66          uint8_t gcIRSendLightOffCount = 0;        //灯关发送计数
  67          uint8_t gcIRSendLightOffTime = 0;
  68          
  69          uint8_t gcIRSendSpeedOffCount = 0;     
  70          uint8_t gcIRSendSpeedOffTime = 0;
  71          
  72          uint8_t gcIRSendSpeedCommandCount = 0;   
  73          uint8_t gcIRSendSpeedCommandTime = 0;
  74          
  75          uint8_t gcBuzzerTime = 0;         
  76          
  77          uint32_t gllIRAdcSumValue = 0;
  78          uint16_t giIRADCValue = 0;
  79          uint8_t  gcIRADCCount = 0;
  80          uint16_t giPowerUpTime = 0;
  81          uint8_t  gcPowerUpTime = 0;
  82          uint16_t giLEDPwmValue = 0;
  83          uint16_t giLEDFlashTime = 0;
  84          uint8_t gcLEDFlashCount = 0;
  85          uint8_t gcSpeedLevel = 0;
  86          uint8_t gcT250MsCount = 0;
  87          uint8_t gi500msCount = 0;
  88          uint16_t  giTimesCount;
  89          
  90          uint8_t gchightbit; 
  91          uint8_t gcmediumbit;
  92          uint8_t gclowbit;
  93          uint8_t gcfallowbit;
  94          
  95          uint8_t mday;
  96          uint8_t giLEDTime;
  97          uint8_t gcLedCount = 0;
  98          uint8_t gcKey;
  99          uint8_t TestLowPower;
 100          extern uint8_t gcKey_Count;
 101          uint8_t L1x,L2x,L3x,L4x;
 102          
 103          extern unsigned char Readbuff[12]; 
 104          extern uint8_t RadioFREQ[10];
 105          
 106          volatile uint16_t giSpeedDelayOffTime;  // 5minute
 107          volatile uint16_t giLightDelayOffTime;  // 5minute
 108          volatile uint8_t gcADCDelayTime;
 109          
 110          void Display_Day (uint8_t Days);
 111          
 112          extern void IAP_Read_NByte(unsigned long Sadd,unsigned long Eadd,unsigned char Iapade);
 113          
 114          void main(void)
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 3   

 115          { 
 116   1                  
 117   1        
 118   1      //           giTimesCount = 125;
 119   1      //      
 120   1      //            RadioFREQ[0] =  giTimesCount / 1000;          
 121   1      //            RadioFREQ[1] =  (giTimesCount - (giTimesCount / 1000) *1000)/100 ;
 122   1      //            RadioFREQ[2] =  (giTimesCount - (giTimesCount / 1000) *1000 - ((giTimesCount - (giTimesCount / 100
             -0) *1000)/100 ) *100) / 10; 
 123   1      //            RadioFREQ[3] = (giTimesCount - (giTimesCount / 1000) *1000 - ((giTimesCount - (giTimesCount / 1000
             -) *1000)/100 ) *100) % 10;
 124   1      //            RadioFREQ[4] = 0x01;
 125   1      //            Write_EEPROM();
 126   1          
 127   1      //            Delay1ms(); 
 128   1      //            Delay1ms(); 
 129   1      //            Delay1ms(); 
 130   1        
 131   1      //            IAP_Read_NByte(0,10,EEPROM);
 132   1      //           
 133   1      //            L1x =  Readbuff[1];
 134   1      //            L2x =  Readbuff[2];
 135   1      //            L3x =  Readbuff[3];
 136   1      //            L4x =  Readbuff[4];             
 137   1      //            TestLowPower = Readbuff[5];
 138   1      //  
 139   1      //    IAP_Read_NByte(0,5,EEPROM); 
 140   1      //  
 141   1      //    gchightbit  =  Readbuff[1];
 142   1      //    gcmediumbit =  Readbuff[2];
 143   1      //    TestLowPowerFlag = Readbuff[3];
 144   1        
 145   1      //    
 146   1      //    RadioFREQ[2] = 1;
 147   1      
 148   1      //    giTimesCount =  Readbuff[2] * 256 + Readbuff[1];
 149   1      //           
 150   1      //     gchightbit = giTimesCount / 1000;
 151   1      //     gcmediumbit = (giTimesCount - gchightbit *1000)/100;
 152   1      //     gclowbit = (giTimesCount - gchightbit *1000 - gcmediumbit *100)/10;  
 153   1      //     gcfallowbit = (giTimesCount - gchightbit *1000 - gcmediumbit *100) % 10;
 154   1      
 155   1      
 156   1      //    IAP_Read_NByte(0,5,EEPROM);
 157   1      //           
 158   1      //    Lx =  Readbuff[1];
 159   1      //    Hx =  Readbuff[2];
 160   1      //    TestLowPowerFlag = Readbuff[3];
 161   1      //   
 162   1      //   giTimesCount =  Hx * 256 + Lx;
 163   1      //   
 164   1      //   gchightbit = giTimesCount / 1000;
 165   1      //   gcmediumbit = (giTimesCount - gchightbit *1000)/100;
 166   1      //   gclowbit = (giTimesCount - gchightbit *1000 - gcmediumbit *100)/10;  
 167   1      //   gcfallowbit = (giTimesCount - gchightbit *1000 - gcmediumbit *100) % 10;
 168   1        
 169   1          gcPowerUpTime = 0;
 170   1          giPowerUpTime = 0;
 171   1          Clr_ExtIRFlag;
 172   1          Set_PowerUpFlag;
 173   1          SC_Init();
 174   1          Set_Cfg();    /* 选择面板厚度函数 */
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 4   

 175   1          TouchKeyInit();
 176   1          Clr_IO();
 177   1          ADC_ExtIR_Check();
 178   1          Set_AutoModeFlag;
 179   1          TIM0_Cmd(ENABLE);
 180   1          TIM1_Cmd(ENABLE);
 181   1          EA = 1;
 182   1         
 183   1          Set_ActivateModeFlag;
 184   1          Set_AutoModeFlag;     
 185   1          Set_FirstPowerUpFlag;
 186   1        
 187   1          Set_BatLowWarrnEnFlag;
 188   1          Clr_BatLowWarrnFlag;        //设置低电压报警
 189   1          GPIO_Init(GPIO3, GPIO_PIN_1, GPIO_MODE_OUT_PP); /* 面板选择厚度 */
 190   1          
 191   1          SR_EEPROM_Init();
 192   1          
 193   1          Clr_HalfSecondFlag;
 194   1          Clr_DisPlayModeFlag;
 195   1        
 196   1          while(1)
 197   1          {
 198   2      //        P31=~P31;       //非BTM唤醒，用户根据需要自行增添处理程序
 199   2              WDTCON |= 0X10;
 200   2              if(GetLowPowerScanFlag())
 201   2              {
 202   3                  LowPower_Touchkey_Scan();  
 203   3              }
 204   2              else
 205   2              {             
 206   3              //  Key_Scan();
 207   3                  if (gcOneMsCount >= 10) /* 10ms */
 208   3                  {     
 209   4                     gcOneMsCount = 0;                
 210   4                     Key_Process();
 211   4                     Burner_Process();
 212   4                    
 213   4                    ADC_Process();     //电源电压一直再检测
 214   4                    
 215   4                    if(gcT250MsCount >= 125)        //定时改为125ms 7.11
 216   4                    {
 217   5                      gcT250MsCount = 0;
 218   5                      Time_Process();
 219   5                    }
 220   4                    Output_Process();
 221   4                    Sleep_Process();  
 222   4      //              GPIO_Init(GPIO3, GPIO_PIN_1, GPIO_MODE_OUT_PP); //* 面板选择厚度       调试时增加，避免唤醒后该端口
             -被 初始化成输出了。 
 223   4                    if(DisPlayModeFlag == 1)    //显示模式下  （发生低电压报警后）
 224   4                    {               
 225   5                      Clr_BatLowWarrnFlag;           //停止低电压报警
 226   5                      if (TestLowPower == 0x01)        //如果读到这位为1,则进行显示
 227   5                      {
 228   6                          gi500msCount++;
 229   6                          if(gi500msCount > 50)      //定时500ms
 230   6                          {
 231   7      //                      P31=~P31;       //非BTM唤醒，用户根据需要自行增添处理程序
 232   7                            gi500msCount = 0; 
 233   7                            
 234   7                            switch (gcKey)
 235   7                            {
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 5   

 236   8                              case 1:
 237   8                              { 
 238   9                                Display_Day(L1x);
 239   9                              }
 240   8                              break;
 241   8                              case 2:
 242   8                              {
 243   9                              
 244   9                                Display_Day(L2x);
 245   9                              }
 246   8                              break;
 247   8                              case 3:
 248   8                              {
 249   9                                
 250   9                                Display_Day(L3x);
 251   9                              }
 252   8                              break;
 253   8                              case 4:
 254   8                              {
 255   9                                
 256   9                                Display_Day(L4x);                         
 257   9                              }
 258   8                              break;                  
 259   8                              default:
 260   8                                break;
 261   8                            }
 262   7                              
 263   7                          }
 264   6                      }                   
 265   5                          
 266   5                  }
 267   4                
 268   4              }
 269   3          }
 270   2      }
 271   1      
 272   1      }
 273          
 274          void Display_Day (uint8_t Days)
 275          {     
 276   1          gcLedCount++;//灯亮的次数
 277   1          if(gcLedCount <= 2 * Days)
 278   1          {
 279   2            P23=~P23;
 280   2            
 281   2          }
 282   1         else
 283   1         {
 284   2            gcKey = 0;
 285   2            P23=1;      //灭灯
 286   2         }
 287   1      
 288   1      }
 289          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    315    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    149    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2023 14:07:03 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
