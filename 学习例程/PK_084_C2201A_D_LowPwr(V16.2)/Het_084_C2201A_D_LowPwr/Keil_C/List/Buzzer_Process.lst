C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BUZZER_PROCESS
OBJECT MODULE PLACED IN ..\Output\Buzzer_Process.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\Funtion\Buzzer_Process.c LARGE OBJECTADVANCE
                    -D OPTIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTou
                    -chKey_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\Buzzer_Process.lst) TABS(2) OBJECT(..\Output\Buzzer_Process.obj)

line level    source

   1          #include "SC_System.h"
   2          extern void SC_PWM3_Init_2Khz(void);
   3          
   4          extern void SC_PWM3_Init_41Khz(void);
   5          
   6          extern void SC_PWM3_Init(void);
   7          extern void SC_PWM3_Init_33Khz(void);
   8          
   9          
  10          extern uint8_t gcBurner1OpenCount;       
  11          extern uint8_t gcBurner1CloseCount;       
  12          
  13          extern uint8_t gcBurner2OpenCount;        
  14          extern uint8_t gcBurner2CloseCount;       
  15          
  16          extern uint8_t gcBurner3OpenCount;        
  17          extern uint8_t gcBurner3CloseCount;      
  18          
  19          extern uint8_t gcBurner4OpenCount;         
  20          extern uint8_t gcBurner4CloseCount;        
  21          
  22          extern uint8_t gcBurner5OpenCount;        
  23          extern uint8_t gcBurner5CloseCount;        
  24          
  25          extern uint8_t gcBurner6OpenCount;         
  26          extern uint8_t gcBurner6CloseCount;        
  27          
  28          extern uint8_t gcBurnerStatus;            
  29          extern uint8_t gcBurnerOpenCount;   
  30          
  31          extern uint8_t gcKeyStatus;                
  32          extern uint8_t gcKeyCount;                
  33          extern uint8_t gcOneMsCount;               
  34          extern uint32_t gcButton1State;             
  35          extern uint8_t gcKeyValue;                
  36          extern uint16_t giKeySW6LongDownTime;      
  37          extern uint8_t gcBuzzerTime;  
  38          
  39          uint8_t gcMCBuzzerstatus = 0;
  40          uint8_t gcAHCloseBuzzerStatus = 0;
  41          uint16_t gcBatLowWarrnBuzzerTime = 0;
  42          uint8_t  gcBatLowWarrnBuzzerStatus = 0;
  43          uint8_t  gcBatLowWarrnBuzzerCount = 0;
  44          uint8_t  gcMCBuzzerTime = 0;
  45          uint8_t  gcAHCloseBuzzerTime = 0;
  46          
  47          void Buzzer_Process(void)
  48           {
  49   1           
  50   1           if (KeyBuzzerFlag)
  51   1           {
  52   2              if (gcBuzzerTime == 0)        //6.30
  53   2              {
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 2   

  54   3                SC_PWM3_Init();    //4KHz
  55   3                Set_Buzzer;
  56   3              }
  57   2              gcBuzzerTime++;
  58   2              if (gcBuzzerTime > 2)
  59   2              {
  60   3                  gcBuzzerTime = 0;
  61   3                  Clr_Buzzer;
  62   3                  Clr_KeyBuzzerFlag;
  63   3              }
  64   2      
  65   2           }
  66   1           else if (KeySureBuzzerFlag)     //按键确认声音
  67   1           {
  68   2              if (gcBuzzerTime == 0)
  69   2              {
  70   3                SC_PWM3_Init_41Khz();
  71   3                Set_Buzzer_41Khz;
  72   3              }
  73   2              gcBuzzerTime++;
  74   2              if (gcBuzzerTime > 100)
  75   2              {
  76   3                  gcBuzzerTime = 0;
  77   3                  Clr_Buzzer;
  78   3                  Clr_KeySureBuzzerFlag;
  79   3              }
  80   2           }
  81   1           
  82   1           else if (BuzzerTestFlag)    //按键测试音
  83   1           {
  84   2      ////       if (gcBuzzerTime == 0)
  85   2      ////        {
  86   2                SC_PWM3_Init_41Khz();
  87   2                Set_Buzzer_41Khz;
  88   2      ////        }
  89   2      ////        gcBuzzerTime++;
  90   2      ////        if (gcBuzzerTime > 200)
  91   2      ////        {
  92   2      ////            gcBuzzerTime = 0;
  93   2      ////            Clr_Buzzer;
  94   2      ////            Clr_BuzzerTestFlag;
  95   2      ////        }
  96   2        
  97   2           }
  98   1      
  99   1           else if(BatLowWarrnFlag)     //低电压报警
 100   1           {
 101   2               switch(gcBatLowWarrnBuzzerStatus)
 102   2               {
 103   3                 case 0:
 104   3                 {
 105   4                    SC_PWM3_Init_2Khz();
 106   4                    Set_Buzzer_2Khz;
 107   4                    gcBatLowWarrnBuzzerStatus = 1;
 108   4                    gcBatLowWarrnBuzzerTime = 0;
 109   4                 }
 110   3                 break;
 111   3                 case 1:
 112   3                 {
 113   4                   gcBatLowWarrnBuzzerTime++;
 114   4                   if (gcBatLowWarrnBuzzerTime >= 80)     //（1）
 115   4                   {
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 3   

 116   5                     gcBatLowWarrnBuzzerTime = 0;
 117   5                     Clr_Buzzer;
 118   5                     gcBatLowWarrnBuzzerStatus = 2;
 119   5                   }
 120   4                 }
 121   3                 break;
 122   3                 case 2:
 123   3                 {
 124   4                   gcBatLowWarrnBuzzerTime++;
 125   4                   if (gcBatLowWarrnBuzzerTime >= 80)
 126   4                   {
 127   5                     gcBatLowWarrnBuzzerTime = 0;
 128   5      //               SC_PWM3_Init_2Khz();
 129   5      //               Set_Buzzer_2Khz;
 130   5                     SC_PWM3_Init_33Khz();
 131   5                     Set_Buzzer_33Khz;
 132   5                     gcBatLowWarrnBuzzerStatus = 3;
 133   5                   }
 134   4                 }
 135   3                 break;
 136   3                 case 3:
 137   3                 {
 138   4                   gcBatLowWarrnBuzzerTime++;
 139   4                   if (gcBatLowWarrnBuzzerTime >= 80)     //(2)
 140   4                   {
 141   5                     gcBatLowWarrnBuzzerTime = 0;
 142   5                     Clr_Buzzer;
 143   5                     gcBatLowWarrnBuzzerStatus = 4;
 144   5                   }
 145   4                 }
 146   3                 break;
 147   3                 case 4:
 148   3                 {
 149   4                   gcBatLowWarrnBuzzerTime++;
 150   4                   if (gcBatLowWarrnBuzzerTime >= 80)
 151   4                   {
 152   5                     gcBatLowWarrnBuzzerTime = 0;
 153   5      //              SC_PWM3_Init_2Khz();
 154   5      //              Set_Buzzer_2Khz;
 155   5                     SC_PWM3_Init_41Khz();
 156   5                     Set_Buzzer_41Khz;
 157   5                     gcBatLowWarrnBuzzerStatus = 5;
 158   5                   }
 159   4                 }
 160   3                 break; 
 161   3                 case 5:
 162   3                 {
 163   4                   gcBatLowWarrnBuzzerTime++;
 164   4                   if (gcBatLowWarrnBuzzerTime >= 80)    //(3)
 165   4                   {
 166   5                     gcBatLowWarrnBuzzerTime = 0;
 167   5                     Clr_Buzzer;
 168   5                     gcBatLowWarrnBuzzerStatus = 6;
 169   5                   }
 170   4                 }
 171   3                 break;
 172   3                 case 6:
 173   3                 {
 174   4                   gcBatLowWarrnBuzzerTime++;
 175   4                   if (gcBatLowWarrnBuzzerTime >= 80)
 176   4                   {
 177   5                     gcBatLowWarrnBuzzerTime = 0;
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 4   

 178   5                     SC_PWM3_Init_33Khz();
 179   5                     Set_Buzzer_33Khz;
 180   5      //               Clr_Buzzer;
 181   5                     gcBatLowWarrnBuzzerStatus = 7;
 182   5                 }
 183   4                 }
 184   3                 break;
 185   3                 case 7:
 186   3                 {
 187   4                   gcBatLowWarrnBuzzerTime++;
 188   4                   if (gcBatLowWarrnBuzzerTime >= 80)    //(3)
 189   4                   {
 190   5                     gcBatLowWarrnBuzzerTime = 0;
 191   5                     Clr_Buzzer;
 192   5                     gcBatLowWarrnBuzzerStatus = 8;
 193   5                   }
 194   4                 }
 195   3                 break;
 196   3                 case 8:
 197   3                 {
 198   4                   gcBatLowWarrnBuzzerTime++;
 199   4                   if (gcBatLowWarrnBuzzerTime > 850)
 200   4                   {
 201   5                     gcBatLowWarrnBuzzerTime = 0;
 202   5                     gcBatLowWarrnBuzzerStatus = 0;
 203   5                     gcBatLowWarrnBuzzerCount++;
 204   5                     if (gcBatLowWarrnBuzzerCount > 3)        //低电压报警5s
 205   5                     {        
 206   6                       gcBatLowWarrnBuzzerCount = 0;
 207   6                       if(gcBurnerStatus != 0)      //有炉头开启，可以继续使用
 208   6                       {
 209   7                         Clr_BatLowWarrnEnFlag;
 210   7                       }
 211   6      //                 else          //没有炉头开启
 212   6      //                 {  
 213   6      //                    Set_AllHodCloseFlag;      //发出所有炉头关闭的声音
 214   6      //                 }
 215   6                         
 216   6                         Clr_BatLowWarrnFlag;           //清低电压报警，此时LED闪烁停止
 217   6                      }
 218   5                    }
 219   4                  
 220   4                 }
 221   3                 break;
 222   3                 default:
 223   3                   
 224   3                 break;
 225   3               }
 226   2      //       }
 227   2             
 228   2           }
 229   1           
 230   1           else if (AllHodCloseFlag )    //所有的炉头都关闭 （在Active模式下才会有这个声音 11.4）（将三声改为一声 
             -2023.1.4）
 231   1           {
 232   2             if (gcAHCloseBuzzerTime == 0)
 233   2              {
 234   3                SC_PWM3_Init_41Khz();
 235   3                Set_Buzzer_41Khz;
 236   3              }
 237   2              gcAHCloseBuzzerTime++;
 238   2              if (gcAHCloseBuzzerTime > 100)
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 5   

 239   2              {
 240   3                  gcAHCloseBuzzerTime = 0;
 241   3                  Clr_Buzzer;
 242   3                  Clr_AllHodCloseFlag;
 243   3              }
 244   2             
 245   2      ////      switch(gcAHCloseBuzzerStatus)
 246   2      ////      {
 247   2      ////        case 0:
 248   2      ////        {
 249   2      ////           SC_PWM3_Init_41Khz();
 250   2      ////           Set_Buzzer_41Khz;
 251   2      ////           gcAHCloseBuzzerTime = 0;
 252   2      ////           gcAHCloseBuzzerStatus = 1;
 253   2      ////        }
 254   2      ////        break;
 255   2      ////        case 1:
 256   2      ////        {
 257   2      ////          gcAHCloseBuzzerTime++;
 258   2      ////           if(gcAHCloseBuzzerTime >= 100) 
 259   2      ////           {
 260   2      ////             gcAHCloseBuzzerTime = 0;
 261   2      ////             Clr_Buzzer;
 262   2      ////             gcAHCloseBuzzerStatus = 2;
 263   2      ////           }
 264   2      ////        }
 265   2      ////        break;
 266   2      ////        case 2:
 267   2      ////        {
 268   2      ////            gcAHCloseBuzzerTime++;
 269   2      ////           if(gcAHCloseBuzzerTime >= 100) 
 270   2      ////           {
 271   2      ////             gcAHCloseBuzzerTime = 0;
 272   2      ////             SC_PWM3_Init_41Khz();
 273   2      ////              Set_Buzzer_41Khz;
 274   2      ////             gcAHCloseBuzzerStatus = 3;
 275   2      ////           }
 276   2      ////        }
 277   2      ////        break;
 278   2      ////        case 3:
 279   2      ////        {
 280   2      ////          gcAHCloseBuzzerTime++;
 281   2      ////           if(gcAHCloseBuzzerTime >= 100) 
 282   2      ////           {
 283   2      ////             gcAHCloseBuzzerTime = 0;
 284   2      ////             Clr_Buzzer;
 285   2      ////             gcAHCloseBuzzerStatus = 4;
 286   2      ////           }
 287   2      ////        }
 288   2      ////        break;    
 289   2      ////        case 4:
 290   2      ////        {
 291   2      ////            gcAHCloseBuzzerTime++;
 292   2      ////           if(gcAHCloseBuzzerTime >= 100) 
 293   2      ////           {
 294   2      ////             gcAHCloseBuzzerTime = 0;
 295   2      ////             SC_PWM3_Init_41Khz();
 296   2      ////              Set_Buzzer_41Khz;
 297   2      ////             gcAHCloseBuzzerStatus = 5;
 298   2      ////           }
 299   2      ////        }
 300   2      ////        break;
C51 COMPILER V9.60.0.0   BUZZER_PROCESS                                                    10/18/2023 18:03:57 PAGE 6   

 301   2      ////        case 5:
 302   2      ////        {
 303   2      ////          gcAHCloseBuzzerTime++;
 304   2      ////           if(gcAHCloseBuzzerTime >= 100) 
 305   2      ////           {
 306   2      ////             gcAHCloseBuzzerTime = 0;
 307   2      ////             Clr_Buzzer;
 308   2      ////             gcAHCloseBuzzerStatus = 0;
 309   2      ////             Clr_AllHodCloseFlag;
 310   2      ////           }
 311   2      ////        }
 312   2      ////        break;
 313   2      ////        default:
 314   2      ////          break;
 315   2      ////        
 316   2      ////      }
 317   2           }
 318   1           else  /*蜂鸣器不响*/
 319   1           {
 320   2               Clr_Buzzer;
 321   2               gcBuzzerTime = 0;
 322   2               gcBatLowWarrnBuzzerTime = 0;
 323   2               gcBatLowWarrnBuzzerCount = 0;
 324   2               gcBatLowWarrnBuzzerStatus = 0;
 325   2           }
 326   1               
 327   1           
 328   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    758    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
