C51 COMPILER V9.60.0.0   MAIN                                                              10/18/2023 18:03:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\main.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE)
                    - BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKey_Lib) DEFINE(
                    -SC95F8x1xB) DEBUG PRINT(..\List\main.lst) TABS(2) OBJECT(..\Output\main.obj)

line level    source

   1          //Set:«Î∞¥’’∏ƒ…Ë÷√Ω¯––OPTION£¨∑Ò‘Úø…ƒ‹≥ˆ¥Ì
   2          //WDT:Enable                EXternal 32K: Enable
   3          //Systerm clock:Fosc/1      P5.2 Normal
   4          //LVR 1.9V                  Vref: Internal 2.048V      //’‚¿Ô”¶∏√ «2.4v
   5          //IAP Range£∫EEPROM Only    DISJTG:Normal
   6          //Start from:APROM          LDROM Size:0K
   7          
   8          //2022-5-25  –ﬁ∏ƒ‘⁄ø™πÿ∂œø™∫Û£¨LEDΩ•¡¡Ω•√±‰∏¸Œ™…¡À∏ …¡À∏ ±º‰‘⁄define FLASHTIME ÷–∂®“Â
   9          //2022-5-30  –ﬁ∏ƒƒ⁄≤ø”ÎÕ‚≤øIR≈–∂œ∑Ω∑®£¨“ÚŒ™µÁ≥ÿ∞Ê±æ√ª”–Õ‚≤ø∫ÏÕ‚£¨À˘“‘÷ÿ–¬∂®“Â≈–∂œ÷µ 300~2100÷Æº‰»œŒ™ «Õ‚≤ø
             -IR£¨∆‰À¸÷µ»œŒ™ «ƒ⁄≤øIR°£
  10          #include "SC_System.h"
  11          #include "Key_Process.h"
  12          #include "Burner_Process.h"
  13          #include "Buzzer_Process.h"
  14          #include "ADC_Process.h"
  15          #include "Time_Process.h"
  16          #include "Output_Process.h"
  17          #include "Sleep_Process.h"
  18          
  19          
  20          struct Flag_Struct MyFlag;
  21          
  22          uint8_t gcBurner1OpenCount = 0;          
  23          uint8_t gcBurner1CloseCount = 0;        
  24          
  25          uint8_t gcBurner2OpenCount = 0;         
  26          uint8_t gcBurner2CloseCount = 0;       
  27          
  28          uint8_t gcBurner3OpenCount = 0;         
  29          uint8_t gcBurner3CloseCount = 0;        
  30          
  31          uint8_t gcBurner4OpenCount = 0;        
  32          uint8_t gcBurner4CloseCount = 0;         
  33          
  34          uint8_t gcBurner5OpenCount = 0;         
  35          uint8_t gcBurner5CloseCount = 0;         
  36          
  37          uint8_t gcBurner6OpenCount = 0;          
  38          uint8_t gcBurner6CloseCount = 0;        
  39          
  40          uint8_t gcBurnerStatus = 0;             
  41          uint8_t gcBurnerOpenCount = 0;  
  42          
  43          //uint8_t gcMCBuzzerstatus;
  44          //uint8_t gcAHCloseBuzzerStatus;
  45          
  46          uint8_t gcKeyStatus = 0;                
  47          uint8_t gcKeyCount = 0;                 
  48          uint8_t gcOneMsCount = 0;                
  49          uint32_t gcButton1State = 0;            
  50          uint8_t gcKeyValue = 0;                 
  51          uint16_t giKeySW6LongDownTime = 0;      
  52          uint8_t  IRSendCommand[4]={0,0,0,0};
C51 COMPILER V9.60.0.0   MAIN                                                              10/18/2023 18:03:56 PAGE 2   

  53          uint32_t gllIRSendData = 0;                //IR Send Data
  54          uint32_t gllIRSendDataBak = 0;                //IR Send Data
  55          
  56          
  57          uint8_t  IRSendDataBitCount = 0;          // 24bit
  58          uint8_t  gcIRSendStatus = 0;
  59          uint16_t  gcIRSendDelayTime = 0;            // 1S
  60          uint8_t gcIRSendCount = 0;              // 3
  61          uint8_t gcIRSendLightOnCount = 0;       //µ∆ø™∑¢ÀÕº∆ ˝
  62          uint8_t gcIRSendLightOnTime = 0;
  63          
  64          uint8_t gcIRSendLightOffCount = 0;        //µ∆πÿ∑¢ÀÕº∆ ˝
  65          uint8_t gcIRSendLightOffTime = 0;
  66          
  67          uint8_t gcIRSendSpeedOffCount = 0;     
  68          uint8_t gcIRSendSpeedOffTime = 0;
  69          
  70          uint8_t gcIRSendSpeedCommandCount = 0;   
  71          uint8_t gcIRSendSpeedCommandTime = 0;
  72          
  73          uint8_t gcBuzzerTime = 0;         
  74          
  75          uint32_t gllIRAdcSumValue = 0;
  76          uint16_t giIRADCValue = 0;
  77          uint8_t  gcIRADCCount = 0;
  78          uint16_t giPowerUpTime = 0;
  79          uint8_t  gcPowerUpTime = 0;
  80          uint16_t giLEDPwmValue = 0;
  81          uint16_t giLEDFlashTime = 0;
  82          uint8_t gcLEDFlashCount = 0;
  83          uint8_t gcSpeedLevel = 0;
  84          uint8_t gcT250MsCount = 0;
  85          uint16_t giT500msCount = 0;
  86          uint8_t gc50msCount = 0;
  87          uint8_t gcIRSendTestACount =0;
  88          uint8_t gcIRSendTestBCount =0;
  89          uint8_t gcIRSendTestCCount =0;
  90          
  91          uint8_t gcVar;
  92          uint16_t gcVar2;
  93          uint8_t gcTemp;
  94          
  95          unsigned char gcSleepDelayTime = 0;
  96          
  97          volatile uint16_t giSpeedDelayOffTime;  // 5minute
  98          volatile uint16_t giLightDelayOffTime;  // 5minute
  99          volatile uint8_t gcADCDelayTime;
 100          
 101          extern uint8_t gcBurnerCheckStatus;
 102          extern uint8_t gcTestSendIRStatus;
 103          void IS_IntoTest (void);
 104          
 105          
 106          void main(void)
 107          {  
 108   1          Clr_AllFlag();
 109   1          gcPowerUpTime = 0;
 110   1          giPowerUpTime = 0;
 111   1          Clr_ExtIRFlag;
 112   1          Set_PowerUpFlag;
 113   1          SC_Init();
 114   1          SC_JP1();
C51 COMPILER V9.60.0.0   MAIN                                                              10/18/2023 18:03:56 PAGE 3   

 115   1          Set_Cfg();      /* —°‘Ò√Ê∞Â∫Ò∂»∫Ø ˝ */
 116   1          //    SOCAPI_DeBugTouchKey_Init();      //¡ø≤˙ ±’‚∏ˆ∫Ø ˝“™∆¡±ŒµÙ
 117   1          IS_IntoTest();
 118   1          TouchKeyInit();
 119   1          Clr_IO();
 120   1          ADC_ExtIR_Check();
 121   1          Set_AutoModeFlag;
 122   1          TIM0_Cmd(ENABLE);
 123   1          TIM1_Cmd(ENABLE);
 124   1          EA = 1;
 125   1         
 126   1          gcBurnerCheckStatus = 0;
 127   1          
 128   1          Set_ActivateModeFlag;
 129   1          Set_AutoModeFlag;     
 130   1          Set_FirstPowerUpFlag; 
 131   1          Set_BatLowWarrnEnFlag;
 132   1          Clr_BatLowWarrnFlag;        //…Ë÷√µÕµÁ—π±®æØ
 133   1          Clr_ToBurnerOpen_Flag;
 134   1          GPIO_Init(GPIO3, GPIO_PIN_1, GPIO_MODE_OUT_PP);   /* √Ê∞Â—°‘Ò∫Ò∂» */
 135   1          
 136   1        
 137   1          while(1)
 138   1          {
 139   2              // GPIO_Init(GPIO3, GPIO_PIN_1, GPIO_MODE_OUT_PP); //* √Ê∞Â—°‘Ò∫Ò∂»        µ˜ ‘ ±‘ˆº”£¨±‹√‚ªΩ–—∫Û∏√∂Àø⁄±
             -ª ≥ı ºªØ≥… ‰≥ˆ¡À
 140   2              WDTCON |= 0X10;
 141   2              if(GetLowPowerScanFlag())
 142   2              {
 143   3                  LowPower_Touchkey_Scan();  
 144   3              }
 145   2              else
 146   2              {  
 147   3               //  P31=~P31;          //∑«BTMªΩ–—£¨”√ªß∏˘æ›–Ë“™◊‘––‘ˆÃÌ¥¶¿Ì≥Ã–Ú
 148   3               //  Key_Scan();
 149   3                if (gcOneMsCount >= 10) /* 10ms */
 150   3                {
 151   4                   gcOneMsCount = 0;
 152   4                   Key_Process();
 153   4                   Burner_Process();
 154   4                  
 155   4                   if(TestONFlag)
 156   4                    {   
 157   5                      TestKey_Process();         //ºÏ≤‚≤‚ ‘∞¥º¸               
 158   5                    }
 159   4                  
 160   4                    gc50msCount++;
 161   4                    if(gc50msCount >= 5)      //50
 162   4                    {
 163   5                      gc50msCount = 0;
 164   5                      if(TestONFlag)
 165   5                      {
 166   6                        SC_Init();                  
 167   6                        SC_JP1();
 168   6                        Clr_ExtIRFlag;
 169   6                        ADC_ExtIR_Check();
 170   6                      }
 171   5                    }
 172   4                    
 173   4                   ADC_Process();                                         
 174   4                   Output_Process();
 175   4                   Sleep_Process();
C51 COMPILER V9.60.0.0   MAIN                                                              10/18/2023 18:03:56 PAGE 4   

 176   4                          
 177   4                  //GPIO_Init(GPIO3, GPIO_PIN_1, GPIO_MODE_OUT_PP);         //* √Ê∞Â—°‘Ò∫Ò∂»       µ˜ ‘ ±‘ˆº”£¨±‹√‚ªΩ–—∫
             -Û∏√∂Àø⁄±ª ≥ı ºªØ≥… ‰≥ˆ¡À°£  
 178   4                }
 179   3                
 180   3                if(gcT250MsCount >= 125)      //∂® ±∏ƒŒ™125ms   7.11      (∆¡±Œ ±º‰7.28£¨∑≈Ω¯÷–∂œ¿Ô√Ê)
 181   3                  {
 182   4                    gcT250MsCount = 0;
 183   4                    Time_Process();
 184   4                  }
 185   3                
 186   3              }
 187   2          }
 188   1      }
 189          
 190          void IS_IntoTest (void)
 191          { 
 192   1        
 193   1        if(P32 == 0)      //“ª…œµÁ≥ı ºªØœ»…Ë÷√≥… ‰»Î£¨∂¡µΩP3.2 «µÕµÁ∆Ω£¨Ω¯»Î◊‘ºÏ
 194   1        {
 195   2          Set_Wait5sFlag;
 196   2          Set_TestONFlag;
 197   2          Set_IntoTestFlag;
 198   2          gcSleepDelayTime = 0;     //≤ª‘ –ÌÀØ√ﬂ
 199   2          Set_SendTestAFlag;
 200   2          Set_SendTestBFlag;
 201   2          Set_SendTestCFlag;
 202   2          Clr_IRSendEnFlag;   
 203   2        }
 204   1        else   
 205   1        {
 206   2          Clr_IntoTestFlag;     
 207   2        }
 208   1      }
 209          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    275    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    166    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
