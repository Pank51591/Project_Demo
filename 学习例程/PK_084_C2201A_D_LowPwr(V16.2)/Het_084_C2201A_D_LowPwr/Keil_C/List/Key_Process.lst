C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEY_PROCESS
OBJECT MODULE PLACED IN ..\Output\Key_Process.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\Funtion\Key_Process.c LARGE OBJECTADVANCED O
                    -PTIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchK
                    -ey_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\Key_Process.lst) TABS(2) OBJECT(..\Output\Key_Process.obj)

line level    source

   1          #include "SC_System.h"
   2          #include "Key_Process.h"
   3          #include "Buzzer_Process.h"
   4          #include "Time_Process.h"
   5          
   6          extern void SC_PWM3_Init_2Khz(void);
   7          
   8          extern void SC_PWM3_Init_41Khz(void);
   9          
  10          extern void SC_PWM3_Init(void);
  11          extern void SC_PWM3_Init_33Khz(void);
  12          
  13          extern uint8_t gcBurner1OpenCount;         
  14          extern uint8_t gcBurner1CloseCount;         
  15          
  16          extern uint8_t gcBurner2OpenCount;         
  17          extern uint8_t gcBurner2CloseCount;       
  18          
  19          extern uint8_t gcBurner3OpenCount;        
  20          extern uint8_t gcBurner3CloseCount;        
  21          
  22          extern uint8_t gcBurner4OpenCount;         
  23          extern uint8_t gcBurner4CloseCount;        
  24          
  25          extern uint8_t gcBurner5OpenCount;        
  26          extern uint8_t gcBurner5CloseCount;       
  27          
  28          extern uint8_t gcBurner6OpenCount;        
  29          extern uint8_t gcBurner6CloseCount;        
  30          
  31          extern uint8_t gcBurnerStatus;           
  32          extern uint8_t gcBurnerOpenCount;   
  33          
  34          extern uint8_t gcKeyStatus;               
  35          extern uint8_t gcKeyCount;                
  36          extern uint8_t gcOneMsCount;              
  37          extern uint32_t gcButton1State;            
  38          extern uint8_t gcKeyValue;                 
  39          extern uint16_t giKeySW6LongDownTime;      
  40          extern uint8_t gcBuzzerTime; 
  41          
  42          extern uint8_t  gcPowerUpTime;
  43          extern uint16_t giLEDPwmValue;
  44          extern uint16_t giLEDFlashTime;
  45          extern uint8_t gcLEDFlashCount;
  46          extern uint8_t gcSpeedLevel;
  47          
  48          extern uint32_t gllIRSendData;                   //IR Send Data
  49          extern uint32_t gllIRSendDataBak;                //IR Send Data
  50          
  51          extern uint8_t gcPWMCly;
  52          extern uint8_t  gcPWMWaitTime;
  53          extern uint16_t gcPWMCount;
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 2   

  54          extern uint8_t gcLEDFlashCount;
  55          extern uint16_t giLEDFlashTime;
  56          
  57          extern uint8_t gcIRSendLightOnCount;
  58          extern uint8_t gcIRSendLightOnTime;
  59          
  60          extern uint8_t gcIRSendLightOffCount ;        //灯开发送计数
  61          extern uint8_t gcIRSendLightOffTime ;
  62          
  63          extern uint8_t gcIRSendSpeedOffCount;        
  64          extern uint8_t gcIRSendSpeedOffTime;
  65          
  66          extern uint8_t gcIRSendSpeedCommandCount ;   
  67          extern uint8_t gcIRSendSpeedCommandTime ;
  68          
  69          extern uint8_t gcSleepDelayTime;
  70          
  71          extern uint8_t gcBurnerStatusBak;
  72          
  73          extern uint8_t gcVar;
  74          extern uint16_t gcVar2;
  75          extern uint8_t gcTemp;
  76          
  77          extern uint8_t gcTestSendIRStatus;
  78          
  79          uint8_t TestKeyStatus = 0;
  80          uint8_t gcTestKeyCount = 0;
  81          
  82          //=======================================================================================
  83          //                  uint16_t Key_Check(void)
  84          //                  10ms ????
  85          //                  ??????
  86          //=======================================================================================
  87          uint8_t Key_Check(void)
  88          {
  89   1          gcButton1State = exKeyValueFlag;
  90   1        
  91   1          switch (gcKeyStatus)
  92   1          {
  93   2              case 0:
  94   2              {
  95   3                  if (gcButton1State) 
  96   3                  {
  97   4                      gcKeyCount++;
  98   4                      if (gcKeyCount >= 1)
  99   4                      {
 100   5                          gcKeyCount = 0;
 101   5                          gcKeyStatus = 1;
 102   5                      }
 103   4                  }
 104   3              }
 105   2              break;
 106   2              case 1:
 107   2              {
 108   3                  if (gcButton1State)
 109   3                  {
 110   4                      Set_KeyDownFlag;
 111   4                      gcKeyValue = SW6_KEY_VALUE; 
 112   4                    if(TestONFlag == 0)
 113   4                    {
 114   5                      if(gcBurnerStatus != 0)        //表示有炉头开启
 115   5                      {
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 3   

 116   6      //                  if(BatLowWarrnFlag == 0)     //有炉头开启，并且不在低电压模式下
 117   6      //                  {
 118   6                          Set_KeyBuzzerFlag;     //按键音
 119   6      //                  }
 120   6                      }
 121   5                    }
 122   4                    else     //测试模式
 123   4                    {
 124   5                      Set_BuzzerTestFlag;           //按键音
 125   5                      gcVar2 = RawData[0] - BaseLine[0];         //求出变化量   
 126   5                      if(gcVar2 > 0x00ff)
 127   5                        gcVar = 0xff;
 128   5                      else
 129   5                        gcVar = gcVar2;               
 130   5                      Set_TestKeyDownFlag;
 131   5                      Set_LEDONFlag;  
 132   5                      if (KeyDownFlag)    //有按键按下
 133   5                      {
 134   6                          Set_KeyReturnFlag;
 135   6                          gcKeyValue = SW6_KEY_VALUE;      
 136   6                      }       
 137   5                    }
 138   4                  }
 139   3                  gcKeyStatus = 2;            
 140   3                  Clr_Buzzer;
 141   3                  
 142   3              }
 143   2              break;
 144   2              case 2:
 145   2              {
 146   3                 gcSleepDelayTime = 0;
 147   3                  if (gcButton1State == 0)        //按键抬起
 148   3                  {
 149   4                      gcKeyCount++;
 150   4                      if (gcKeyCount >= 2)
 151   4                      {
 152   5                        
 153   5                        gcKeyCount = 0;
 154   5                        gcKeyStatus = 0;
 155   5                        if(TestONFlag == 0)        //用户模式抬起
 156   5                        {                  
 157   6                          giKeySW6LongDownTime = 0;
 158   6                          if (KeyDownFlag) 
 159   6                          {
 160   7                              Set_KeyReturnFlag;
 161   7                              Set_KeyFlashFlag;
 162   7                              gcKeyValue = SW6_KEY_VALUE;      
 163   7                          }
 164   6                        }
 165   5                        else    //测试模式下抬起
 166   5                        {
 167   6      //                    Clr_LEDONFlag;     // 关灯
 168   6                          Clr_Buzzer;
 169   6                          Clr_BuzzerTestFlag;
 170   6                          
 171   6      //                    gcTestSendIRStatus = 0;     //重新开始循环发送
 172   6      //                    
 173   6      //                    Set_SendTestAFlag;
 174   6      //                    Set_SendTestBFlag;
 175   6      //                    Set_SendTestCFlag;
 176   6      //                    Clr_IRSendEnFlag;                           
 177   6                          //  Clr_TestKeyDownFlag;        //这个表标志不要在这里清掉
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 4   

 178   6                        }
 179   5                      }     
 180   4                  }
 181   3                  else     
 182   3                  { 
 183   4                    if(TestONFlag == 0)    //用户模式长按
 184   4                    {
 185   5                      if (giKeySW6LongDownTime < SW6_LONGDOWN_TIME)
 186   5                      {
 187   6                          giKeySW6LongDownTime++;
 188   6                      }
 189   5                      
 190   5                      if (giKeySW6LongDownTime == SW6_LONGDOWN_TIME)
 191   5                      {               
 192   6                          
 193   6                          if (gcBurnerStatus != 0)
 194   6                          {
 195   7      //                        gcKeyStatus = 0;
 196   7                              gcKeyValue = SW6_KEY_LONG_VALUE; 
 197   7                              giKeySW6LongDownTime = SW6_LONGDOWN_TIME+1;
 198   7                              Clr_KeyDownFlag;
 199   7                              Set_KeyReturnFlag;
 200   7                          }
 201   6                        //  gcKeyStatus = 0;
 202   6                      }
 203   5                    }
 204   4                  } // end else
 205   3              }
 206   2              break;
 207   2          }
 208   1          
 209   1          if (KeyReturnFlag)
 210   1          {
 211   2              Clr_KeyReturnFlag;
 212   2              return gcKeyValue;
 213   2          }
 214   1          else
 215   1          {
 216   2              return 0x00;
 217   2          }
 218   1      }
 219          
 220          //=======================================================================================
 221          //                  void Key_Process(void)
 222          //                  10ms ????
 223          //                  ????
 224          //=======================================================================================
 225           void Key_Process(void)
 226           {
 227   1           switch (Key_Check())
 228   1           {
 229   2               case SW6_KEY_VALUE:
 230   2               {           
 231   3                 if(TestONFlag)
 232   3                 {
 233   4                   gcTestSendIRStatus = 0;
 234   4                   Set_SendTestAFlag;
 235   4                   Set_SendTestBFlag;
 236   4                   Set_SendTestCFlag;
 237   4                   Clr_IRSendEnFlag;
 238   4                   
 239   4                 }
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 5   

 240   3                 else
 241   3                   {
 242   4                   /*加一个一键关闭的功能*/
 243   4                   if(((LightOffDelayStartFlag)||(SpeedDelayOffStartFlag)))
 244   4                     {
 245   5                       Set_KeyBuzzerFlag;
 246   5                       Clr_LightOffDelayStartFlag;
 247   5                       Clr_SpeedDelayOffStartFlag;
 248   5                       
 249   5                       Set_SendLightOffCommandFlag; 
 250   5                       
 251   5                       Clr_FirSendLightOnCommandFlag; 
 252   5                       Clr_FirstSendSpeedOffCommandFlag;                   
 253   5                       gcIRSendLightOffTime = LIGHTOFFTIME;
 254   5                       
 255   5                       /*在发送关灯命令后，间隔250ms后发送关风扇命令*/
 256   5                                    
 257   5                     }
 258   4                 
 259   4                   if((gcBurnerStatus != 0)&&(BatLowWarrnFlag == 0))      //表示有炉头开启,且不再低电压报警中
 260   4                   {
 261   5      //                Set_KeyBuzzerFlag;
 262   5                   if (gcSpeedLevel < 4)
 263   5                       gcSpeedLevel++;
 264   5                   else
 265   5                       gcSpeedLevel = 0;
 266   5                   
 267   5                   if (ActivateModeFlag == 0)      // 在DeActivate模式下 
 268   5                   {
 269   6                       if (DeactivateModeFirstLightFlag)     // First Send Light On
 270   6                       {
 271   7                           if (gcSpeedLevel!=0)
 272   7                           {
 273   8                              Clr_DeactivateModeFirstLightFlag;
 274   8                              Set_FirstLightOnFlag;              //有按键按下之后才会置这个位，表示灯的信号已经发送过了  
 275   8                              Set_SendLightOnCommandFlag;
 276   8                              gcIRSendLightOnTime = LIGHTONTIME;          //为了使其首次进入时立即发送. 
 277   8                              Clr_IRSendEnFlag;
 278   8                              Clr_FirSendLightOnCommandFlag;
 279   8                              
 280   8                           }
 281   7                       }
 282   6                   }
 283   5      
 284   5                    if (gcSpeedLevel == 0)
 285   5                    {
 286   6                        Clr_IRSendEnFlag;
 287   6                        Set_SendSpeedOffCommandFlag;
 288   6                        Clr_FirstSendSpeedOffCommandFlag;
 289   6                        gcIRSendSpeedOffTime = SPEEDOFFTIME;
 290   6                    }
 291   5                    else
 292   5                    {
 293   6                        Clr_IRSendEnFlag;
 294   6                        Set_SendSpeedCommandFlag;
 295   6                        gcIRSendSpeedCommandTime =  SPEEDCOMMANDTIME;
 296   6                        Clr_FirstSendSpeedCommandFlag;  
 297   6                    }
 298   5                  
 299   5                   if (gcSpeedLevel == 1)
 300   5                   {
 301   6                      Clr_SendSpeedOffCommandFlag;
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 6   

 302   6                      Clr_SendLightOffCommandFlag;  
 303   6                   }
 304   5                       
 305   5                      Clr_AutoModeFlag;     //
 306   5                   
 307   5                 }
 308   4                 if((gcBurnerStatus != 0)&&(BatLowWarrnFlag))      //在低电压报警模式下
 309   4                 {
 310   5                   Clr_BatLowWarrnFlag; 
 311   5                   Clr_BatLowWarrnEnFlag;           //低电压报警使能             
 312   5                 }
 313   4               }
 314   3             }
 315   2               break;
 316   2               
 317   2               case SW6_KEY_LONG_VALUE:
 318   2               {
 319   3                               
 320   3      //            if(BatLowWarrnFlag == 0)     //不在低电压模式下
 321   3      //              {
 322   3                      Set_KeySureBuzzerFlag;       //按键确认的声音
 323   3      //              }
 324   3                   if (ActivateModeFlag)
 325   3                     {                  
 326   4                         Clr_ActivateModeFlag;
 327   4                     }
 328   3                   else
 329   3                   { 
 330   4                       gcBurnerStatusBak = 0;         //清零
 331   4                       Set_ActivateModeFlag;
 332   4                       Set_AutoModeFlag;              //风速自动调节为对应的Hob状态   7.6
 333   4                       Set_ModeChangeFlag;            //切换到activate模式
 334   4                   }
 335   3               }
 336   2               break;
 337   2               default:
 338   2               gcKeyValue = 0;    
 339   2               break;
 340   2           }
 341   1           
 342   1           gcKeyValue = 0;
 343   1      
 344   1       }
 345          
 346           void TestKey_Process(void)
 347           {
 348   1         switch (TestKeyStatus)
 349   1         {
 350   2           case 0:
 351   2           {      
 352   3             if(P32 == 1)      //P32断开后退出自检
 353   3             { 
 354   4               gcTestKeyCount++;
 355   4               if(gcTestKeyCount > 3)
 356   4               {
 357   5                 gcTestKeyCount = 0;
 358   5                 TestKeyStatus = 1;
 359   5               }
 360   4             }
 361   3           }
 362   2           break;
 363   2           case 1:      //测试按键的处理
C51 COMPILER V9.60.0.0   KEY_PROCESS                                                       10/13/2023 17:22:46 PAGE 7   

 364   2           {
 365   3               Clr_LEDONFlag;         //9.23 断开后LED灭
 366   3               Clr_IntoTestFlag;
 367   3               Clr_TestONFlag;
 368   3               Delay1ms();          
 369   3               GPIO_Init(GPIO3, GPIO_PIN_2, GPIO_MODE_OUT_PP);    //将P32设置成推挽输出，以达到省电
 370   3               Delay1ms();
 371   3               P32 = 0;
 372   3             
 373   3             TestKeyStatus = 0;
 374   3           }
 375   2           break;
 376   2           default:
 377   2           break;     
 378   2             
 379   2         }
 380   1           
 381   1       
 382   1       }
 383           
 384           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    893    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
