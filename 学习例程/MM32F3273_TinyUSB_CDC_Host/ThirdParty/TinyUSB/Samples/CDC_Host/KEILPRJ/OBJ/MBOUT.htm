<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\MBOUT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\MBOUT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Thu Oct 26 17:19:10 2023
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TinyUSB_Host_CDC_Sample &rArr; tuh_task_ext &rArr; enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[b3]">tuh_control_xfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[90]">tuh_task_ext</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[35]">ADC3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1e]">CAN1_RX_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[43]">COMP1_2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[42]">ETH_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1f]">EXTI9_5_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1d]">FlashCache_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[44]">OTG_FS_IRQHandler</a> from tuh_hcd_port.o(.text.OTG_FS_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2f]">RTCAlarm_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[36]">SDIO_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(.text.SysTick_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_mm32f327x.o(.text.SystemInit) referenced from startup_mm32f327x_keil.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[21]">TIM1_UP_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3b]">TIM6_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[31]">TIM8_BRK_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[34]">TIM8_CC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[33]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[32]">TIM8_UP_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2d]">UART3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[45]">UART6_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[46]">UART7_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[47]">UART8_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32f327x_keil.o(.text)
 <LI><a href="#[57]">_control_blocking_complete_cb</a> from usbh.o(.text._control_blocking_complete_cb) referenced 2 times from usbh.o(.text.tuh_control_xfer)
 <LI><a href="#[4b]">acm_process_config</a> from cdc_host.o(.text.acm_process_config) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[4b]">acm_process_config</a> from cdc_host.o(.text.acm_process_config) referenced 4 times from cdc_host.o(.text.acm_process_config)
 <LI><a href="#[5a]">acm_set_baudrate</a> from cdc_host.o(.text.acm_set_baudrate) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[59]">acm_set_control_line_state</a> from cdc_host.o(.text.acm_set_control_line_state) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[63]">cdch_close</a> from cdc_host.o(.text.cdch_close) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[5f]">cdch_init</a> from cdc_host.o(.text.cdch_init) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.acm_set_control_line_state)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.acm_set_line_coding)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.cp210x_set_baudrate)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.cp210x_set_modem_ctrl)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.ftdi_sio_set_baudrate)
 <LI><a href="#[4c]">cdch_internal_control_complete</a> from cdc_host.o(.text.cdch_internal_control_complete) referenced 2 times from cdc_host.o(.text.ftdi_sio_set_modem_ctrl)
 <LI><a href="#[60]">cdch_open</a> from cdc_host.o(.text.cdch_open) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[61]">cdch_set_config</a> from cdc_host.o(.text.cdch_set_config) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[62]">cdch_xfer_cb</a> from cdc_host.o(.text.cdch_xfer_cb) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[4d]">config_port_power_complete</a> from hub.o(.text.config_port_power_complete) referenced 2 times from hub.o(.text.config_port_power_complete)
 <LI><a href="#[4d]">config_port_power_complete</a> from hub.o(.text.config_port_power_complete) referenced 2 times from hub.o(.text.config_set_port_power)
 <LI><a href="#[54]">config_set_port_power</a> from hub.o(.text.config_set_port_power) referenced 2 times from hub.o(.text.hub_set_config)
 <LI><a href="#[53]">connection_clear_conn_change_complete</a> from hub.o(.text.connection_clear_conn_change_complete) referenced 2 times from hub.o(.text.hub_port_get_status_complete)
 <LI><a href="#[4e]">connection_port_reset_complete</a> from hub.o(.text.connection_port_reset_complete) referenced 2 times from hub.o(.text.connection_clear_conn_change_complete)
 <LI><a href="#[4f]">cp210x_process_config</a> from cdc_host.o(.text.cp210x_process_config) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[4f]">cp210x_process_config</a> from cdc_host.o(.text.cp210x_process_config) referenced 6 times from cdc_host.o(.text.cp210x_process_config)
 <LI><a href="#[5e]">cp210x_set_baudrate</a> from cdc_host.o(.text.cp210x_set_baudrate) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[5d]">cp210x_set_modem_ctrl</a> from cdc_host.o(.text.cp210x_set_modem_ctrl) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[58]">fputc</a> from uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[51]">ftdi_process_config</a> from cdc_host.o(.text.ftdi_process_config) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[51]">ftdi_process_config</a> from cdc_host.o(.text.ftdi_process_config) referenced 6 times from cdc_host.o(.text.ftdi_process_config)
 <LI><a href="#[5c]">ftdi_sio_set_baudrate</a> from cdc_host.o(.text.ftdi_sio_set_baudrate) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[5b]">ftdi_sio_set_modem_ctrl</a> from cdc_host.o(.text.ftdi_sio_set_modem_ctrl) referenced from cdc_host.o(.rodata.serial_drivers)
 <LI><a href="#[52]">hub_clear_feature_complete_stub</a> from hub.o(.text.hub_clear_feature_complete_stub) referenced 4 times from hub.o(.text.hub_get_status_complete)
 <LI><a href="#[52]">hub_clear_feature_complete_stub</a> from hub.o(.text.hub_clear_feature_complete_stub) referenced 8 times from hub.o(.text.hub_port_get_status_complete)
 <LI><a href="#[68]">hub_close</a> from hub.o(.text.hub_close) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[55]">hub_get_status_complete</a> from hub.o(.text.hub_get_status_complete) referenced 2 times from hub.o(.text.hub_xfer_cb)
 <LI><a href="#[64]">hub_init</a> from hub.o(.text.hub_init) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[65]">hub_open</a> from hub.o(.text.hub_open) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[56]">hub_port_get_status_complete</a> from hub.o(.text.hub_port_get_status_complete) referenced 2 times from hub.o(.text.hub_xfer_cb)
 <LI><a href="#[66]">hub_set_config</a> from hub.o(.text.hub_set_config) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[67]">hub_xfer_cb</a> from hub.o(.text.hub_xfer_cb) referenced from usbh.o(.rodata.usbh_class_drivers)
 <LI><a href="#[48]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[50]">process_enumeration</a> from usbh.o(.text.process_enumeration) referenced 2 times from usbh.o(.text.enum_new_device)
 <LI><a href="#[50]">process_enumeration</a> from usbh.o(.text.process_enumeration) referenced 2 times from usbh.o(.text.enum_request_set_addr)
 <LI><a href="#[50]">process_enumeration</a> from usbh.o(.text.process_enumeration) referenced 16 times from usbh.o(.text.process_enumeration)
 <LI><a href="#[69]">usbh_int_set</a> from usbh.o(.text.usbh_int_set) referenced from usbh.o(.data._usbh_qdef)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[139]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FlashCache_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push_n
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push_const_addr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull_n
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull_const_addr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_internal_control_complete
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_device
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_init
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
</UL>

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[143]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[144]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[145]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[146]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[147]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9c]"></a>AutoCalPllFactor</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, system_mm32f327x.o(.text.AutoCalPllFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AutoCalPllFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToAnyXX
</UL>

<P><STRONG><a name="[7c]"></a>CONSOLE_Init</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, uart.o(.text.CONSOLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CONSOLE_Init &rArr; UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>DELAY_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(.text.DELAY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DELAY_Init &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>GPIO_Init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[89]"></a>GPIO_SetBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[83]"></a>GPIO_StructInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hal_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[9d]"></a>GetCurrentSysClockFreq</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, system_mm32f327x.o(.text.GetCurrentSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetCurrentSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToAnyXX
</UL>

<P><STRONG><a name="[88]"></a>LED_Init</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, led.o(.text.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hal_misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tuh_hcd_port.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = OTG_FS_IRQHandler &rArr; tuh_task_ext &rArr; enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_softok
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterruptStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetErrInterruptStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEnabledInterrupts
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearErrInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[7d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[95]"></a>RCC_GetHCLKFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[97]"></a>RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[98]"></a>RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[96]"></a>RCC_GetSysClockFreq</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hal_rcc.o(.text.RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelayDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system_mm32f327x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockToAnyXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>TinyUSB_Host_CDC_Sample</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tinyusb_host_cdc.o(.text.TinyUSB_Host_CDC_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = TinyUSB_Host_CDC_Sample &rArr; tuh_task_ext &rArr; enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>UART_Cmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[81]"></a>UART_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[80]"></a>UART_StructInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[115]"></a>USB_BufDesp_GetTokenPid</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_BufDesp_GetTokenPid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_BufDesp_GetTokenPid
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
</UL>

<P><STRONG><a name="[12e]"></a>USB_BufDesp_Reset</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_BufDesp_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_BufDesp_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
</UL>

<P><STRONG><a name="[12f]"></a>USB_BufDesp_Xfer</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, hal_usb.o(.text.USB_BufDesp_Xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_BufDesp_Xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
</UL>

<P><STRONG><a name="[93]"></a>USB_ClearErrInterruptStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_ClearErrInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ClearErrInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>USB_ClearInterruptStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>USB_DeviceClockInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tinyusb_host_cdc.o(.text.USB_DeviceClockInit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Init
</UL>

<P><STRONG><a name="[103]"></a>USB_Enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset
</UL>

<P><STRONG><a name="[104]"></a>USB_EnableBusReset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_EnableBusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableBusReset
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset
</UL>

<P><STRONG><a name="[a5]"></a>USB_EnableEndPoint</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, hal_usb.o(.text.USB_EnableEndPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_EnableEndPoint &rArr; USB_GetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDespTableAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
</UL>

<P><STRONG><a name="[100]"></a>USB_EnableErrInterrupts</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hal_usb.o(.text.USB_EnableErrInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableErrInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[ff]"></a>USB_EnableInterrupts</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hal_usb.o(.text.USB_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_softok
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[10b]"></a>USB_EnableLowSpeed</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_EnableLowSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableLowSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
</UL>

<P><STRONG><a name="[fc]"></a>USB_EnableOddEvenReset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_EnableOddEvenReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableOddEvenReset
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[a7]"></a>USB_GetBufDesp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_usb.o(.text.USB_GetBufDesp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_GetBufDesp &rArr; USB_GetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDespTableAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
</UL>

<P><STRONG><a name="[a6]"></a>USB_GetBufDespTableAddr</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_GetBufDespTableAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetBufDespTableAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDesp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
</UL>

<P><STRONG><a name="[10a]"></a>USB_GetBusSignalStatus</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_GetBusSignalStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetBusSignalStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
</UL>

<P><STRONG><a name="[8c]"></a>USB_GetEnabledInterrupts</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_GetEnabledInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetEnabledInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>USB_GetErrInterruptStatus</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_GetErrInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetErrInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>USB_GetFrameNumber</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_GetFrameNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_frame_number
</UL>

<P><STRONG><a name="[8b]"></a>USB_GetInterruptStatus</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_usb.o(.text.USB_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_connect_status
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>USB_Host_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, tinyusb_host_cdc.o(.text.USB_Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_Host_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
</UL>

<P><STRONG><a name="[a9]"></a>USB_InitHost</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hal_usb.o(.text.USB_InitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_InitHost &rArr; USB_SetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetBufDespTableAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[fd]"></a>USB_SetDeviceAddr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_SetDeviceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDeviceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[130]"></a>USB_SetToken</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_usb.o(.text.USB_SetToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetToken
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
</UL>

<P><STRONG><a name="[a4]"></a>cdc_app_task</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, cdc_app.o(.text.cdc_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cdc_app_task &rArr; tuh_cdc_write &rArr; tu_edpt_stream_write &rArr; tu_edpt_stream_write_xfer &rArr; tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write_flush
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mounted
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
</UL>

<P><STRONG><a name="[63]"></a>cdch_close</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cdc_host.o(.text.cdch_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cdch_close &rArr; tuh_cdc_umount_cb &rArr; tuh_cdc_itf_get_info &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_umount_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[5f]"></a>cdch_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, cdc_host.o(.text.cdch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cdch_init &rArr; tu_edpt_stream_init &rArr; tu_fifo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[60]"></a>cdch_open</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, cdc_host.o(.text.cdch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = cdch_open &rArr; acm_open &rArr; open_ep_stream_pair &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_vid_pid_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[61]"></a>cdch_set_config</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, cdc_host.o(.text.cdch_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cdch_set_config &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_index
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[62]"></a>cdch_xfer_cb</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, cdc_host.o(.text.cdch_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cdch_xfer_cb &rArr; tuh_cdc_rx_cb &rArr; tuh_cdc_read &rArr; tu_edpt_stream_read &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_rx_cb
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write_n
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_zlp_if_needed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idx_by_ep_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[eb]"></a>ep_get_status</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tuh_hcd_port.o(.text.ep_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ep_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_set_status
</UL>

<P><STRONG><a name="[f2]"></a>ep_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tuh_hcd_port.o(.text.ep_reset))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_device_close
</UL>

<P><STRONG><a name="[ea]"></a>ep_set_status</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tuh_hcd_port.o(.text.ep_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_open
</UL>

<P><STRONG><a name="[58]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f0]"></a>hcd_device_close</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tuh_hcd_port.o(.text.hcd_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hcd_device_close
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_removing_device
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[f3]"></a>hcd_edpt_open</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, tuh_hcd_port.o(.text.hcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_set_status
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_control_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
</UL>

<P><STRONG><a name="[f5]"></a>hcd_edpt_xfer</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, tuh_hcd_port.o(.text.hcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_tail
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_get_status
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_control_xfer_cb
</UL>

<P><STRONG><a name="[dc]"></a>hcd_event_handler</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, usbh.o(.text.hcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hcd_event_handler &rArr; tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_port_reset_complete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_clear_conn_change_complete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_removing_device
</UL>

<P><STRONG><a name="[f9]"></a>hcd_frame_number</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tuh_hcd_port.o(.text.hcd_frame_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcd_frame_number &rArr; USB_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delay
</UL>

<P><STRONG><a name="[fb]"></a>hcd_init</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, tuh_hcd_port.o(.text.hcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hcd_init &rArr; USB_InitHost &rArr; USB_SetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableOddEvenReset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableErrInterrupts
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
</UL>

<P><STRONG><a name="[101]"></a>hcd_int_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tuh_hcd_port.o(.text.hcd_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcd_int_disable &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_set
</UL>

<P><STRONG><a name="[102]"></a>hcd_int_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tuh_hcd_port.o(.text.hcd_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcd_int_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_set
</UL>

<P><STRONG><a name="[e5]"></a>hcd_port_connect_status</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tuh_hcd_port.o(.text.hcd_port_connect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hcd_port_connect_status &rArr; USB_GetInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>

<P><STRONG><a name="[e2]"></a>hcd_port_reset</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tuh_hcd_port.o(.text.hcd_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hcd_port_reset &rArr; USB_EnableBusReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableBusReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>

<P><STRONG><a name="[e4]"></a>hcd_port_reset_end</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, tuh_hcd_port.o(.text.hcd_port_reset_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hcd_port_reset_end
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>

<P><STRONG><a name="[e6]"></a>hcd_port_speed_get</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, tuh_hcd_port.o(.text.hcd_port_speed_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hcd_port_speed_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>

<P><STRONG><a name="[105]"></a>hcd_setup_send</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, tuh_hcd_port.o(.text.hcd_setup_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hcd_setup_send &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_tail
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>

<P><STRONG><a name="[68]"></a>hub_close</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hub.o(.text.hub_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hub_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[e0]"></a>hub_edpt_status_xfer</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, hub.o(.text.hub_edpt_status_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status_complete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_clear_feature_complete_stub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_full_complete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_xfer_cb
</UL>

<P><STRONG><a name="[64]"></a>hub_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hub.o(.text.hub_init))
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[65]"></a>hub_open</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, hub.o(.text.hub_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = hub_open &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[106]"></a>hub_port_clear_feature</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, hub.o(.text.hub_port_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hub_port_clear_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status_complete
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_get_status_complete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_reset_change
</UL>

<P><STRONG><a name="[e7]"></a>hub_port_get_status</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, hub.o(.text.hub_port_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hub_port_get_status &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_xfer_cb
</UL>

<P><STRONG><a name="[d9]"></a>hub_port_set_feature</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, hub.o(.text.hub_port_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hub_port_set_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_port_power
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_port_power_complete
</UL>

<P><STRONG><a name="[66]"></a>hub_set_config</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, hub.o(.text.hub_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hub_set_config &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[67]"></a>hub_xfer_cb</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, hub.o(.text.hub_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hub_xfer_cb &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.rodata.usbh_class_drivers)
</UL>
<P><STRONG><a name="[a3]"></a>led_blinking_task</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, tinyusb_host_cdc.o(.text.led_blinking_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led_blinking_task
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; TinyUSB_Host_CDC_Sample &rArr; tuh_task_ext &rArr; enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e3]"></a>osal_task_delay</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh.o(.text.osal_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osal_task_delay &rArr; hcd_frame_number &rArr; USB_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_frame_number
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>

<P><STRONG><a name="[8d]"></a>process_attach</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, tuh_hcd_port.o(.text.process_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = process_attach &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBusSignalStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableLowSpeed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableBusReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>process_detach</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tuh_hcd_port.o(.text.process_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = process_detach &rArr; hcd_event_handler &rArr; tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_reset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_reset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableLowSpeed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>process_softok</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, tuh_hcd_port.o(.text.process_softok))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = process_softok &rArr; xfer_start &rArr; USB_EnableEndPoint &rArr; USB_GetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_head
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_pop_head
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>process_token_done</STRONG> (Thumb, 554 bytes, Stack size 152 bytes, tuh_hcd_port.o(.text.process_token_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = process_token_done &rArr; hcd_event_handler &rArr; tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_tail
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_push_head
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_task_pop_head
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_set_status
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_get_status
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDesp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_GetTokenPid
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>tu_desc_get_interface_total_len</STRONG> (Thumb, 200 bytes, Stack size 52 bytes, tusb.o(.text.tu_desc_get_interface_total_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tu_desc_get_interface_total_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_configuration_descriptor
</UL>

<P><STRONG><a name="[b7]"></a>tu_edpt_bind_driver</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tusb.o(.text.tu_edpt_bind_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tu_edpt_bind_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_configuration_descriptor
</UL>

<P><STRONG><a name="[12c]"></a>tu_edpt_claim</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, tusb.o(.text.tu_edpt_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tu_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_claim
</UL>

<P><STRONG><a name="[12d]"></a>tu_edpt_release</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tusb.o(.text.tu_edpt_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_edpt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_release
</UL>

<P><STRONG><a name="[cc]"></a>tu_edpt_stream_init</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, tusb.o(.text.tu_edpt_stream_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tu_edpt_stream_init &rArr; tu_fifo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_init
</UL>

<P><STRONG><a name="[118]"></a>tu_edpt_stream_read</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tusb.o(.text.tu_edpt_stream_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tu_edpt_stream_read &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_read
</UL>

<P><STRONG><a name="[d5]"></a>tu_edpt_stream_read_xfer</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, tusb.o(.text.tu_edpt_stream_read_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_claim
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
</UL>

<P><STRONG><a name="[11d]"></a>tu_edpt_stream_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tusb.o(.text.tu_edpt_stream_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tu_edpt_stream_write &rArr; tu_edpt_stream_write_xfer &rArr; tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write_n
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_count
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write
</UL>

<P><STRONG><a name="[d1]"></a>tu_edpt_stream_write_xfer</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, tusb.o(.text.tu_edpt_stream_write_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tu_edpt_stream_write_xfer &rArr; tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_claim
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write_flush
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[d2]"></a>tu_edpt_stream_write_zlp_if_needed</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, tusb.o(.text.tu_edpt_stream_write_zlp_if_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tu_edpt_stream_write_zlp_if_needed &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_claim
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[127]"></a>tu_edpt_validate</STRONG> (Thumb, 366 bytes, Stack size 44 bytes, tusb.o(.text.tu_edpt_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tu_edpt_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
</UL>

<P><STRONG><a name="[109]"></a>tu_fifo_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tusb_fifo.o(.text.tu_fifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_fifo_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_ep_stream_pair
</UL>

<P><STRONG><a name="[117]"></a>tu_fifo_config</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, tusb_fifo.o(.text.tu_fifo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tu_fifo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_init
</UL>

<P><STRONG><a name="[11e]"></a>tu_fifo_count</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, tusb_fifo.o(.text.tu_fifo_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tu_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_zlp_if_needed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write
</UL>

<P><STRONG><a name="[129]"></a>tu_fifo_empty</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, tusb_fifo.o(.text.tu_fifo_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tu_fifo_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_event_ready
</UL>

<P><STRONG><a name="[120]"></a>tu_fifo_full</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, tusb_fifo.o(.text.tu_fifo_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tu_fifo_full
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
</UL>

<P><STRONG><a name="[11f]"></a>tu_fifo_read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tusb_fifo.o(.text.tu_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tu_fifo_read &rArr; _tu_fifo_peek &rArr; _ff_pull
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_index
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
</UL>

<P><STRONG><a name="[119]"></a>tu_fifo_read_n</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tusb_fifo.o(.text.tu_fifo_read_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_read_n
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read
</UL>

<P><STRONG><a name="[11a]"></a>tu_fifo_remaining</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tusb_fifo.o(.text.tu_fifo_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tu_fifo_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
</UL>

<P><STRONG><a name="[f8]"></a>tu_fifo_write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tusb_fifo.o(.text.tu_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_full
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_index
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
</UL>

<P><STRONG><a name="[d3]"></a>tu_fifo_write_n</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tusb_fifo.o(.text.tu_fifo_write_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tu_fifo_write_n &rArr; _tu_fifo_write_n &rArr; _ff_push_n &rArr; _ff_push_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[121]"></a>tuh_cdc_get_local_line_coding</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cdc_host.o(.text.tuh_cdc_get_local_line_coding))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tuh_cdc_get_local_line_coding &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mount_cb
</UL>

<P><STRONG><a name="[c2]"></a>tuh_cdc_itf_get_index</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cdc_host.o(.text.tuh_cdc_itf_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tuh_cdc_itf_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_internal_control_complete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_process_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_set_config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>

<P><STRONG><a name="[122]"></a>tuh_cdc_itf_get_info</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, cdc_host.o(.text.tuh_cdc_itf_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tuh_cdc_itf_get_info &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_umount_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mount_cb
</UL>

<P><STRONG><a name="[116]"></a>tuh_cdc_mount_cb</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, cdc_app.o(.text.tuh_cdc_mount_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tuh_cdc_mount_cb &rArr; tuh_cdc_itf_get_info &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_info
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_get_local_line_coding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
</UL>

<P><STRONG><a name="[c7]"></a>tuh_cdc_mounted</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cdc_host.o(.text.tuh_cdc_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tuh_cdc_mounted &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
</UL>

<P><STRONG><a name="[123]"></a>tuh_cdc_read</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cdc_host.o(.text.tuh_cdc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tuh_cdc_read &rArr; tu_edpt_stream_read &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_rx_cb
</UL>

<P><STRONG><a name="[d4]"></a>tuh_cdc_rx_cb</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, cdc_app.o(.text.tuh_cdc_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tuh_cdc_rx_cb &rArr; tuh_cdc_read &rArr; tu_edpt_stream_read &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[ca]"></a>tuh_cdc_umount_cb</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, cdc_app.o(.text.tuh_cdc_umount_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tuh_cdc_umount_cb &rArr; tuh_cdc_itf_get_info &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_close
</UL>

<P><STRONG><a name="[c8]"></a>tuh_cdc_write</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cdc_host.o(.text.tuh_cdc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tuh_cdc_write &rArr; tu_edpt_stream_write &rArr; tu_edpt_stream_write_xfer &rArr; tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
</UL>

<P><STRONG><a name="[c9]"></a>tuh_cdc_write_flush</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cdc_host.o(.text.tuh_cdc_write_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tuh_cdc_write_flush &rArr; tu_edpt_stream_write_xfer &rArr; tu_fifo_read_n &rArr; _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
</UL>

<P><STRONG><a name="[110]"></a>tuh_configuration_set</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, usbh.o(.text.tuh_configuration_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tuh_configuration_set &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[b3]"></a>tuh_control_xfer</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, usbh.o(.text.tuh_control_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_setup_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_event_ready
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_line_coding
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_control_line_state
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_configuration_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_request_set_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_set_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_set_feature
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_feature
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_request
</UL>

<P><STRONG><a name="[125]"></a>tuh_descriptor_get</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, usbh.o(.text.tuh_descriptor_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get_configuration
</UL>

<P><STRONG><a name="[10f]"></a>tuh_descriptor_get_configuration</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, usbh.o(.text.tuh_descriptor_get_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[10e]"></a>tuh_descriptor_get_device</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, usbh.o(.text.tuh_descriptor_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tuh_descriptor_get_device &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[c0]"></a>tuh_edpt_open</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbh.o(.text.tuh_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_validate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_speed_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_ep_stream_pair
</UL>

<P><STRONG><a name="[a2]"></a>tuh_init</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, usbh.o(.text.tuh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tuh_init &rArr; hcd_init &rArr; USB_InitHost &rArr; USB_SetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_int_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_clear
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_inited
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_device
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
</UL>

<P><STRONG><a name="[128]"></a>tuh_inited</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbh.o(.text.tuh_inited))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_event_ready
</UL>

<P><STRONG><a name="[126]"></a>tuh_speed_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usbh.o(.text.tuh_speed_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tuh_speed_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
</UL>

<P><STRONG><a name="[124]"></a>tuh_task_event_ready</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh.o(.text.tuh_task_event_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tuh_task_event_ready &rArr; tu_fifo_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_inited
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>

<P><STRONG><a name="[90]"></a>tuh_task_ext</STRONG> (Thumb, 872 bytes, Stack size 160 bytes, usbh.o(.text.tuh_task_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = tuh_task_ext &rArr; enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_inited
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_control_xfer_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_removing_device
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>

<P><STRONG><a name="[cd]"></a>tuh_vid_pid_get</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, usbh.o(.text.tuh_vid_pid_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tuh_vid_pid_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_open
</UL>

<P><STRONG><a name="[d8]"></a>usbh_driver_set_config_complete</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, usbh.o(.text.usbh_driver_set_config_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = usbh_driver_set_config_complete &rArr; enum_full_complete &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_full_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_port_power_complete
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
</UL>

<P><STRONG><a name="[11b]"></a>usbh_edpt_claim</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, usbh.o(.text.usbh_edpt_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbh_edpt_claim &rArr; tu_edpt_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_zlp_if_needed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
</UL>

<P><STRONG><a name="[11c]"></a>usbh_edpt_release</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, usbh.o(.text.usbh_edpt_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbh_edpt_release &rArr; tu_edpt_release
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
</UL>

<P><STRONG><a name="[d7]"></a>usbh_edpt_xfer_with_callback</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, usbh.o(.text.usbh_edpt_xfer_with_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_port_power_complete
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_zlp_if_needed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_write_xfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>

<P><STRONG><a name="[c6]"></a>usbh_get_enum_buf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh.o(.text.usbh_get_enum_buf))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_line_coding
</UL>

<P><STRONG><a name="[db]"></a>usbh_get_rhport</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbh.o(.text.usbh_get_rhport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_get_rhport
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_port_reset_complete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_clear_conn_change_complete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_control_open
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_control_xfer_cb
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>

<P><STRONG><a name="[69]"></a>usbh_int_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh.o(.text.usbh_int_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbh_int_set &rArr; hcd_int_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_int_enable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.data._usbh_qdef)
</UL>
<P><STRONG><a name="[114]"></a>xfer_start</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, tuh_hcd_port.o(.text.xfer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = xfer_start &rArr; USB_EnableEndPoint &rArr; USB_GetBufDespTableAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetToken
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Reset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_softok
</UL>

<P><STRONG><a name="[112]"></a>xfer_task_pop_head</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tuh_hcd_port.o(.text.xfer_task_pop_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xfer_task_pop_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_softok
</UL>

<P><STRONG><a name="[113]"></a>xfer_task_push_head</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, tuh_hcd_port.o(.text.xfer_task_push_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xfer_task_push_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_softok
</UL>

<P><STRONG><a name="[f6]"></a>xfer_task_push_tail</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tuh_hcd_port.o(.text.xfer_task_push_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xfer_task_push_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_token_done
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_setup_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
</UL>

<P><STRONG><a name="[f1]"></a>xfer_task_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tuh_hcd_port.o(.text.xfer_task_reset))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_device_close
</UL>

<P><STRONG><a name="[131]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[148]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[149]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_app_task
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyUSB_Host_CDC_Sample
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_umount_cb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_rx_cb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mount_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[14b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>DELAY_xUs</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, system_mm32f327x.o(.text.DELAY_xUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DELAY_xUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToAnyXX
</UL>

<P><STRONG><a name="[99]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_mm32f327x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetSysClock &rArr; SetSysClockToAnyXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToAnyXX
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9a]"></a>SetSysClockToAnyXX</STRONG> (Thumb, 916 bytes, Stack size 40 bytes, system_mm32f327x.o(.text.SetSysClockToAnyXX))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetSysClockToAnyXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentSysClockFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_xUs
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[86]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, delay.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_Init
</UL>

<P><STRONG><a name="[9e]"></a>TimingDelayDecrement</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, delay.o(.text.TimingDelayDecrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[87]"></a>__NVIC_SetPriority</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, delay.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[fe]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, tuh_hcd_port.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_init
</UL>

<P><STRONG><a name="[f4]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, tuh_hcd_port.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_setup_send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_int_disable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_open
</UL>

<P><STRONG><a name="[f7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, tuh_hcd_port.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_setup_send
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_int_enable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
</UL>

<P><STRONG><a name="[aa]"></a>USB_SetBufDespTableAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_SetBufDespTableAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetBufDespTableAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHost
</UL>

<P><STRONG><a name="[ab]"></a>_ff_pull</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tusb_fifo.o(.text._ff_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ff_pull
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek
</UL>

<P><STRONG><a name="[ad]"></a>_ff_pull_const_addr</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tusb_fifo.o(.text._ff_pull_const_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull_n
</UL>

<P><STRONG><a name="[ae]"></a>_ff_pull_n</STRONG> (Thumb, 514 bytes, Stack size 72 bytes, tusb_fifo.o(.text._ff_pull_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull_const_addr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek_n
</UL>

<P><STRONG><a name="[af]"></a>_ff_push</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, tusb_fifo.o(.text._ff_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
</UL>

<P><STRONG><a name="[b0]"></a>_ff_push_const_addr</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tusb_fifo.o(.text._ff_push_const_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ff_push_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push_n
</UL>

<P><STRONG><a name="[b1]"></a>_ff_push_n</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, tusb_fifo.o(.text._ff_push_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ff_push_n &rArr; _ff_push_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push_const_addr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
</UL>

<P><STRONG><a name="[b8]"></a>_tu_fifo_peek</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, tusb_fifo.o(.text._tu_fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _tu_fifo_peek &rArr; _ff_pull
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
</UL>

<P><STRONG><a name="[b9]"></a>_tu_fifo_peek_n</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, tusb_fifo.o(.text._tu_fifo_peek_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_pull_n
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_read_n
</UL>

<P><STRONG><a name="[ba]"></a>_tu_fifo_read_n</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, tusb_fifo.o(.text._tu_fifo_read_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _tu_fifo_read_n &rArr; _tu_fifo_peek_n &rArr; _ff_pull_n &rArr; _ff_pull_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_index
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_peek_n
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read_n
</UL>

<P><STRONG><a name="[bc]"></a>_tu_fifo_write_n</STRONG> (Thumb, 612 bytes, Stack size 88 bytes, tusb_fifo.o(.text._tu_fifo_write_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _tu_fifo_write_n &rArr; _ff_push_n &rArr; _ff_push_const_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_index
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ff_push_n
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write_n
</UL>

<P><STRONG><a name="[bb]"></a>advance_index</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, tusb_fifo.o(.text.advance_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advance_index
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_write_n
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tu_fifo_read_n
</UL>

<P><STRONG><a name="[4d]"></a>config_port_power_complete</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, hub.o(.text.config_port_power_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = config_port_power_complete &rArr; usbh_driver_set_config_complete &rArr; enum_full_complete &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_xfer_with_callback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_driver_set_config_complete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_set_feature
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hub.o(.text.config_set_port_power)
<LI> hub.o(.text.config_port_power_complete)
</UL>
<P><STRONG><a name="[54]"></a>config_set_port_power</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, hub.o(.text.config_set_port_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = config_set_port_power &rArr; hub_port_set_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_set_feature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.hub_set_config)
</UL>
<P><STRONG><a name="[53]"></a>connection_clear_conn_change_complete</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, hub.o(.text.connection_clear_conn_change_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = connection_clear_conn_change_complete &rArr; hub_port_reset &rArr; hub_port_set_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.hub_port_get_status_complete)
</UL>
<P><STRONG><a name="[4e]"></a>connection_port_reset_complete</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, hub.o(.text.connection_port_reset_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = connection_port_reset_complete &rArr; hcd_event_handler &rArr; tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.connection_clear_conn_change_complete)
</UL>
<P><STRONG><a name="[52]"></a>hub_clear_feature_complete_stub</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hub.o(.text.hub_clear_feature_complete_stub))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hub_clear_feature_complete_stub &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hub.o(.text.hub_get_status_complete)
<LI> hub.o(.text.hub_port_get_status_complete)
</UL>
<P><STRONG><a name="[55]"></a>hub_get_status_complete</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, hub.o(.text.hub_get_status_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hub_get_status_complete &rArr; hub_port_clear_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_feature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.hub_xfer_cb)
</UL>
<P><STRONG><a name="[56]"></a>hub_port_get_status_complete</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, hub.o(.text.hub_port_get_status_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hub_port_get_status_complete &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_feature
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text.hub_xfer_cb)
</UL>
<P><STRONG><a name="[da]"></a>hub_port_reset</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, hub.o(.text.hub_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hub_port_reset &rArr; hub_port_set_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_set_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_clear_conn_change_complete
</UL>

<P><STRONG><a name="[57]"></a>_control_blocking_complete_cb</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbh.o(.text._control_blocking_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _control_blocking_complete_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh.o(.text.tuh_control_xfer)
</UL>
<P><STRONG><a name="[b2]"></a>_get_descriptor</STRONG> (Thumb, 192 bytes, Stack size 104 bytes, usbh.o(.text._get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get
</UL>

<P><STRONG><a name="[b4]"></a>_parse_configuration_descriptor</STRONG> (Thumb, 652 bytes, Stack size 104 bytes, usbh.o(.text._parse_configuration_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _parse_configuration_descriptor &rArr; tu_desc_get_interface_total_len
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_bind_driver
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_desc_get_interface_total_len
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[12b]"></a>_xfer_complete</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, usbh.o(.text._xfer_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _xfer_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_control_xfer_cb
</UL>

<P><STRONG><a name="[d6]"></a>clear_device</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh.o(.text.clear_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clear_device
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_removing_device
</UL>

<P><STRONG><a name="[df]"></a>enum_full_complete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh.o(.text.enum_full_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = enum_full_complete &rArr; hub_edpt_status_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_edpt_status_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_driver_set_config_complete
</UL>

<P><STRONG><a name="[e1]"></a>enum_new_device</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, usbh.o(.text.enum_new_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = enum_new_device &rArr; process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_speed_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset_end
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_reset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_port_connect_status
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delay
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_full_complete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
</UL>

<P><STRONG><a name="[e8]"></a>enum_request_set_addr</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, usbh.o(.text.enum_request_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = enum_request_set_addr &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_address
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[b6]"></a>get_driver</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usbh.o(.text.get_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_removing_device
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_configuration_descriptor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_driver_set_config_complete
</UL>

<P><STRONG><a name="[e9]"></a>get_new_address</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, usbh.o(.text.get_new_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_new_address
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_request_set_addr
</UL>

<P><STRONG><a name="[107]"></a>hub_port_clear_reset_change</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, usbh.o(.text.hub_port_clear_reset_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hub_port_clear_reset_change &rArr; hub_port_clear_feature &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[50]"></a>process_enumeration</STRONG> (Thumb, 1630 bytes, Stack size 184 bytes, usbh.o(.text.process_enumeration))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = process_enumeration &rArr; tuh_descriptor_get_configuration &rArr; tuh_descriptor_get &rArr; _get_descriptor &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_device_close
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_descriptor_get_configuration
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_configuration_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_edpt_control_open
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_clear_reset_change
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_request_set_addr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_full_complete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_configuration_descriptor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_driver_set_config_complete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_new_device
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usbh.o(.text.enum_new_device)
<LI> usbh.o(.text.process_enumeration)
<LI> usbh.o(.text.enum_request_set_addr)
</UL>
<P><STRONG><a name="[111]"></a>process_removing_device</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, usbh.o(.text.process_removing_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = process_removing_device &rArr; hcd_event_handler &rArr; tu_fifo_write &rArr; _ff_push
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_event_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_device_close
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_driver
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_device
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
</UL>

<P><STRONG><a name="[12a]"></a>usbh_control_xfer_cb</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, usbh.o(.text.usbh_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usbh_control_xfer_cb &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_xfer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xfer_complete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_task_ext
</UL>

<P><STRONG><a name="[10d]"></a>usbh_edpt_control_open</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbh.o(.text.usbh_edpt_control_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_edpt_control_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcd_edpt_open
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_rhport
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_enumeration
</UL>

<P><STRONG><a name="[bd]"></a>acm_open</STRONG> (Thumb, 454 bytes, Stack size 104 bytes, cdc_host.o(.text.acm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = acm_open &rArr; open_ep_stream_pair &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_functional_desc_typeof
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_ep_stream_pair
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_new_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_open
</UL>

<P><STRONG><a name="[4b]"></a>acm_process_config</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, cdc_host.o(.text.acm_process_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = acm_process_config &rArr; set_config_complete &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_line_coding
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_control_line_state
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_index
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cdc_host.o(.text.acm_process_config)
<LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[5a]"></a>acm_set_baudrate</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, cdc_host.o(.text.acm_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = acm_set_baudrate &rArr; acm_set_line_coding &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_line_coding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[59]"></a>acm_set_control_line_state</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, cdc_host.o(.text.acm_set_control_line_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = acm_set_control_line_state &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_process_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[c4]"></a>acm_set_line_coding</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, cdc_host.o(.text.acm_set_line_coding))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = acm_set_line_coding &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_enum_buf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_set_baudrate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_process_config
</UL>

<P><STRONG><a name="[bf]"></a>cdc_functional_desc_typeof</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, cdc_host.o(.text.cdc_functional_desc_typeof))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cdc_functional_desc_typeof
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_open
</UL>

<P><STRONG><a name="[4c]"></a>cdch_internal_control_complete</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, cdc_host.o(.text.cdch_internal_control_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cdch_internal_control_complete &rArr; get_itf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_index
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Address Reference Count : 6]<UL><LI> cdc_host.o(.text.acm_set_line_coding)
<LI> cdc_host.o(.text.acm_set_control_line_state)
<LI> cdc_host.o(.text.ftdi_sio_set_modem_ctrl)
<LI> cdc_host.o(.text.ftdi_sio_set_baudrate)
<LI> cdc_host.o(.text.cp210x_set_modem_ctrl)
<LI> cdc_host.o(.text.cp210x_set_baudrate)
</UL>
<P><STRONG><a name="[dd]"></a>cp210x_ifc_enable</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, cdc_host.o(.text.cp210x_ifc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cp210x_ifc_enable &rArr; cp210x_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
</UL>

<P><STRONG><a name="[cf]"></a>cp210x_open</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, cdc_host.o(.text.cp210x_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = cp210x_open &rArr; open_ep_stream_pair &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_ep_stream_pair
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_new_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_open
</UL>

<P><STRONG><a name="[4f]"></a>cp210x_process_config</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, cdc_host.o(.text.cp210x_process_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cp210x_process_config &rArr; set_config_complete &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_modem_ctrl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_baudrate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_ifc_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_index
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cdc_host.o(.text.cp210x_process_config)
<LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[5e]"></a>cp210x_set_baudrate</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, cdc_host.o(.text.cp210x_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cp210x_set_baudrate &rArr; cp210x_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[5d]"></a>cp210x_set_modem_ctrl</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, cdc_host.o(.text.cp210x_set_modem_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cp210x_set_modem_ctrl &rArr; cp210x_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[de]"></a>cp210x_set_request</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, cdc_host.o(.text.cp210x_set_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cp210x_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_get_enum_buf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_modem_ctrl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_set_baudrate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_ifc_enable
</UL>

<P><STRONG><a name="[ed]"></a>ftdi_232bm_baud_base_to_divisor</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cdc_host.o(.text.ftdi_232bm_baud_base_to_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftdi_232bm_baud_base_to_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_232bm_baud_to_divisor
</UL>

<P><STRONG><a name="[ec]"></a>ftdi_232bm_baud_to_divisor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cdc_host.o(.text.ftdi_232bm_baud_to_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ftdi_232bm_baud_to_divisor &rArr; ftdi_232bm_baud_base_to_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_232bm_baud_base_to_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_baudrate
</UL>

<P><STRONG><a name="[ce]"></a>ftdi_open</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, cdc_host.o(.text.ftdi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ftdi_open &rArr; open_ep_stream_pair &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_ep_stream_pair
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_new_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_open
</UL>

<P><STRONG><a name="[51]"></a>ftdi_process_config</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, cdc_host.o(.text.ftdi_process_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ftdi_process_config &rArr; set_config_complete &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_index
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_complete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_itf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_modem_ctrl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_baudrate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_reset
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cdc_host.o(.text.ftdi_process_config)
<LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[ee]"></a>ftdi_sio_reset</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, cdc_host.o(.text.ftdi_sio_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ftdi_sio_reset &rArr; ftdi_sio_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>

<P><STRONG><a name="[5c]"></a>ftdi_sio_set_baudrate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, cdc_host.o(.text.ftdi_sio_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ftdi_sio_set_baudrate &rArr; ftdi_sio_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_request
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_232bm_baud_to_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[5b]"></a>ftdi_sio_set_modem_ctrl</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, cdc_host.o(.text.ftdi_sio_set_modem_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ftdi_sio_set_modem_ctrl &rArr; ftdi_sio_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_request
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_host.o(.rodata.serial_drivers)
</UL>
<P><STRONG><a name="[ef]"></a>ftdi_sio_set_request</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, cdc_host.o(.text.ftdi_sio_set_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ftdi_sio_set_request &rArr; tuh_control_xfer &rArr;  tuh_task_ext (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_modem_ctrl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_set_baudrate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_sio_reset
</UL>

<P><STRONG><a name="[d0]"></a>get_idx_by_ep_addr</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, cdc_host.o(.text.get_idx_by_ep_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_idx_by_ep_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
</UL>

<P><STRONG><a name="[c3]"></a>get_itf</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, cdc_host.o(.text.get_itf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write_flush
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mounted
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_itf_get_info
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_get_local_line_coding
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_internal_control_complete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_process_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_xfer_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdch_set_config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>

<P><STRONG><a name="[be]"></a>make_new_itf</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, cdc_host.o(.text.make_new_itf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = make_new_itf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_open
</UL>

<P><STRONG><a name="[c1]"></a>open_ep_stream_pair</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, cdc_host.o(.text.open_ep_stream_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = open_ep_stream_pair &rArr; tuh_edpt_open &rArr; hcd_edpt_open &rArr; ep_set_status &rArr; ep_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_open
</UL>

<P><STRONG><a name="[c5]"></a>set_config_complete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cdc_host.o(.text.set_config_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = set_config_complete &rArr; tu_edpt_stream_read_xfer &rArr; usbh_edpt_xfer_with_callback &rArr; hcd_edpt_xfer &rArr; xfer_task_push_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuh_cdc_mount_cb
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_stream_read_xfer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_driver_set_config_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp210x_process_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acm_process_config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftdi_process_config
</UL>

<P><STRONG><a name="[133]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[132]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[136]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[135]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
