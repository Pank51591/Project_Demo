C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE 1_3TFTSPI7
OBJECT MODULE PLACED IN 1.3TFTSPI7.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 1.3TFTSPI7.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /********************½ðÒÝ³¿**************************
   2          ******************GMT130 Ä£¿é 1.3´ç   7PIN SPI TFT FOR AT89S52/STC12*************
   3          *****AT89S52Çý¶¯**************************
   4          *********ST7789 ¿ØÖÆÆ÷,±¾Ä£¿éµÚÆßÕëBLKÎª0Ê±£¬±³¹â¹Ø±Õ£¬¿ÉÒÔ²»½Ó
   5          ÓÉÓÚ±¾Ä£¿éCSÖ±½Ó½ÓµØ£¬Ä¬ÈÏÆ¬Ñ¡£¬ÔÚËùÓÐ²Ù×÷ÖÐ²»Ó¦¸ÃËæÒâ²Ù×÷SCK ÒÔ±ÜÃâÒýÆð´íÎóÃüÁî
   6          ÎªË³ÀûÍê³É³õÊ¼»¯£¬ÔÚRESET Ö®Ç°Ó¦ÏÈ½«SCK²Ù×÷Îª1£¬ÒÔ±ãË³ÀûÊ¶±ðÊ±ÐòÖÐµÄSTART£¬ËæºóÃ¿´ÎSCK=1,½«Íê³ÉÒ»Î»Êý¾Ý·¢Ë
             -Í£¡£¡
   7          
   8          ***** P20----3  SCK   ,  P21----4  SDA   ,  P22----5   RES
   9                    P23-----6   DC   , P24-----7  BLK   ,  
  10          ***** BY:GU 
  11          *********ST7789V2
  12          
  13          ´Ó×óÍùÓÒ£¬´ÓÉÏÍùÏÂ    240*320  16bit 5 6 5 RGB Ä£Ê½  ¸ßÎ»Ä£Ê½
  14          
  15          ********************************************************/
  16          #include "reg51.h"
  17          
  18          #define set_0   0x01
  19          #define set_1   0x02
  20          #define set_2   0x04
  21          #define set_3   0x08    
  22          #define set_4   0x10
  23          #define set_5   0x20
  24          #define set_6   0x40
  25          #define set_7   0x80
  26          
  27          #define clr_0   0xFE
  28          #define clr_1   0xFD
  29          #define clr_2   0xFB
  30          #define clr_3   0xF7    
  31          #define clr_4   0xEF
  32          #define clr_5   0xDF
  33          #define clr_6   0xBF
  34          #define clr_7   0x7F
  35          /**********SPIÒý½Å·ÖÅä£¬Á¬½ÓoledÆÁ£¬¸ü¾ßÊµ¼ÊÇé¿öÐÞ¸Ä*********/
  36          
  37          #define SPI_SCK_0  P2 &=clr_0        //P2_0      
  38          #define SPI_SCK_1  P2|=set_0       
  39          #define SPI_SDA_0  P2&=clr_1        //P2_1        
  40          #define SPI_SDA_1  P2|=set_1
  41          #define SPI_RST_0  P2&=clr_2        //P2_2        
  42          #define SPI_RST_1  P2|=set_2
  43          #define SPI_DC_0  P2&=clr_3           //P2_3
  44          #define SPI_DC_1  P2|=set_3
  45          #define SPI_BLK_0  P2&=clr_4          //P2_4
  46          #define SPI_BLK_1  P2|=set_4
  47          
  48          #define     RED          0XF800   //ºìÉ«
  49          #define     GREEN        0X07E0   //ÂÌÉ«
  50          #define     BLUE         0X001F   //À¶É«
  51          #define     WHITE        0XFFFF   //°×É«
  52          
  53          #define TFT_COLUMN_NUMBER 240
  54          #define TFT_LINE_NUMBER 320
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 2   

  55          #define TFT_COLUMN_OFFSET 0
  56          #define PIC_NUM 28800                   //Í¼Æ¬Êý¾Ý´óÐ¡
  57          
  58          code unsigned char chines_word[][32]=       //
  59          {
  60          {0x00,0x00,0xE4,0x3F,0x28,0x20,0x28,0x25,0x81,0x08,0x42,0x10,0x02,0x02,0x08,0x02,
  61          0xE8,0x3F,0x04,0x02,0x07,0x07,0x84,0x0A,0x44,0x12,0x34,0x62,0x04,0x02,0x00,0x02},/*"Éî",0*/
  62          {0x88,0x20,0x88,0x24,0x88,0x24,0x88,0x24,0x88,0x24,0xBF,0x24,0x88,0x24,0x88,0x24,
  63          0x88,0x24,0x88,0x24,0x88,0x24,0xB8,0x24,0x87,0x24,0x42,0x24,0x40,0x20,0x20,0x20},/*"ÛÚ",1*/
  64          {0x80,0x00,0x80,0x00,0x40,0x01,0x20,0x02,0x10,0x04,0x08,0x08,0xF4,0x17,0x83,0x60,
  65          0x80,0x00,0xFC,0x1F,0x80,0x00,0x88,0x08,0x90,0x08,0x90,0x04,0xFF,0x7F,0x00,0x00},/*"½ð",2*/
  66          {0x80,0x00,0x82,0x00,0x84,0x0F,0x44,0x08,0x20,0x04,0xF0,0x3F,0x27,0x22,0x24,0x22,
  67          0xE4,0x3F,0x04,0x05,0x84,0x0C,0x84,0x54,0x44,0x44,0x24,0x78,0x0A,0x00,0xF1,0x7F},/*"ÒÝ",3*/
  68          {0xF8,0x0F,0x08,0x08,0xF8,0x0F,0x08,0x08,0xF8,0x0F,0x00,0x00,0xFC,0x3F,0x04,0x00,
  69          0xF4,0x1F,0x04,0x00,0xFC,0x7F,0x94,0x10,0x14,0x09,0x12,0x06,0x52,0x18,0x31,0x60},/*"³¿",4*/
  70          {0x80,0x00,0x80,0x00,0x80,0x00,0xFC,0x1F,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,
  71          0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,0x84,0x50,0x80,0x40,0x80,0x40,0x00,0x7F},/*"µç",5*/
  72          {0x00,0x00,0xFE,0x1F,0x00,0x08,0x00,0x04,0x00,0x02,0x80,0x01,0x80,0x00,0xFF,0x7F,
  73          0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00},/*"×Ó",6*/
  74          {0x00,0x00,0xE4,0x1F,0x48,0x10,0x48,0x10,0x41,0x10,0x82,0x08,0x92,0x08,0x90,0x08,
  75          0x08,0x05,0x08,0x05,0x07,0x02,0x04,0x02,0x04,0x05,0x84,0x08,0x44,0x10,0x30,0x60},/*"ºº",7*/
  76          {0x40,0x00,0x80,0x00,0xFE,0x7F,0x02,0x40,0x01,0x20,0xF8,0x07,0x00,0x02,0x00,0x01,
  77          0x80,0x00,0xFF,0x7F,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00},/*"×Ö",8*/
  78          {0x00,0x01,0x04,0x02,0xE8,0x3F,0x28,0x20,0x01,0x00,0xC2,0x1F,0x02,0x02,0xC8,0x1F,
  79          0x48,0x12,0xC4,0x1F,0x47,0x12,0xC4,0x1F,0x04,0x00,0x84,0x08,0x44,0x10,0x20,0x20},/*"ÑÝ",9*/
  80          {0x00,0x00,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x7F,0x80,0x00,
  81          0x80,0x00,0x88,0x08,0x88,0x10,0x84,0x20,0x82,0x40,0x81,0x40,0xA0,0x00,0x40,0x00},/*"Ê¾",10*/
  82          
  83          
  84          };
  85          
  86          const unsigned char  *point;
  87          void delay_us(unsigned int _us_time)
  88          {       
  89   1        unsigned char x=0;
  90   1        for(;_us_time>0;_us_time--)
  91   1        {
  92   2          x++;
  93   2        }
  94   1      }
  95          void Delay_ms(unsigned int _ms_time)
  96            {
  97   1          unsigned int i,j;
  98   1          for(i=0;i<_ms_time;i++)
  99   1          {
 100   2          for(j=0;j<900;j++)
 101   2            {;}
 102   2          }
 103   1        }
 104          /*************SPIÅäÖÃº¯Êý*******************
 105          SCL¿ÕÏÐÊ±µÍµçÆ½£¬µÚÒ»¸öÉÏÉýÑØ²ÉÑù
 106          Ä£ÄâSPI
 107          ******************************************/
 108          
 109          /**************************SPIÄ£¿é·¢ËÍº¯Êý************************************************
 110          
 111           *************************************************************************/
 112          void SPI_SendByte(unsigned  char byte)                          //ÏòÒº¾§ÆÁÐ´Ò»¸ö8Î»Êý¾Ý
 113          {
 114   1        
 115   1        unsigned char counter;
 116   1      
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 3   

 117   1         
 118   1        for(counter=0;counter<8;counter++)
 119   1        { 
 120   2          SPI_SCK_0;    
 121   2          if((byte&0x80)==0)
 122   2          {
 123   3            SPI_SDA_0;
 124   3          }
 125   2          else SPI_SDA_1;
 126   2          byte=byte<<1;       
 127   2          SPI_SCK_1;                  
 128   2        }
 129   1        
 130   1              SPI_SCK_0;
 131   1      }
 132          
 133          void TFT_SEND_CMD(unsigned char o_command)
 134            {
 135   1          SPI_DC_0;
 136   1      
 137   1          SPI_SendByte(o_command);
 138   1      
 139   1         
 140   1          //SPI_DC_1;
 141   1        }
 142            //ÏòÒº¾§ÆÁÐ´Ò»¸ö8Î»Êý¾Ý
 143          void TFT_SEND_DATA(unsigned  char o_data)
 144            { 
 145   1          SPI_DC_1;
 146   1      
 147   1          SPI_SendByte(o_data);
 148   1      
 149   1          
 150   1         }
 151          void TFT_clear(void)
 152            {
 153   1          unsigned int ROW,column;
 154   1        TFT_SEND_CMD(0x2a);     //Column address set
 155   1        TFT_SEND_DATA(0x00);    //start column
 156   1        TFT_SEND_DATA(0x00); 
 157   1        TFT_SEND_DATA(0x00);    //end column
 158   1        TFT_SEND_DATA(0xF0);
 159   1      
 160   1        TFT_SEND_CMD(0x2b);     //Row address set
 161   1        TFT_SEND_DATA(0x00);    //start row
 162   1        TFT_SEND_DATA(0x00); 
 163   1        TFT_SEND_DATA(0x01);    //end row
 164   1        TFT_SEND_DATA(0x40);
 165   1          TFT_SEND_CMD(0x2C);     //Memory write
 166   1          for(ROW=0;ROW<TFT_LINE_NUMBER;ROW++)             //ROW loop
 167   1            { 
 168   2          
 169   2                for(column=0;column<TFT_COLUMN_NUMBER;column++)  //column loop
 170   2                  {
 171   3                    
 172   3                                      TFT_SEND_DATA(0xFF);
 173   3                                      TFT_SEND_DATA(0xFF);
 174   3                  }
 175   2            }
 176   1        }
 177          void TFT_full(unsigned int color)
 178            {
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 4   

 179   1          unsigned int ROW,column;
 180   1          TFT_SEND_CMD(0x2a);     //Column address set
 181   1        TFT_SEND_DATA(0x00);    //start column
 182   1        TFT_SEND_DATA(0x00); 
 183   1        TFT_SEND_DATA(0x00);    //end column
 184   1        TFT_SEND_DATA(0xF0);
 185   1      
 186   1        TFT_SEND_CMD(0x2b);     //Row address set
 187   1        TFT_SEND_DATA(0x00);    //start row
 188   1        TFT_SEND_DATA(0x00); 
 189   1        TFT_SEND_DATA(0x01);    //end row
 190   1        TFT_SEND_DATA(0x40);
 191   1          TFT_SEND_CMD(0x2C);     //Memory write
 192   1          for(ROW=0;ROW<TFT_LINE_NUMBER;ROW++)             //ROW loop
 193   1            { 
 194   2          
 195   2        for(column=0;column<TFT_COLUMN_NUMBER ;column++) //column loop
 196   2                {
 197   3      
 198   3                              TFT_SEND_DATA(color>>8);
 199   3                                TFT_SEND_DATA(color);
 200   3                }
 201   2            }
 202   1        }
 203          void TFT_init(void)        
 204            {
 205   1        SPI_SCK_1;                    //ÌØ±ð×¢Òâ£¡£¡
 206   1                SPI_BLK_1;
 207   1              SPI_RST_0;
 208   1              Delay_ms(1000);
 209   1              SPI_RST_1;
 210   1              Delay_ms(1000);
 211   1          TFT_SEND_CMD(0x11);                         //Sleep Out
 212   1              Delay_ms(120);               //DELAY120ms 
 213   1      //-----------------------ST7789V Frame rate setting-----------------//
 214   1      //************************************************
 215   1                      TFT_SEND_CMD(0x3A);        //65k mode
 216   1                      TFT_SEND_DATA(0x05);
 217   1                      TFT_SEND_CMD(0xC5);             //VCOM
 218   1                      TFT_SEND_DATA(0x1A);
 219   1                      TFT_SEND_CMD(0x36);                 // ÆÁÄ»ÏÔÊ¾·½ÏòÉèÖÃ
 220   1                      TFT_SEND_DATA(0x00);
 221   1                      //-------------ST7789V Frame rate setting-----------//
 222   1                      TFT_SEND_CMD(0xb2);             //Porch Setting
 223   1                      TFT_SEND_DATA(0x05);
 224   1                      TFT_SEND_DATA(0x05);
 225   1                      TFT_SEND_DATA(0x00);
 226   1                      TFT_SEND_DATA(0x33);
 227   1                      TFT_SEND_DATA(0x33);
 228   1      
 229   1                      TFT_SEND_CMD(0xb7);                     //Gate Control
 230   1                      TFT_SEND_DATA(0x05);                    //12.2v   -10.43v
 231   1                      //--------------ST7789V Power setting---------------//
 232   1                      TFT_SEND_CMD(0xBB);//VCOM
 233   1                      TFT_SEND_DATA(0x3F);
 234   1      
 235   1                      TFT_SEND_CMD(0xC0); //Power control
 236   1                      TFT_SEND_DATA(0x2c);
 237   1      
 238   1                      TFT_SEND_CMD(0xC2);             //VDV and VRH Command Enable
 239   1                      TFT_SEND_DATA(0x01);
 240   1      
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 5   

 241   1                      TFT_SEND_CMD(0xC3);                     //VRH Set
 242   1                      TFT_SEND_DATA(0x0F);            //4.3+( vcom+vcom offset+vdv)
 243   1      
 244   1                      TFT_SEND_CMD(0xC4);                     //VDV Set
 245   1                      TFT_SEND_DATA(0x20);                            //0v
 246   1      
 247   1                      TFT_SEND_CMD(0xC6);                             //Frame Rate Control in Normal Mode
 248   1                      TFT_SEND_DATA(0X01);                    //111Hz
 249   1      
 250   1                      TFT_SEND_CMD(0xd0);                             //Power Control 1
 251   1                      TFT_SEND_DATA(0xa4);
 252   1                      TFT_SEND_DATA(0xa1);
 253   1      
 254   1                      TFT_SEND_CMD(0xE8);                             //Power Control 1
 255   1                      TFT_SEND_DATA(0x03);
 256   1      
 257   1                      TFT_SEND_CMD(0xE9);                             //Equalize time control
 258   1                      TFT_SEND_DATA(0x09);
 259   1                      TFT_SEND_DATA(0x09);
 260   1                      TFT_SEND_DATA(0x08);
 261   1                      //---------------ST7789V gamma setting-------------//
 262   1                      TFT_SEND_CMD(0xE0); //Set Gamma
 263   1                      TFT_SEND_DATA(0xD0);
 264   1                      TFT_SEND_DATA(0x05);
 265   1                      TFT_SEND_DATA(0x09);
 266   1                      TFT_SEND_DATA(0x09);
 267   1                      TFT_SEND_DATA(0x08);
 268   1                      TFT_SEND_DATA(0x14);
 269   1                      TFT_SEND_DATA(0x28);
 270   1                      TFT_SEND_DATA(0x33);
 271   1                      TFT_SEND_DATA(0x3F);
 272   1                      TFT_SEND_DATA(0x07);
 273   1                      TFT_SEND_DATA(0x13);
 274   1                      TFT_SEND_DATA(0x14);
 275   1                      TFT_SEND_DATA(0x28);
 276   1                      TFT_SEND_DATA(0x30);
 277   1                       
 278   1                      TFT_SEND_CMD(0XE1); //Set Gamma
 279   1                      TFT_SEND_DATA(0xD0);
 280   1                      TFT_SEND_DATA(0x05);
 281   1                      TFT_SEND_DATA(0x09);
 282   1                      TFT_SEND_DATA(0x09);
 283   1                      TFT_SEND_DATA(0x08);
 284   1                      TFT_SEND_DATA(0x03);
 285   1                      TFT_SEND_DATA(0x24);
 286   1                      TFT_SEND_DATA(0x32);
 287   1                      TFT_SEND_DATA(0x32);
 288   1                      TFT_SEND_DATA(0x3B);
 289   1                      TFT_SEND_DATA(0x14);
 290   1                      TFT_SEND_DATA(0x13);
 291   1                      TFT_SEND_DATA(0x28);
 292   1                      TFT_SEND_DATA(0x2F);
 293   1      
 294   1                      TFT_SEND_CMD(0x21);             //·´ÏÔ
 295   1      TFT_SEND_CMD(0x11); //Exit Sleep // ÍË³öË¯ÃßÄ£Ê½
 296   1      Delay_ms(120); 
 297   1      TFT_SEND_CMD(0x29); //Display on // ¿ªÏÔÊ¾
 298   1        }
 299          void display_char16_16(unsigned int x,unsigned int y,unsigned long color,unsigned char word_serial_number)
 300          {
 301   1         unsigned int column;
 302   1        unsigned char tm=0,temp=0,xxx=0;
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 6   

 303   1      
 304   1         TFT_SEND_CMD(0x2a);    //Column address set
 305   1        TFT_SEND_DATA(x>>8);    //start column
 306   1        TFT_SEND_DATA(x);
 307   1        x=x+15;
 308   1        TFT_SEND_DATA(x>>8);    //end column
 309   1        TFT_SEND_DATA(x);
 310   1      
 311   1        TFT_SEND_CMD(0x2b);     //Row address set
 312   1        TFT_SEND_DATA(y>>8);    //start row
 313   1        TFT_SEND_DATA(y); 
 314   1        y=y+15;
 315   1        TFT_SEND_DATA(y>>8);    //end row
 316   1        TFT_SEND_DATA(y);
 317   1          TFT_SEND_CMD(0x2C);     //Memory write
 318   1          
 319   1          
 320   1        for(column=0;column<32;column++)  //column loop
 321   1                {
 322   2              temp=chines_word[  word_serial_number ][xxx];
 323   2              for(tm=0;tm<8;tm++)
 324   2              {
 325   3              if(temp&0x01)
 326   3                {
 327   4                TFT_SEND_DATA(color>>8);
 328   4                TFT_SEND_DATA(color);
 329   4                }
 330   3              else 
 331   3                {
 332   4                TFT_SEND_DATA(0XFF);
 333   4                TFT_SEND_DATA(0XFF);
 334   4                }
 335   3                temp>>=1;
 336   3              }
 337   2              xxx++;
 338   2                
 339   2            }
 340   1      }
 341          
 342          void Picture_Display(const unsigned char *ptr_pic)
 343          {
 344   1          unsigned long  number;
 345   1              TFT_SEND_CMD(0x2a);             //Column address set
 346   1              TFT_SEND_DATA(0x00);            //start column
 347   1              TFT_SEND_DATA(0x00); 
 348   1              TFT_SEND_DATA(0x00);            //end column
 349   1              TFT_SEND_DATA(0x77);
 350   1      
 351   1              TFT_SEND_CMD(0x2b);             //Row address set
 352   1              TFT_SEND_DATA(0x00);            //start row
 353   1              TFT_SEND_DATA(0x00); 
 354   1              TFT_SEND_DATA(0x00);            //end row
 355   1              TFT_SEND_DATA(0x78);
 356   1              TFT_SEND_CMD(0x2C);                     //Memory write
 357   1                
 358   1              for(number=0;number<PIC_NUM;number++)   
 359   1                {
 360   2      //            data=*ptr_pic++;
 361   2      //            data=~data;
 362   2                  TFT_SEND_DATA(*ptr_pic++);
 363   2              
 364   2                              
C51 COMPILER V9.52.0.0   1_3TFTSPI7                                                        04/19/2020 13:43:35 PAGE 7   

 365   2                }
 366   1        }
 367          void IO_init(void)
 368          {
 369   1        P2|=0xFF;                         //PC  06,07£¬03,04,07Êä³öÄ£Ê½
 370   1        
 371   1      
 372   1      }
 373          
 374          int main()
 375          { 
 376   1       
 377   1        IO_init();
 378   1        TFT_init();
 379   1        TFT_full(RED);
 380   1              Delay_ms(1000);
 381   1              TFT_full(GREEN);
 382   1              Delay_ms(1000);
 383   1              TFT_full(BLUE);
 384   1              Delay_ms(1000);
 385   1              TFT_clear();
 386   1        while(1)
 387   1        {
 388   2          display_char16_16(104,100,RED,0);
 389   2          display_char16_16(120,100,GREEN,1);
 390   2          display_char16_16(80,150,BLUE,2);
 391   2          display_char16_16(96,150,0XFFFFFF,3);
 392   2          display_char16_16(112,150,BLUE,4);
 393   2          display_char16_16(138,150,GREEN,5);
 394   2          display_char16_16(154,150,RED,6);
 395   2          display_char16_16(96,190,BLUE,7);
 396   2          display_char16_16(112,190,GREEN,8);
 397   2          display_char16_16(138,190,RED,9);
 398   2          display_char16_16(154,190,BLUE,10);
 399   2          Delay_ms(1000);
 400   2          TFT_clear();
 401   2                      Delay_ms(1000);
 402   2        }
 403   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1192    ----
   CONSTANT SIZE    =    352    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
