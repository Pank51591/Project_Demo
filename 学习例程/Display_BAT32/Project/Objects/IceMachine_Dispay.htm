<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\IceMachine_Dispay.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\IceMachine_Dispay.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Sep 20 16:32:05 2023
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MonitorState &rArr; SendDisplayData &rArr; UartSendDisplayData
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">IRQ00_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IRQ00_Handler</a><BR>
 <LI><a href="#[7]">IRQ01_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">IRQ01_Handler</a><BR>
 <LI><a href="#[8]">IRQ02_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ02_Handler</a><BR>
 <LI><a href="#[9]">IRQ03_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">IRQ03_Handler</a><BR>
 <LI><a href="#[a]">IRQ04_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">IRQ04_Handler</a><BR>
 <LI><a href="#[b]">IRQ05_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">IRQ05_Handler</a><BR>
 <LI><a href="#[c]">IRQ06_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">IRQ06_Handler</a><BR>
 <LI><a href="#[d]">IRQ07_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">IRQ07_Handler</a><BR>
 <LI><a href="#[e]">IRQ08_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IRQ08_Handler</a><BR>
 <LI><a href="#[f]">IRQ09_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ09_Handler</a><BR>
 <LI><a href="#[12]">IRQ12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">IRQ12_Handler</a><BR>
 <LI><a href="#[13]">IRQ13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">IRQ13_Handler</a><BR>
 <LI><a href="#[14]">IRQ14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">IRQ14_Handler</a><BR>
 <LI><a href="#[15]">IRQ15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">IRQ15_Handler</a><BR>
 <LI><a href="#[16]">IRQ16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">IRQ16_Handler</a><BR>
 <LI><a href="#[17]">IRQ17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">IRQ17_Handler</a><BR>
 <LI><a href="#[18]">IRQ18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ18_Handler</a><BR>
 <LI><a href="#[19]">IRQ19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">IRQ19_Handler</a><BR>
 <LI><a href="#[1a]">IRQ20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">IRQ20_Handler</a><BR>
 <LI><a href="#[1b]">IRQ21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">IRQ21_Handler</a><BR>
 <LI><a href="#[1c]">IRQ22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IRQ22_Handler</a><BR>
 <LI><a href="#[1d]">IRQ23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ23_Handler</a><BR>
 <LI><a href="#[1e]">IRQ24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ24_Handler</a><BR>
 <LI><a href="#[1f]">IRQ25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">IRQ25_Handler</a><BR>
 <LI><a href="#[20]">IRQ26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">IRQ26_Handler</a><BR>
 <LI><a href="#[21]">IRQ27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ27_Handler</a><BR>
 <LI><a href="#[22]">IRQ28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ28_Handler</a><BR>
 <LI><a href="#[23]">IRQ29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ29_Handler</a><BR>
 <LI><a href="#[24]">IRQ30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ30_Handler</a><BR>
 <LI><a href="#[25]">IRQ31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ31_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3b]">DisplayUpdate</a> from appsystem.o(i.DisplayUpdate) referenced from task.o(.data)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[6]">IRQ00_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[7]">IRQ01_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[8]">IRQ02_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[9]">IRQ03_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[a]">IRQ04_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[b]">IRQ05_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[c]">IRQ06_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[d]">IRQ07_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[e]">IRQ08_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[f]">IRQ09_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[10]">IRQ10_Handler</a> from appuart.o(i.uart0_interrupt_send) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[11]">IRQ11_Handler</a> from appuart.o(i.uart0_interrupt_receive) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[12]">IRQ12_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[13]">IRQ13_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[14]">IRQ14_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[15]">IRQ15_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[16]">IRQ16_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[17]">IRQ17_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[18]">IRQ18_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[19]">IRQ19_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1a]">IRQ20_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1b]">IRQ21_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1c]">IRQ22_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1d]">IRQ23_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1e]">IRQ24_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[1f]">IRQ25_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[20]">IRQ26_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[21]">IRQ27_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[22]">IRQ28_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[23]">IRQ29_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[24]">IRQ30_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[25]">IRQ31_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[3c]">MonitorState</a> from appsystem.o(i.MonitorState) referenced from task.o(.data)
 <LI><a href="#[1]">NMI_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[3d]">ParsingDisplayData</a> from appsystem.o(i.ParsingDisplayData) referenced from appsystem.o(.data)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_bat32g135.o(.text) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[39]">SyStemTimeTask</a> from system.o(i.SyStemTimeTask) referenced from task.o(.data)
 <LI><a href="#[5]">SysTick_Handler</a> from sys_clock.o(i.SysTick_Handler) referenced from startup_bat32g135.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_bat32g135.o(i.SystemInit) referenced from startup_bat32g135.o(.text)
 <LI><a href="#[3a]">TaskKeySan</a> from keyscan.o(i.TaskKeySan) referenced from task.o(.data)
 <LI><a href="#[29]">WinPageInit</a> from windata.o(i.WinPageInit) referenced from windata.o(i.WinDataInit)
 <LI><a href="#[2b]">WinPageInit</a> from windesktop.o(i.WinPageInit) referenced from windesktop.o(i.WinDesktopInit)
 <LI><a href="#[2d]">WinPageInit</a> from windispensecnt.o(i.WinPageInit) referenced from windispensecnt.o(i.WinDispenseCntInit)
 <LI><a href="#[2f]">WinPageInit</a> from winledlevel.o(i.WinPageInit) referenced from winledlevel.o(i.WinLEDLevelInit)
 <LI><a href="#[31]">WinPageInit</a> from winoreration.o(i.WinPageInit) referenced from winoreration.o(i.WinOrerationInit)
 <LI><a href="#[33]">WinPageInit</a> from winservice.o(i.WinPageInit) referenced from winservice.o(i.WinServiceInit)
 <LI><a href="#[35]">WinPageInit</a> from wintypesize.o(i.WinPageInit) referenced from wintypesize.o(i.WinTypeSizeInit)
 <LI><a href="#[2a]">WinProc</a> from windata.o(i.WinProc) referenced from windata.o(i.WinDataInit)
 <LI><a href="#[2c]">WinProc</a> from windesktop.o(i.WinProc) referenced from windesktop.o(i.WinDesktopInit)
 <LI><a href="#[2e]">WinProc</a> from windispensecnt.o(i.WinProc) referenced from windispensecnt.o(i.WinDispenseCntInit)
 <LI><a href="#[30]">WinProc</a> from winledlevel.o(i.WinProc) referenced from winledlevel.o(i.WinLEDLevelInit)
 <LI><a href="#[32]">WinProc</a> from winoreration.o(i.WinProc) referenced from winoreration.o(i.WinOrerationInit)
 <LI><a href="#[34]">WinProc</a> from winservice.o(i.WinProc) referenced from winservice.o(i.WinServiceInit)
 <LI><a href="#[36]">WinProc</a> from wintypesize.o(i.WinProc) referenced from wintypesize.o(i.WinTypeSizeInit)
 <LI><a href="#[37]">WinTimerOut</a> from appsystem.o(i.WinTimerOut) referenced from window.o(i.WndProc)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_bat32g135.o(.text)
 <LI><a href="#[38]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[43]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[44]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ00_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ01_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ02_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ03_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ04_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ05_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ06_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ07_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ08_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ09_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g135.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClockInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayData
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDisplayData
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[78]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageSwitch
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[cb]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinTypeSizeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinServiceInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinOrerationInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinLEDLevelInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDispenseCntInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDesktopInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDataInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSetEvent
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorTimer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cd]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4e]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ba]"></a>AppSystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appsystem.o(i.AppSystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>CLK_GetHocoFreq</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, system_bat32g135.o(i.CLK_GetHocoFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[99]"></a>CreatePage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, window.o(i.CreatePage))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinTypeSizeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinServiceInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinOrerationInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinLEDLevelInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDispenseCntInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDesktopInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDataInit
</UL>

<P><STRONG><a name="[59]"></a>DefWindowProc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, window.o(i.DefWindowProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DefWindowProc &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageSwitch
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[5d]"></a>DesktopUpdate</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, windesktop.o(i.DesktopUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DesktopUpdate &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
</UL>

<P><STRONG><a name="[3b]"></a>DisplayUpdate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appsystem.o(i.DisplayUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisplayUpdate &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>GetActiveWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, window.o(i.GetActiveWindow))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorState
</UL>

<P><STRONG><a name="[5f]"></a>GetDisplayData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, appuart.o(i.GetDisplayData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDisplayData
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>GetKeyState</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, keyscan.o(i.GetKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetKeyState &rArr; Getkey &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeySan
</UL>

<P><STRONG><a name="[62]"></a>GetMessage</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, system.o(i.GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>GetModbusCRC</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, appsystem.o(i.GetModbusCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetModbusCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDisplayData
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsingDisplayData
</UL>

<P><STRONG><a name="[a0]"></a>GetParent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, window.o(i.GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
</UL>

<P><STRONG><a name="[61]"></a>Getkey</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, keyscan.o(i.Getkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Getkey &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
</UL>

<P><STRONG><a name="[65]"></a>HkeytoVkey</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, keyscan.o(i.HkeytoVkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HkeytoVkey &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeySan
</UL>

<P><STRONG><a name="[66]"></a>IOInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, ioinit.o(i.IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IOInit &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>KillTimer</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, system.o(i.KillTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KillTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinTimerOut
</UL>

<P><STRONG><a name="[71]"></a>LCDSetCursor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drvlcd1602.o(i.LCDSetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
</UL>

<P><STRONG><a name="[73]"></a>LcdInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drvlcd1602.o(i.LcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdInit &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>LcdWriteCom</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drvlcd1602.o(i.LcdWriteCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCursor
</UL>

<P><STRONG><a name="[77]"></a>LcdWriteData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drvlcd1602.o(i.LcdWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdWriteData &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
</UL>

<P><STRONG><a name="[5e]"></a>LcdWriteStrimg</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, drvlcd1602.o(i.LcdWriteStrimg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCursor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopUpdate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
</UL>

<P><STRONG><a name="[3c]"></a>MonitorState</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, appsystem.o(i.MonitorState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MonitorState &rArr; SendDisplayData &rArr; UartSendDisplayData
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActiveWindow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDisplayData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>MonitorTimer</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, system.o(i.MonitorTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MonitorTimer &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>PORT_ClrBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.PORT_ClrBit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorState
</UL>

<P><STRONG><a name="[64]"></a>PORT_GetBit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.PORT_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey
</UL>

<P><STRONG><a name="[67]"></a>PORT_Init</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
</UL>

<P><STRONG><a name="[68]"></a>PORT_SetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.PORT_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorState
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
</UL>

<P><STRONG><a name="[3d]"></a>ParsingDisplayData</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, appsystem.o(i.ParsingDisplayData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ParsingDisplayData &rArr; GetModbusCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusCRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsystem.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>PowerOnDisplay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appsystem.o(i.PowerOnDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>SYSClockInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_clock.o(i.SYSClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSClockInit &rArr; SystemCoreClockUpdate &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>SYSInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, system.o(i.SYSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSInit &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>SYS_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_Init &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>SendDisplayData</STRONG> (Thumb, 116 bytes, Stack size 128 bytes, appsystem.o(i.SendDisplayData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SendDisplayData &rArr; UartSendDisplayData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendDisplayData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModbusCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorState
</UL>

<P><STRONG><a name="[5c]"></a>SendMessage</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, system.o(i.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKeySan
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorState
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorTimer
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinPageInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
</UL>

<P><STRONG><a name="[7d]"></a>SetDisplayData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appsystem.o(i.SetDisplayData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDisplayData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsingDisplayData
</UL>

<P><STRONG><a name="[b2]"></a>StandbyRestart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appsystem.o(i.StandbyRestart))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
</UL>

<P><STRONG><a name="[39]"></a>SyStemTimeTask</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, system.o(i.SyStemTimeTask))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, sys_clock.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyStemTimeTask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, system_bat32g135.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClockInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, system_bat32g135.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>TaskKeySan</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, keyscan.o(i.TaskKeySan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TaskKeySan &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HkeytoVkey
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>TaskProcess</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, task.o(i.TaskProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TaskProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>TimeSetEvent</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, system.o(i.TimeSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeSetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
</UL>

<P><STRONG><a name="[89]"></a>UART0_BaudRate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8b]"></a>UART0_Init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_DisableIRQ
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>UART0_Start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sci.o(i.UART0_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_EnableIRQ
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8a]"></a>UART_BaudRateCal</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[87]"></a>UartSendDisplayData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, appuart.o(i.UartSendDisplayData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendDisplayData
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDisplayData
</UL>

<P><STRONG><a name="[85]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[98]"></a>WinDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, windata.o(i.WinDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[9a]"></a>WinDesktopInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, windesktop.o(i.WinDesktopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinDesktopInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[9b]"></a>WinDispenseCntInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, windispensecnt.o(i.WinDispenseCntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinDispenseCntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[83]"></a>WinInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, window.o(i.WinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WinInit &rArr; WinTypeSizeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinTypeSizeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinServiceInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinOrerationInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinLEDLevelInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDispenseCntInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDesktopInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSInit
</UL>

<P><STRONG><a name="[9e]"></a>WinLEDLevelInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, winledlevel.o(i.WinLEDLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinLEDLevelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[9c]"></a>WinOrerationInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, winoreration.o(i.WinOrerationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinOrerationInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[5b]"></a>WinPageSwitch</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, window.o(i.WinPageSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WinPageSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[9d]"></a>WinServiceInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, winservice.o(i.WinServiceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinServiceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[37]"></a>WinTimerOut</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, appsystem.o(i.WinTimerOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WinTimerOut &rArr; KillTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(i.WndProc)
</UL>
<P><STRONG><a name="[9f]"></a>WinTypeSizeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wintypesize.o(i.WinTypeSizeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinTypeSizeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinInit
</UL>

<P><STRONG><a name="[b1]"></a>WndProc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, window.o(i.WndProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WndProc &rArr; DefWindowProc &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandbyRestart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSetEvent
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>WriteData</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, drvlcd1602.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
</UL>

<P><STRONG><a name="[b3]"></a>__0snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d4]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[94]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
</UL>

<P><STRONG><a name="[d5]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[d6]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[56]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[58]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bat32g135.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HkeytoVkey
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[76]"></a>delayms</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, delay.o(i.delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteCom
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[b9]"></a>fifo_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WndProc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitorTimer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClockInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDisplay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSystemInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11]"></a>IRQ11_Handler</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, appuart.o(i.uart0_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>uart0_interrupt_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, appuart.o(i.uart0_interrupt_receive), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[10]"></a>IRQ10_Handler</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, appuart.o(i.uart0_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g135.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>uart0_interrupt_send</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, appuart.o(i.uart0_interrupt_send), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_DisableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>INTC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sci.o(i.INTC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8c]"></a>INTC_DisableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sci.o(i.INTC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[90]"></a>INTC_EnableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sci.o(i.INTC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Start
</UL>

<P><STRONG><a name="[91]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sci.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Start
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sci.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[be]"></a>INTC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appuart.o(i.INTC_ClearPendingIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>

<P><STRONG><a name="[c0]"></a>INTC_DisableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appuart.o(i.INTC_DisableIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>

<P><STRONG><a name="[81]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sys_clock.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClockInit
</UL>

<P><STRONG><a name="[a3]"></a>KeyContinueHand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, windesktop.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[69]"></a>KeyDownHand</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, windesktop.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[a2]"></a>LongKeyHand</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, windesktop.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[a1]"></a>LongKeyUpHand</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, windesktop.o(i.LongKeyUpHand))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[2b]"></a>WinPageInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, windesktop.o(i.WinPageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WinPageInit &rArr; DesktopUpdate &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windesktop.o(i.WinDesktopInit)
</UL>
<P><STRONG><a name="[2c]"></a>WinProc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, windesktop.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WinProc &rArr; DesktopUpdate &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopUpdate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyUpHand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windesktop.o(i.WinDesktopInit)
</UL>
<P><STRONG><a name="[a5]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winoreration.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6a]"></a>KeyDownHand</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, winoreration.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[a4]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winoreration.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[92]"></a>Update</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, winoreration.o(i.Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[31]"></a>WinPageInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, winoreration.o(i.WinPageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinPageInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winoreration.o(i.WinOrerationInit)
</UL>
<P><STRONG><a name="[32]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, winoreration.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WinProc &rArr; Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winoreration.o(i.WinOrerationInit)
</UL>
<P><STRONG><a name="[a7]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, windata.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6b]"></a>KeyDownHand</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, windata.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[a6]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, windata.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[93]"></a>Update</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, windata.o(i.Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[29]"></a>WinPageInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, windata.o(i.WinPageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WinPageInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windata.o(i.WinDataInit)
</UL>
<P><STRONG><a name="[2a]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, windata.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WinProc &rArr; Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windata.o(i.WinDataInit)
</UL>
<P><STRONG><a name="[a9]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winservice.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6c]"></a>KeyDownHand</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, winservice.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[a8]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winservice.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[95]"></a>Update</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, winservice.o(i.Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[33]"></a>WinPageInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, winservice.o(i.WinPageInit))
<BR>[Address Reference Count : 1]<UL><LI> winservice.o(i.WinServiceInit)
</UL>
<P><STRONG><a name="[34]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, winservice.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WinProc &rArr; Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winservice.o(i.WinServiceInit)
</UL>
<P><STRONG><a name="[ac]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winledlevel.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6d]"></a>KeyDownHand</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, winledlevel.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[ab]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, winledlevel.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[aa]"></a>Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, winledlevel.o(i.Update))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[2f]"></a>WinPageInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, winledlevel.o(i.WinPageInit))
<BR>[Address Reference Count : 1]<UL><LI> winledlevel.o(i.WinLEDLevelInit)
</UL>
<P><STRONG><a name="[30]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, winledlevel.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WinProc &rArr; KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winledlevel.o(i.WinLEDLevelInit)
</UL>
<P><STRONG><a name="[ae]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wintypesize.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6e]"></a>KeyDownHand</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, wintypesize.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[ad]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wintypesize.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[96]"></a>Update</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, wintypesize.o(i.Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[35]"></a>WinPageInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, wintypesize.o(i.WinPageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WinPageInit &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wintypesize.o(i.WinTypeSizeInit)
</UL>
<P><STRONG><a name="[36]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wintypesize.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WinProc &rArr; Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wintypesize.o(i.WinTypeSizeInit)
</UL>
<P><STRONG><a name="[b0]"></a>KeyContinueHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, windispensecnt.o(i.KeyContinueHand))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[6f]"></a>KeyDownHand</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, windispensecnt.o(i.KeyDownHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyDownHand &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[af]"></a>LongKeyHand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, windispensecnt.o(i.LongKeyHand))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[97]"></a>Update</STRONG> (Thumb, 620 bytes, Stack size 32 bytes, windispensecnt.o(i.Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteStrimg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinProc
</UL>

<P><STRONG><a name="[2d]"></a>WinPageInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, windispensecnt.o(i.WinPageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WinPageInit &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windispensecnt.o(i.WinDispenseCntInit)
</UL>
<P><STRONG><a name="[2e]"></a>WinProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, windispensecnt.o(i.WinProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WinProc &rArr; Update &rArr; LcdWriteStrimg &rArr; LCDSetCursor &rArr; LcdWriteCom &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongKeyHand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDownHand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyContinueHand
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> windispensecnt.o(i.WinDispenseCntInit)
</UL>
<P><STRONG><a name="[b5]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[b8]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
