C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SC95F_USCI0
OBJECT MODULE PLACED IN ..\Output\sc95f_usci0.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_usci0.c LARGE OBJECTADV
                    -ANCED OPTIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\Project) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\s
                    -c95f_usci0.lst) TABS(2) OBJECT(..\Output\sc95f_usci0.obj)

line level    source

   1          //************************************************************
   2          //  Copyright (c) 深圳市赛元微电子有限公司
   3          //  文件名称  : sc95f_usci0.c
   4          //  作者    :
   5          //  模块功能  : USCI0固件库函数C文件
   6          //  最后更正日期: 2022/01/24
   7          //  版本    : V1.10005
   8          //  说明        :该文件仅适用于SC95F系列芯片
   9          //*************************************************************
  10          
  11          #include "sc95f_usci0.h"
  12          
  13          /**************************************************
  14          *函数名称:void USCI0_DeInit(void)
  15          *函数功能:USCI0相关寄存器复位至缺省值
  16          *入口参数:void
  17          *出口参数:void
  18          **************************************************/
  19          void USCI0_DeInit(void)
  20          {
  21   1        OTCON &= 0XCF;
  22   1        US0CON0 = 0X00;
  23   1        US0CON1 = 0X00;
  24   1        US0CON2 = 0X00;
  25   1        US0CON3 = 0X00;
  26   1        IE1 &= (~0X01);
  27   1        IP1 &= (~0X01);
  28   1      }
  29          
  30          /**************************************************
  31          *函数名称:void USCI0_SPI_Init(USCI0_SPI_FirstBit_TypeDef FirstBit, USCI0_SPI_BaudRatePrescaler_TypeDef Bau
             -dRatePrescaler,USCI0_SPI_Mode_TypeDef Mode,
  32                         USCI0_SPI_ClockPolarity_TypeDef ClockPolarity, USCI0_SPI_ClockPhase_TypeDef ClockPhase,USCI0_SPI_T
             -XE_INT_TypeDef SPI_TXE_INT,USCI0_TransmissionMode_TypeDef TransmissionMode)
  33          *函数功能:SPI初始化配置函数
  34          *入口参数:
  35          USCI0_SPI_FirstBit_TypeDef:FirstBit:优先传送位选择（MSB/LSB）
  36          USCI0_SPI_BaudRatePrescaler_TypeDef:BaudRatePrescaler:SPI时钟频率选择
  37          USCI0_SPI_Mode_TypeDef:Mode:SPI工作模式选择
  38          USCI0_SPI_ClockPolarity_TypeDef:ClockPolarity:SPI时钟极性选择
  39          USCI0_SPI_ClockPhase_TypeDef:ClockPhase:SPI时钟相位选择
  40          USCI0_SPI_TXE_INT_TypeDef:SPI_TXE_INT:发送缓存器中断允许选择,该功能在SC95FXX1X芯片上无效
  41          USCI0_TransmissionMode_TypeDef:TransmissionMode:SPI传输模式选择 8/16位
  42          *出口参数:void
  43          **************************************************/
  44          void USCI0_SPI_Init(USCI0_SPI_FirstBit_TypeDef FirstBit,
  45                              USCI0_SPI_BaudRatePrescaler_TypeDef BaudRatePrescaler, USCI0_SPI_Mode_TypeDef Mode,
  46                              USCI0_SPI_ClockPolarity_TypeDef ClockPolarity, USCI0_SPI_ClockPhase_TypeDef ClockPhase
             -,
  47                              USCI0_SPI_TXE_INT_TypeDef SPI_TXE_INT, USCI0_TransmissionMode_TypeDef TransmissionMode
             -)
  48          {
  49   1      
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 2   

  50   1        OTCON = (OTCON & 0XCF) | 0X10;
  51   1      #if defined(SC95F8x1x) || defined(SC95F7x1x) || defined(SC95FWxx)
                SPI_TXE_INT = USCI0_SPI_TXE_DISINT; //SPI_TXE_INT该功能在SC95FXX1X芯片上无效
                US0CON1 = US0CON1 & (~0X05) | FirstBit | TransmissionMode;
              #endif
  55   1      #if defined(SC95F8x2x) || defined(SC95F7x2x) || defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC95F
             -8x6x) || defined (SC95F7x6x)  || defined (SC95F8x1xB) || defined (SC95F7x1xB)
  56   1        US0CON1 = US0CON1 & (~0X05) | FirstBit | SPI_TXE_INT | TransmissionMode;
  57   1      #endif
  58   1        US0CON0 = US0CON0 & 0X80 | BaudRatePrescaler | Mode | ClockPolarity | ClockPhase;
  59   1      }
  60          
  61          /**************************************************
  62          *函数名称:void USCI0_TransmissionMode(USCI0_TransmissionMode_TypeDef TransmissionMode)
  63          *函数功能:SPI 传输模式配置函数
  64          *入口参数:
  65          USCI0_TransmissionMode_TypeDef:TransmissionMode:SPI传输模式选择 8/16e位
  66          *出口参数:void
  67          **************************************************/
  68          void USCI0_TransmissionMode(USCI0_TransmissionMode_TypeDef TransmissionMode)
  69          {
  70   1        if (TransmissionMode == USCI0_SPI_DATA8)
  71   1        {
  72   2          US0CON1 &= 0xFD;
  73   2        }
  74   1        else
  75   1        {
  76   2          US0CON1 |= 0x02;
  77   2        }
  78   1      }
  79          
  80          /*****************************************************
  81          *函数名称:void USCI0_SPI_Cmd(FunctionalState NewState)
  82          *函数功能:SPI功能开关函数
  83          *入口参数:
  84          FunctionalState:NewState:功能启动/关闭选择
  85          *出口参数:void
  86          *****************************************************/
  87          void USCI0_SPI_Cmd(FunctionalState NewState)
  88          {
  89   1        OTCON = (OTCON & 0XCF) | 0X10;
  90   1      
  91   1        if (NewState != DISABLE)
  92   1        {
  93   2          US0CON0 |= 0X80;
  94   2        }
  95   1        else
  96   1        {
  97   2          US0CON0 &= (~0X80);
  98   2        }
  99   1      }
 100          /*****************************************************
 101          *函数名称:void USCI0_SPI_SendData_8(uint8_t Data)
 102          *函数功能:USCI0 SPI发送数据
 103          *入口参数:
 104          uint8_t:Data:发送的数据
 105          *出口参数:void
 106          *****************************************************/
 107          void USCI0_SPI_SendData_8(uint8_t Data)
 108          {
 109   1        US0CON2 = Data;
 110   1      }
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 3   

 111          
 112          /*****************************************************
 113          *函数名称:uint8_t USCI0_SPI_ReceiveData_8(void)
 114          *函数功能:获得US0CON2中的值
 115          *入口参数:void
 116          *出口参数:
 117          uint8_t:接收到的数据
 118          *****************************************************/
 119          uint8_t USCI0_SPI_ReceiveData_8(void)
 120          {
 121   1        return US0CON2;
 122   1      }
 123          
 124          /*****************************************************
 125          *函数名称:void USCI0_SPI_SendData_16(uint16_t Data)
 126          *函数功能:US0CON2 SPI发送数据
 127          *入口参数:
 128          uint16_t:Data:发送的数据
 129          *出口参数:void
 130          *****************************************************/
 131          void USCI0_SPI_SendData_16(uint16_t Data)
 132          {
 133   1        US0CON3 = (uint8_t)(Data >> 8);
 134   1        US0CON2 = (uint8_t)Data;
 135   1      }
 136          
 137          /*****************************************************
 138          *函数名称:uint16_t USCI0_SPI_ReceiveData_16(void)
 139          *函数功能:获得US0CON2中的值
 140          *入口参数:void
 141          *出口参数:
 142          uint16_t:接收的数据
 143          *****************************************************/
 144          uint16_t USCI0_SPI_ReceiveData_16(void)
 145          {
 146   1        uint16_t SPI_data;
 147   1        SPI_data = (uint16_t)((US0CON3 << 8) | US0CON2);
 148   1        return SPI_data;
 149   1      }
 150          
 151          /**************************************************
 152          *函数名称:void USCI0_TWI_Slave_Init(uint8_t TWI_Address)
 153          *函数功能:USCI0 TWI从机初始化配置函数
 154          *入口参数:
 155          uint8_t:TWI_Address:TWI作为从机时的7位从机地址
 156          *出口参数:void
 157          **************************************************/
 158          void USCI0_TWI_Slave_Init(uint8_t TWI_Address)
 159          {
 160   1        OTCON = OTCON & 0XCF | 0X20;
 161   1        US0CON2 = TWI_Address << 1;
 162   1      }
 163          
 164          /**************************************************
 165          *函数名称:void USCI0_TWI_MasterCommunicationRate(USCI0_TWI_MasterCommunicationRate_TypeDef TWI_MasterCommu
             -nicationRate)
 166          *函数功能:USCI0 TWI主机模式下通讯速率设定
 167          *入口参数:
 168          USCI0_TWI_MasterCommunicationRate_TypeDef:TWI_MasterCommunicationRate:TWI主机模式下通讯速率
 169          *出口参数:void
 170          **************************************************/
 171          void USCI0_TWI_MasterCommunicationRate(USCI0_TWI_MasterCommunicationRate_TypeDef
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 4   

 172                                                     TWI_MasterCommunicationRate)
 173          {
 174   1        OTCON = OTCON & 0XCF | 0X20;
 175   1        US0CON1 |= TWI_MasterCommunicationRate;
 176   1      }
 177          
 178          /**************************************************
 179          *函数名称:void USCI0_TWI_Start(void)
 180          *函数功能:USCI0 TWI 起始位
 181          *入口参数:void
 182          *出口参数:void
 183          **************************************************/
 184          void USCI0_TWI_Start(void)
 185          {
 186   1        US0CON1 |= 0x20;
 187   1      }
 188          
 189          /**************************************************
 190          *函数名称:void USCI0_TWI_MasterModeStop(void)
 191          *函数功能:USCI0 TWI主机模式停止位
 192          *入口参数:void
 193          *出口参数:void
 194          **************************************************/
 195          void USCI0_TWI_MasterModeStop(void)
 196          {
 197   1        US0CON1 |= 0x10;
 198   1      }
 199          
 200          /**************************************************
 201          *函数名称:void USCI0_TWI_SlaveClockExtension(void)
 202          *函数功能:USCI0 TWI从机模式时钟延长功能位
 203          *入口参数:
 204          FunctionalState:NewState:功能启动/关闭选择
 205          *出口参数:void
 206          **************************************************/
 207          void USCI0_TWI_SlaveClockExtension(FunctionalState NewState)
 208          {
 209   1        OTCON = OTCON & 0XCF | 0X20;
 210   1      
 211   1        if (NewState != DISABLE)
 212   1        {
 213   2          US0CON1 |= 0x40;
 214   2        }
 215   1        else
 216   1        {
 217   2          US0CON1 &= 0XBF;
 218   2        }
 219   1      }
 220          
 221          /**************************************************
 222          *函数名称:void USCI0_TWI_AcknowledgeConfig(FunctionalState NewState)
 223          *函数功能:TWI接收应答使能函数
 224          *入口参数:
 225          FunctionalState:NewState:接收应答使能/失能选择
 226          *出口参数:void
 227          **************************************************/
 228          void USCI0_TWI_AcknowledgeConfig(FunctionalState NewState)
 229          {
 230   1        OTCON = OTCON & 0XCF | 0X20;
 231   1      
 232   1        if (NewState != DISABLE)
 233   1        {
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 5   

 234   2          US0CON0 |= 0X08;
 235   2        }
 236   1        else
 237   1        {
 238   2          US0CON0 &= 0XF7;
 239   2        }
 240   1      }
 241          
 242          /**************************************************
 243          *函数名称:void USCI0_TWI_GeneralCallCmd(FunctionalState NewState)
 244          *函数功能:TWI通用地址响应使能函数
 245          *入口参数:
 246          FunctionalState:NewState:通用地址响应使能/失能选择
 247          *出口参数:void
 248          **************************************************/
 249          void USCI0_TWI_GeneralCallCmd(FunctionalState NewState)
 250          {
 251   1        OTCON = OTCON & 0XCF | 0X20;
 252   1      
 253   1        if (NewState != DISABLE)
 254   1        {
 255   2          US0CON2 |= 0X01;
 256   2        }
 257   1        else
 258   1        {
 259   2          US0CON2 &= 0XFE;
 260   2        }
 261   1      }
 262          
 263          /*****************************************************
 264          *函数名称:FlagStatus USCI0_GetTWIStatus(USCI0_TWIState_TypeDef USCI0_TWIState)
 265          *函数功能:读取TWI状态
 266          *入口参数:
 267          USCI0_TWIState_TypeDef:USCI0_TWIState:TWI状态类型
 268          *出口参数:
 269          FlagStatus:USCI0_SC标志状态 
 270          *****************************************************/
 271          FlagStatus USCI0_GetTWIStatus(USCI0_TWIState_TypeDef USCI0_TWIState)
 272          {
 273   1        if ((US0CON0 & 0x07) == USCI0_TWIState)
 274   1          return SET;
 275   1        else
 276   1          return RESET;
 277   1      }
 278          
 279          /*****************************************************
 280          *函数名称:void USCI0_TWI_Cmd(FunctionalState NewState)
 281          *函数功能:TWI功能开关函数
 282          *入口参数:
 283          FunctionalState:NewState:功能启动/关闭选择
 284          *出口参数:void
 285          *****************************************************/
 286          void USCI0_TWI_Cmd(FunctionalState NewState)
 287          {
 288   1        OTCON = OTCON & 0XCF | 0X20;
 289   1      
 290   1        if (NewState != DISABLE)
 291   1        {
 292   2          US0CON0 |= 0X80;
 293   2        }
 294   1        else
 295   1        {
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 6   

 296   2          US0CON0 &= (~0X80);
 297   2        }
 298   1      }
 299          
 300          /*****************************************************
 301          *函数名称:void USCI0_TWI_SendData(uint8_t Data)
 302          *函数功能:TWI发送数据
 303          *入口参数:
 304          uint8_t:Data:发送的数据
 305          *出口参数:void
 306          *****************************************************/
 307          void USCI0_TWI_SendData(uint8_t Data)
 308          {
 309   1        US0CON3 = Data;
 310   1      }
 311          
 312          /*****************************************************
 313          *函数名称:uint8_t USCI0_TWI_SendData(void)
 314          *函数功能:获得US0CON3中的值
 315          *入口参数:void
 316          *出口参数:
 317          uint8_t:接收的数据
 318          *****************************************************/
 319          uint8_t USCI0_TWI_ReceiveData(void)
 320          {
 321   1        return US0CON3;
 322   1      }
 323          
 324          /**************************************************
 325          *函数名称:void USCI0_UART_Init(uint32_t UARTFsys, uint32_t BaudRate, USCI0_UART_Mode_TypeDef Mode, USCI0_U
             -ART_RX_TypeDef RxMode)
 326          *函数功能:UART初始化配置函数
 327          *入口参数:
 328          uint32_t:UARTFsys:系统时钟频率
 329          uint32_t:BaudRate:波特率
 330          USCI0_UART_Mode_TypeDef:Mode:UART1工作模式
 331          USCI0_UART_RX_TypeDef:RxMode:接收允许选择
 332          *出口参数:void
 333          **************************************************/
 334          void USCI0_UART_Init(uint32_t UARTFsys, uint32_t BaudRate, USCI0_UART_Mode_TypeDef Mode,
 335                               USCI0_UART_RX_TypeDef RxMode)
 336          {
 337   1        OTCON |= 0x30;
 338   1        US0CON0 = US0CON0 & 0X0F | Mode | RxMode;
 339   1      
 340   1        if (Mode == USCI0_UART_Mode_8B)
 341   1        {
 342   2          if (BaudRate == USCI0_UART_BaudRate_FsysDIV12)
 343   2          {
 344   3            US0CON0 &= 0XDF;
 345   3          }
 346   2          else if (BaudRate == USCI0_UART_BaudRate_FsysDIV4)
 347   2          {
 348   3            US0CON0 |= 0X20;
 349   3          }
 350   2        }
 351   1        else
 352   1        {
 353   2          US0CON2 = UARTFsys / BaudRate / 256;
 354   2          US0CON1 = UARTFsys / BaudRate % 256;
 355   2        }
 356   1      }
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 7   

 357          
 358          /*****************************************************
 359          *函数名称:void USCI0_UART_SendData8(uint8_t Data)
 360          *函数功能:USCI0 UART1发送8位数据
 361          *入口参数:
 362          uint8_t:Data:发送的数据
 363          *出口参数:void
 364          *****************************************************/
 365          void USCI0_UART_SendData8(uint8_t Data)
 366          {
 367   1        US0CON3 = Data;
 368   1      }
 369          
 370          /*****************************************************
 371          *函数名称:uint8_t USCI0_UART_ReceiveData8(void)
 372          *函数功能:获得US0CON3中的值
 373          *入口参数:void
 374          *出口参数:
 375          uint8_t:接收的数据
 376          *****************************************************/
 377          uint8_t USCI0_UART_ReceiveData8(void)
 378          {
 379   1        return US0CON3;
 380   1      }
 381          
 382          /*****************************************************
 383          *函数名称:void USCI0_UART_SendData9(uint16_t Data)
 384          *函数功能:UART1发送9位数据
 385          *入口参数:
 386          uint16_t:Data:发送的数据
 387          *出口参数:void
 388          *****************************************************/
 389          void USCI0_UART_SendData9(uint16_t Data)
 390          {
 391   1        uint8_t Data_9Bit;
 392   1        Data_9Bit = (Data >> 8);
 393   1      
 394   1        if (Data_9Bit)
 395   1        {
 396   2          US0CON0 |= 0x08;
 397   2        }
 398   1        else
 399   1        {
 400   2          US0CON0 &= 0xf7;
 401   2        }
 402   1      
 403   1        US0CON3 = (uint8_t)Data;
 404   1      }
 405          
 406          /*****************************************************
 407          *函数名称:uint16_t USCI0_UART_ReceiveData9(void)
 408          *函数功能:获得US0CON3中的值及第九位的值
 409          *入口参数:void
 410          *出口参数:
 411          uint16_t:接收的数据
 412          *****************************************************/
 413          uint16_t USCI0_UART_ReceiveData9(void)
 414          {
 415   1        uint16_t Data9;
 416   1        Data9 = US0CON3 + ((uint16_t)(US0CON0 & 0X04) << 6);
 417   1        return Data9;
 418   1      }
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 8   

 419          
 420          /*****************************************************
 421          *函数名称:void USCI0_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 422          *函数功能:USCI0中断初始化
 423          *入口参数:
 424          FunctionalState:NewState:中断使能/关闭选择
 425          PriorityStatus:Priority:中断优先级选择
 426          *出口参数:void
 427          *****************************************************/
 428          void USCI0_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 429          {
 430   1        if (NewState != DISABLE)
 431   1        {
 432   2          IE1 |= 0x01;
 433   2        }
 434   1        else
 435   1        {
 436   2          IE1 &= 0xFE;
 437   2        }
 438   1      
 439   1        /************************************************************/
 440   1        if (Priority != LOW)
 441   1        {
 442   2          IP1 |= 0x01;
 443   2        }
 444   1        else
 445   1        {
 446   2          IP1 &= 0xFE;
 447   2        }
 448   1      }
 449          
 450          /*****************************************************
 451          *函数名称:FlagStatus USCI0_GetFlagStatus(USCI0_Flag_TypeDef USCI0_FLAG)
 452          *函数功能:获得USCI0标志状态
 453          *入口参数:
 454          USCI0_Flag_TypeDef:USCI0_FLAG:所需获取的标志位
 455          *出口参数:
 456          FlagStatus:USCI0标志状态
 457          *****************************************************/
 458          FlagStatus USCI0_GetFlagStatus(USCI0_Flag_TypeDef USCI0_FLAG)
 459          {
 460   1        FlagStatus bitstatus = RESET;
 461   1      #if defined(SC95F8x1x) || defined(SC95F7x1x) || defined(SC95FWxx)
              
                if ((USCI0_FLAG == USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG == USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG == USCI0_T
             -WI_FLAG_TXRXnE))
              #endif
 465   1      #if defined(SC95F8x2x) || defined(SC95F7x2x) || defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC95F
             -8x6x) || defined (SC95F7x6x)  || defined (SC95F8x1xB) || defined (SC95F7x1xB)
 466   1          if ((USCI0_FLAG == USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG == USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG == USCI0
             -_SPI_FLAG_TXE) || (USCI0_FLAG == USCI0_TWI_FLAG_TXRXnE))
 467   1      #endif
 468   1          {
 469   2            if ((USCI0_FLAG & US0CON1) != (uint8_t)RESET)
 470   2            {
 471   3              bitstatus = SET;
 472   3            }
 473   2            else
 474   2            {
 475   3              bitstatus = RESET;
 476   3            }
 477   2          }
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 9   

 478   1          else
 479   1          {
 480   2            if ((USCI0_FLAG & US0CON0) != (uint8_t)RESET)
 481   2            {
 482   3              bitstatus = SET;
 483   3            }
 484   2            else
 485   2            {
 486   3              bitstatus = RESET;
 487   3            }
 488   2          }
 489   1      
 490   1        return bitstatus;
 491   1      }
 492          
 493          /*****************************************************
 494          *函数名称:void USCI0_ClearFlag(USCI0_Flag_TypeDef USCI0_FLAG)
 495          *函数功能:清除USCI0标志状态
 496          *入口参数:
 497          USCI0_Flag_TypeDef:USCI0_FLAG:所需清除的标志位
 498          *出口参数:void
 499          *****************************************************/
 500          void USCI0_ClearFlag(USCI0_Flag_TypeDef USCI0_FLAG)
 501          {
 502   1      #if defined(SC95F8x1x) || defined(SC95F7x1x) || defined(SC95FWxx)
              
                if ((USCI0_FLAG == USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG == USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG == USCI0_T
             -WI_FLAG_TXRXnE))
              
              #elif defined(SC95F8x2x) || defined(SC95F7x2x) || defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC9
             -5F8x6x) || defined (SC95F7x6x)  || defined (SC95F8x1xB) || defined (SC95F7x1xB)
 507   1      
 508   1        if ((USCI0_FLAG == USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG == USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG == USCI0_S
             -PI_FLAG_TXE) || (USCI0_FLAG == USCI0_TWI_FLAG_TXRXnE))
 509   1      
 510   1      #endif
 511   1        {
 512   2          US0CON1 &= (~USCI0_FLAG); //操作寄存器US0CON1
 513   2        }
 514   1        else if ((USCI0_FLAG == USCI0_UART_FLAG_TI) || (USCI0_FLAG == USCI0_UART_FLAG_RI))
 515   1        {
 516   2      #if defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC95F8x6x) || defined (SC95F7x6x)  || defined (SC
             -95F8x1xB) || defined (SC95F7x1xB)
 517   2          US0CON0 = US0CON0  & 0xFC | USCI0_FLAG;//写1清零
 518   2      #else
                  US0CON0 &= (~USCI0_FLAG); //写0清零
              #endif
 521   2        }
 522   1        else
 523   1        {
 524   2          US0CON0 &= (~USCI0_FLAG); //操作寄存器US0CON0
 525   2        }
 526   1      }
 527          
 528          /*****************************************************
 529          *函数名称:void USCI0_TWI_SendAddr(uint8_t Addr,USCI0_TWI_RWType RW)
 530          *函数功能:TWI发送地址，读写类型
 531          *入口参数:
 532          uint8_t:Addr:发送的地址 0~127
 533          USCI0_TWI_RWType:RW:读写类型
 534          *出口参数:void
 535          *****************************************************/
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 10  

 536          void USCI0_TWI_SendAddr(uint8_t Addr, USCI0_TWI_RWType RW)
 537          {
 538   1        US0CON3 = (Addr << 1) | RW;
 539   1      }
 540          
 541          #if defined(SC95F8x2x) || defined(SC95F7x2x)
              /**************************************************
              *函数名称:void USCI0_SC_Init()
              *函数功能:智能卡初始化配置函数
              *入口参数:
              FunctionalState:ClockEnable:时钟输出使能位
              USCI0_SC_ERS_TypeDef:ErrorSignal:ErrorSignal长度
              USCI0_SC_TREN_TypeDef:TrenMode:发送/接收使能，发送和接收只能二选一
              USCI0_SC_CONS_TypeDef:ConsMod:编码方式选择
              FunctionalState:ReSend:数据发送接收校验出错重发使能位
              USCI0_SC_Check_TypeDef:CheckType:校验类型
              *出口参数:void
              **************************************************/
              void USCI0_SC_Init(FunctionalState ClockEnable,
                                 USCI0_SC_ERS_TypeDef ErrorSignal,
                                 USCI0_SC_TREN_TypeDef TrenMode,
                                 USCI0_SC_CONS_TypeDef ConsMode,
                                 FunctionalState ReSend,
                                 USCI0_SC_Check_TypeDef CheckType)
              {
                if (ClockEnable != DISABLE)
                {
                  US0CON0 |= 0x40;
                }
                else
                {
                  US0CON0 &= ~0x40;
                }
              
                US0CON0 &= ~0x3d;
                US0CON0 |= TrenMode | ConsMode | CheckType | (ErrorSignal << 3);
              
                if (ReSend != DISABLE)
                {
                  US0CON0 |= 0x02;
                }
                else
                {
                  US0CON0 &= ~0x02;
                }
              }
              /**************************************************
              *函数名称:void USCI0_SC_EGT(uint8_t EgtCount)
              *函数功能:智能卡拓展保护时间设置
              *入口参数:
              uint8_t:EgtCount:拓展保护时间数:EgtCount个ETU
              *出口参数:void
              **************************************************/
              void USCI0_SC_EGT(uint8_t EgtCount)
              {
                US0CON4 = EgtCount;
              }
              
              /**************************************************
              *函数名称:void USCI0_SC_ETU_SET(USCI0_SC_Pres Sel_TypeDef SC_PrescalerSelection,uint8_t EtuCk)
              *函数功能:ETU设置，一个ETU时间长度设置
              *入口参数:
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 11  

              USCI0_SC_PresSel_TypeDef:SC_PrescalerSelection:SC Clock 时钟来源
              uint16_t:EtuCk:一个ETU为(EtuCk+1)个SC Clock。必须大于0x004
              *出口参数:void
              **************************************************/
              void USCI0_SC_ETU_SET(USCI0_SC_PresSel_TypeDef SC_PrescalerSelection, uint16_t EtuCk)
              {
                US0CON2 = (EtuCk >> 8);
                US0CON1 = (uint8_t)EtuCk;
                US0CON2 = (SC_PrescalerSelection << 4);
              }
              /*****************************************************
              *函数名称:void USCI0_SC_Cmd(FunctionalState NewState)
              *函数功能:智能卡功能开关函数
              *入口参数:
              FunctionalState:NewState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void USCI0_SC_Cmd(FunctionalState NewState)
              {
                if (NewState == DISABLE)
                {
                  US0CON0 &= 0X7F;
                }
                else
                {
                  US0CON0 |= 0x80;
                }
              }
              /*****************************************************
              *函数名称:FlagStatus USCI0_SC_GetFlagStatus(USCI0_SC_Flag_TypeDef USCI0_SC_FLAG)
              *函数功能:获得SC标志状态
              *入口参数:
              USCI0_SC_Flag_TypeDef:USCI0_SC_FLAG:所需获取的标志位
              *出口参数:
              FlagStatus:USCI0_SC标志状态
              *****************************************************/
              FlagStatus USCI0_SC_GetFlagStatus(USCI0_SC_Flag_TypeDef USCI0_SC_FLAG)
              {
                //    寄存器切换控制位:
                //    0 :US0CON5 (B7H)为读写状态寄存器
                //    1 :US0CON5 (B7H)为读写错误信息寄存器
                US0CON5 |= (USCI0_SC_FLAG & 0X80);
                return USCI0_SC_FLAG & US0CON5;
              }
              /*****************************************************
              *函数名称:void USCI0_UART_SendData(uint8_t Data)
              *函数功能:USCI0 SC发送8位数据
              *入口参数:
              uint8_t:Data:发送的数据
              *出口参数:void
              *****************************************************/
              void USCI0_SC_SendData(uint8_t Data)
              {
                US0CON3 = Data;
              }
              /*****************************************************
              *函数名称:uint8_t USCI0_SC_ReceiveData(void)
              *函数功能:获得接收缓存中的值
              *入口参数:void
              *出口参数:
              uint8_t:接收的数据
              *****************************************************/
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 12  

              uint8_t USCI0_SC_ReceiveData(void)
              {
                return US0CON3;
              }
              
              #endif
 666          
 667          #if defined(SC95F8x2x) || defined(SC95F7x2x) || defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC95F
             -8x6x) || defined (SC95F7x6x)  || defined (SC95F8x1xB) || defined (SC95F7x1xB)
 668          /*********************************************************************************************************
             -*
 669          *函数名称:uint8_t USCI0_SPI_WriteFIFO(uint16_t *sbuf,uint8_t length)
 670          *函数功能:SPI0写入FIFO
 671          *入口参数:
 672          uint16_t:*sbuf:发送buffer
 673          uint8_t:length:发送数据长度
 674          *出口参数:
 675          uint8_t:(0:非法操作；1:写入FIFO缓存成功)
 676          **********************************************************************************************************
             -/
 677          uint8_t USCI0_SPI_WriteFIFO(uint16_t *sbuf, uint8_t length)
 678          {
 679   1        if (length > 8 || length < 1)
 680   1        {
 681   2          return 0;
 682   2        }
 683   1        else
 684   1        {
 685   2          uint8_t i = 0;
 686   2          US0CON1 &= ~0x01; //关闭TBIE
 687   2      
 688   2          for (i = 0; i < length; i++)
 689   2          {
 690   3            US0CON3 = *(sbuf + i) >> 8; //写入待发送数据的高字节
 691   3            US0CON2 = *(sbuf + i);      //写入待发送数据的低字节
 692   3          }
 693   2      
 694   2          if (length != 0x01) //若非单次写入，需清除TXE
 695   2          {
 696   3            US0CON1 &= (~0x08); //清TXE
 697   3          }
 698   2      
 699   2          US0CON1 |= 0x01; //开启TBIE
 700   2          return 1;
 701   2        }
 702   1      }
 703          #endif
 704          
 705          /******************* (C) COPYRIGHT 2020 SinOne Microelectronics *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    728    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.60.0.0   SC95F_USCI0                                                       09/08/2023 13:17:57 PAGE 13  

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
