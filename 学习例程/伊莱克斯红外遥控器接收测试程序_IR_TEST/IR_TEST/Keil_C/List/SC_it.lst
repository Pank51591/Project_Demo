C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SC_IT
OBJECT MODULE PLACED IN ..\Output\SC_it.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE ..\User\SC_it.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE
                    -) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\Project) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\SC_it.lst) TABS(2) OBJ
                    -ECT(..\Output\SC_it.obj)

line level    source

   1          //************************************************************
   2          //  Copyright (c)   
   3          //  FileName    : SC_it.c
   4          //  Function    : Interrupt Service Routine
   5          //  Instructions  :  
   6          //  Date          : 2022/03/03
   7          //  Version     : V1.0002
   8          //*************************************************************
   9          /********************Includes************************************************************************/
  10          #include "SC_it.h"
  11          #include "..\Drivers\SCDriver_list.h"
  12          #include "HeadFiles\SC_itExtern.h"
  13          #include "ir.h"
  14          /**************************************Generated by EasyCodeCube*************************************/
  15          uint16_t headcount;
  16          uint8_t head705flag;
  17          uint8_t start_receiveflag;
  18          uint8_t itcount;
  19          uint8_t headcountflag;
  20          uint8_t head1080usflag;
  21          uint8_t after720usflag;
  22          uint8_t sendendflag;
  23          
  24          /*************************************.Generated by EasyCodeCube.************************************/
  25          void INT0Interrupt()    interrupt 0       
  26          {
  27   1          TCON &= 0XFD;//Clear interrupt flag bit
  28   1          /*INT0_it write here begin*/
  29   1          /*INT0_it write here*/
  30   1          /*<Generated by EasyCodeCube begin>*/
  31   1          /*<Generated by EasyCodeCube end>*/
  32   1          /*INT0Interrupt Flag Clear begin*/
  33   1          /*INT0Interrupt Flag Clear end*/
  34   1      }
  35          
  36          /*********************************************************
  37          ***函数名：
  38          ***函数功能：定时器中断
  39          ***参数：
  40          ***返回值：
  41          **********************************************************/
  42          void Timer0Interrupt()    interrupt 1        
  43          {
  44   1          /*TIM0_it write here begin*/
  45   1          /*TIM0_it write here*/
  46   1          /*<Generated by EasyCodeCube begin>*/
  47   1          /*<Generated by EasyCodeCube end>*/
  48   1          if(start_receiveflag)
  49   1          {
  50   2              if(headcountflag)
  51   2              {
  52   3                  headcount++;
  53   3                  if(headcount == 125)
C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 2   

  54   3                  {
  55   4                      headcount = 0;
  56   4                      headcountflag =0;   
  57   4                      //    ir_receive();
  58   4                      //    ir_receive_pocess();
  59   4                      head1080usflag =1;
  60   4                      after720usflag =0;
  61   4                  }
  62   3              }
  63   2              else
  64   2              {
  65   3                  headcount++;
  66   3                  if(headcount == 73)
  67   3                  {
  68   4                      //    ir_receive();
  69   4                      //    ir_receive_pocess();
  70   4                      headcount = 0;
  71   4                      after720usflag = 1;
  72   4                      head1080usflag = 0;
  73   4                  }
  74   3              }
  75   2          }
  76   1          
  77   1      }
  78          
  79          /*********************************************************
  80          ***函数名：
  81          ***函数功能：输入捕获中断
  82          ***参数：
  83          ***返回值：
  84          **********************************************************/
  85          void INT1Interrupt()    interrupt 2   
  86          {
  87   1          TCON &= 0XF7;      //Clear interrupt flag bit
  88   1        
  89   1          itcount++;   //下降沿中断计数
  90   1          if(itcount == 1)
  91   1          {
  92   2            start_receiveflag = 1;
  93   2            headcountflag =1;
  94   2            headcount =0;
  95   2          }
  96   1                
  97   1      }
  98          
  99          
 100          void Timer1Interrupt()    interrupt 3   
 101          {
 102   1          /*TIM1_it write here begin*/
 103   1          /*TIM1_it write here*/
 104   1          /*<Generated by EasyCodeCube begin>*/
 105   1          /*<Generated by EasyCodeCube end>*/
 106   1          /*Timer1Interrupt Flag Clear begin*/
 107   1          /*Timer1Interrupt Flag Clear end*/    
 108   1      }
 109          #if defined (SC92F742x) || defined (SC92F7490)
              void SSI0Interrupt()    interrupt 4   
              {
                  /*SSI0_it write here begin*/
                  /*SSI0_it write here*/
                  /*<Generated by EasyCodeCube begin>*/
                  /*<Generated by EasyCodeCube end>*/
C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 3   

                  /*SSI0Interrupt Flag Clear begin*/
                  /*SSI0Interrupt Flag Clear end*/    
              }
              #else
 120          void UART0Interrupt()   interrupt 4   
 121          {
 122   1          /*UART0_it write here begin*/
 123   1          /*UART0_it write here*/
 124   1          /*<Generated by EasyCodeCube begin>*/
 125   1          /*<Generated by EasyCodeCube end>*/
 126   1          /*UART0Interrupt Flag Clear begin*/
 127   1          /*UART0Interrupt Flag Clear end*/   
 128   1      }
 129          #endif
 130          void Timer2Interrupt()    interrupt 5   
 131          {
 132   1          /*TIM2_it write here begin*/
 133   1          /*TIM2_it write here*/
 134   1          /*<Generated by EasyCodeCube begin>*/
 135   1          /*<Generated by EasyCodeCube end>*/
 136   1          /*Timer2Interrupt Flag Clear begin*/
 137   1          /*Timer2Interrupt Flag Clear end*/    
 138   1      }
 139          void ADCInterrupt()     interrupt 6   
 140          {
 141   1          /*ADC_it write here begin*/
 142   1          /*ADC_it write here*/
 143   1          /*<Generated by EasyCodeCube begin>*/
 144   1          /*<Generated by EasyCodeCube end>*/
 145   1          /*ADCInterrupt Flag Clear begin*/
 146   1          /*ADCInterrupt Flag Clear end*/   
 147   1      }
 148          #if defined (SC92F854x) || defined (SC92F754x) ||defined  (SC92F844xB) || defined (SC92F744xB)||defined  (
             -SC92F84Ax_2) || defined (SC92F74Ax_2)|| defined (SC92F846xB) \
 149          || defined (SC92F746xB) || defined (SC92F836xB) || defined (SC92F736xB) || defined (SC92F8003)||defined  (
             -SC92F84Ax) || defined (SC92F74Ax) || defined  (SC92F83Ax) \
 150          || defined (SC92F73Ax) || defined (SC92F7003) || defined (SC92F740x) || defined (SC92FWxx) || defined (SC9
             -3F743x) || defined (SC93F833x) || defined (SC93F843x)\
 151          || defined (SC92F848x) || defined (SC92F748x)|| defined (SC92F859x) || defined (SC92F759x)
              void SSIInterrupt()     interrupt 7   
              {
                  /*SSI_it write here begin*/
                  /*SSI_it write here*/
                  /*<Generated by EasyCodeCube begin>*/
                  /*<Generated by EasyCodeCube end>*/
                  /*SSIInterrupt Flag Clear begin*/
                  /*SSIInterrupt Flag Clear end*/   
              }
              #elif defined (SC92F742x) || defined (SC92F7490)
              void SSI1Interrupt()    interrupt 7   
              {
                  /*SSI1_it write here begin*/
                  /*SSI1_it write here*/
                  /*<Generated by EasyCodeCube begin>*/
                  /*<Generated by EasyCodeCube end>*/
                  /*SSI1Interrupt Flag Clear begin*/
                  /*SSI1Interrupt Flag Clear end*/    
              }
              #else 
 172          void USCI0Interrupt()     interrupt 7   
 173          {
 174   1          /*USCI0_it write here begin*/
C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 4   

 175   1          /*USCI0_it write here*/
 176   1          /*<Generated by EasyCodeCube begin>*/
 177   1          /*<Generated by EasyCodeCube end>*/
 178   1          /*USCI0Interrupt Flag Clear begin*/
 179   1          if(USCI0_GetFlagStatus(USCI0_UART_FLAG_TI))
 180   1          {
 181   2            sendendflag = 1;
 182   2            USCI0_ClearFlag(USCI0_UART_FLAG_RI);
 183   2            USCI0_ClearFlag(USCI0_UART_FLAG_TI);
 184   2          }
 185   1          /*USCI0Interrupt Flag Clear end*/   
 186   1      }
 187          #endif
 188          void PWMInterrupt()     interrupt 8
 189          {
 190   1          /*PWM_it write here begin*/
 191   1          /*PWM_it write here*/
 192   1          /*<Generated by EasyCodeCube begin>*/
 193   1          /*<Generated by EasyCodeCube end>*/
 194   1          /*PWMInterrupt Flag Clear begin*/
 195   1          /*PWMInterrupt Flag Clear end*/   
 196   1      }
 197          #if !defined (TK_USE_BTM)
 198          void BTMInterrupt()     interrupt 9
 199          {
 200   1          /*BTM_it write here begin*/
 201   1          /*BTM_it write here*/
 202   1          /*<Generated by EasyCodeCube begin>*/
 203   1          /*<Generated by EasyCodeCube end>*/
 204   1          /*BTMInterrupt Flag Clear begin*/
 205   1          /*BTMInterrupt Flag Clear end*/   
 206   1      }
 207          #endif
 208          void INT2Interrupt()    interrupt 10
 209          { 
 210   1          /*INT2_it write here begin*/
 211   1          /*INT2_it write here*/
 212   1          /*<Generated by EasyCodeCube begin>*/
 213   1          /*<Generated by EasyCodeCube end>*/
 214   1          /*INT2Interrupt Flag Clear begin*/
 215   1          /*INT2Interrupt Flag Clear end*/    
 216   1      }
 217          void ACMPInterrupt()    interrupt 12
 218          {
 219   1          /*ACMP_it write here begin*/
 220   1          /*ACMP_it write here*/
 221   1          /*<Generated by EasyCodeCube begin>*/
 222   1          /*<Generated by EasyCodeCube end>*/
 223   1          /*ACMPInterrupt Flag Clear begin*/
 224   1          /*ACMPInterrupt Flag Clear end*/    
 225   1      }
 226          void Timer3Interrupt()    interrupt 13
 227          {
 228   1          /*Timer3_it write here begin*/
 229   1          /*Timer3_it write here*/
 230   1          /*<Generated by EasyCodeCube begin>*/
 231   1          /*<Generated by EasyCodeCube end>*/
 232   1          /*Timer3Interrupt Flag Clear begin*/
 233   1          /*Timer3Interrupt Flag Clear end*/    
 234   1      }
 235          void Timer4Interrupt()    interrupt 14
 236          {
C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 5   

 237   1          /*Timer4_it write here begin*/
 238   1          /*Timer4_it write here*/
 239   1          /*<Generated by EasyCodeCube begin>*/
 240   1          /*<Generated by EasyCodeCube end>*/
 241   1          /*Timer4Interrupt Flag Clear begin*/
 242   1          /*Timer4Interrupt Flag Clear end*/    
 243   1      }
 244          void USCI1Interrupt()   interrupt 15    
 245          { 
 246   1          /*USCI1_it write here begin*/
 247   1          /*USCI1_it write here*/
 248   1          /*<Generated by EasyCodeCube begin>*/
 249   1          /*<Generated by EasyCodeCube end>*/
 250   1          /*USCI1Interrupt Flag Clear begin*/
 251   1          /*USCI1Interrupt Flag Clear end*/   
 252   1      }
 253          void USCI2Interrupt()   interrupt 16    
 254          { 
 255   1          /*USCI2_it write here begin*/
 256   1          /*USCI2_it write here*/
 257   1          /*<Generated by EasyCodeCube begin>*/
 258   1          /*<Generated by EasyCodeCube end>*/
 259   1          /*USCI2Interrupt Flag Clear begin*/
 260   1          /*USCI2Interrupt Flag Clear end*/   
 261   1      }
 262          void USCI3Interrupt()   interrupt 17    
 263          {
 264   1          /*USCI3_it write here begin*/
 265   1          /*USCI3_it write here*/
 266   1          /*<Generated by EasyCodeCube begin>*/
 267   1          /*<Generated by EasyCodeCube end>*/
 268   1          /*USCI3Interrupt Flag Clear begin*/
 269   1          /*USCI3Interrupt Flag Clear end*/   
 270   1      }
 271          void USCI4Interrupt()   interrupt 18    
 272          {
 273   1          /*USCI4_it write here begin*/
 274   1          /*USCI4_it write here*/
 275   1          /*<Generated by EasyCodeCube begin>*/
 276   1          /*<Generated by EasyCodeCube end>*/
 277   1          /*USCI4Interrupt Flag Clear begin*/
 278   1          /*USCI4Interrupt Flag Clear end*/   
 279   1      }
 280          void USCI5Interrupt()   interrupt 19    
 281          {
 282   1          /*USCI5_it write here begin*/
 283   1          /*USCI5_it write here*/
 284   1          /*<Generated by EasyCodeCube begin>*/
 285   1          /*<Generated by EasyCodeCube end>*/
 286   1          /*USCI5Interrupt Flag Clear begin*/
 287   1          /*USCI5Interrupt Flag Clear end*/   
 288   1      }
 289          void LPDInterrupt()   interrupt 22    
 290          {
 291   1          /*LPD_it write here begin*/
 292   1          /*LPD_it write here*/
 293   1          /*<Generated by EasyCodeCube begin>*/
 294   1          /*<Generated by EasyCodeCube end>*/
 295   1          /*LPDInterrupt Flag Clear begin*/
 296   1          /*LPDInterrupt Flag Clear end*/   
 297   1      }

C51 COMPILER V9.60.0.0   SC_IT                                                             09/08/2023 13:28:22 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    339    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
