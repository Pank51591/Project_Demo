C51 COMPILER V9.01   SC95F_TIMER1                                                          09/07/2020 16:59:33 PAGE 1   
C51 COMPILER V9.01, COMPILATION OF MODULE SC95F_TIMER1
OBJECT MODULE PLACED IN ..\Output\sc95f_timer1.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_timer1.c OMF2 BROWSE INCDIR(..\FWLib\SC95F_Lib
                    -\inc;..\User) DEFINE(SC95F8x2x) DEBUG PRINT(..\List\sc95f_timer1.lst) OBJECT(..\Output\sc95f_timer1.obj)
line level    source
   1         
   2         
   3         
   4         
   5         
   6         
   7         
   8         
   9         
  10         
  11          
  12          
  13          #include "sc95f_timer1.h"
  14          
  15          
  21          void TIM1_DeInit(void)
  22          {
  23   1              TMOD &= 0X0F;
  24   1              TCON &= 0X37;
  25   1              TMCON &= 0XFD;
  26   1              TH1 = 0X00;
  27   1              TL1 = 0X00;
  28   1              ET1 = 0;
  29   1              IPT1 = 0;
  30   1      }
  31          
  32          
  39          void TIM1_TimeBaseInit(TIM1_PresSel_TypeDef TIM1_PrescalerSelection,TIM1_CountMode_TypeDef TIM1_CountMode)
  40          {
  41   1              if(TIM1_PrescalerSelection == TIM1_PRESSEL_FSYS_D12)
  42   1              {
  43   2                      TMCON &= 0xFD;
  44   2              }
  45   1              else if(TIM1_PrescalerSelection == TIM1_PRESSEL_FSYS_D1)
  46   1              {
  47   2                      TMCON |= 0x02;
  48   2              }
  49   1      
  50   1              if(TIM1_CountMode == TIM1_MODE_TIMER)
  51   1              {
  52   2                      TMOD &= 0xBF;           
  53   2              }
  54   1              else if(TIM1_CountMode == TIM1_MODE_COUNTER)
  55   1              {
  56   2                      TMOD |= 0x40;
  57   2              }       
  58   1      }
  59          
  60          
  66          void TIM1_WorkMode0Config(uint16_t TIM1_SetCounter)
  67          {
  68   1              TMOD &= 0XCF;
  69   1              TL1 = (uint8_t)TIM1_SetCounter;
  70   1              TH1 = (TIM1_SetCounter >> 5);           
  71   1      }
  72          
  73          
  79          void TIM1_WorkMode1Config(uint16_t TIM1_SetCounter)
  80          {
  81   1              TMOD &= 0XCF;
  82   1              TMOD |= 0X10;
  83   1              TL1 = TIM1_SetCounter % 256;
  84   1              TH1 = TIM1_SetCounter / 256;
  85   1      }
  86          
  87          
  93          void TIM1_WorkMode2Config(uint8_t TIM1_SetCounter)
  94          {
  95   1              TMOD &= 0XCF;
  96   1              TMOD |= 0X20;
  97   1              TL1 = TIM1_SetCounter;
  98   1              TH1 = TIM1_SetCounter;
  99   1      }
 100          
 101          
 108          void TIM1_WorkModeConfig(TIM1_WorkMode_TypeDef TIM1_WorkMode, uint16_t TIM1_SetCounter)
 109          {       
 110   1              switch (TIM1_WorkMode)
 111   1              {
 112   2                      case TIM1_WORK_MODE0:
 113   2                              TIM1_WorkMode0Config(TIM1_SetCounter);
 114   2                      break;
 115   2      
 116   2                      case TIM1_WORK_MODE1:
 117   2                              TIM1_WorkMode1Config(TIM1_SetCounter);
 118   2                      break;
 119   2      
 120   2                      case TIM1_WORK_MODE2:
 121   2                              TIM1_WorkMode2Config(TIM1_SetCounter);
 122   2                      break;
 123   2      
 124   2                      default:
 125   2                      break;
 126   2              }               
 127   1      }
 128          
 129          
 135          void TIM1_Mode0SetReloadCounter(uint16_t TIM1_SetCounter)
 136          {
 137   1              TL1 = (uint8_t)TIM1_SetCounter;
 138   1              TH1 = (TIM1_SetCounter >> 5);   
 139   1      }
 140          
 141          
 147          void TIM1_Mode1SetReloadCounter(uint16_t TIM1_SetCounter)
 148          {
 149   1              TL1 = TIM1_SetCounter % 256;
 150   1              TH1 = TIM1_SetCounter / 256;    
 151   1      }
 152          
 153          
 159          void TIM1_Cmd(FunctionalState NewState)
 160          {
 161   1              if (NewState == DISABLE)
 162   1          {
 163   2             TR1 = 0;
 164   2          }
 165   1          else
 166   1          {
 167   2             TR1 = 1;
 168   2          }
 169   1      }
 170          
 171          
 178          void TIM1_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 179          {
 180   1          if(NewState == DISABLE)
 181   1          {
 182   2             ET1 = 0;
 183   2          }
 184   1          else
 185   1          {
 186   2             ET1 = 1;
 187   2          }
 188   1      
 189   1              if(Priority == LOW)
 190   1              {
 191   2                      IPT1 = 0;
 192   2              }
 193   1              else
 194   1              {
 195   2                      IPT1 = 1;
 196   2              }
 197   1      }
 198          
 199          
 205          FlagStatus TIM1_GetFlagStatus(void)
 206          {
 207   1              return TF1;
 208   1      }
 209          
 210          
 216          void TIM1_ClearFlag(void)
 217          {
 218   1              TF1 = 0;
 219   1      }
 220          
 221          
MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    178    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.
C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
