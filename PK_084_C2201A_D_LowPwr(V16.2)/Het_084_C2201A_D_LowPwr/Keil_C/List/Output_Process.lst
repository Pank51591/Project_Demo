C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OUTPUT_PROCESS
OBJECT MODULE PLACED IN ..\Output\Output_Process.obj
COMPILER INVOKED BY: D:\Program Fails\Keil_v5\C51\BIN\C51.EXE ..\User\Funtion\Output_Process.c LARGE OBJECTADVANCED OPTI
                    -MIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKey_
                    -Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\Output_Process.lst) TABS(2) OBJECT(..\Output\Output_Process.obj)

line level    source

   1          #include "SC_System.h"
   2          #include "Burner_Process.h"
   3          #include "Output_Process.h"
   4          
   5          extern void SC_PWM3_Init_2Khz(void);
   6          
   7          extern void SC_PWM3_Init_41Khz(void);
   8          
   9          extern void SC_PWM3_Init(void);
  10          extern void SC_PWM3_Init_33Khz(void);
  11          
  12          extern uint8_t gcBurner1OpenCount;       
  13          extern uint8_t gcBurner1CloseCount;       
  14          
  15          extern uint8_t gcBurner2OpenCount;        
  16          extern uint8_t gcBurner2CloseCount;       
  17          
  18          extern uint8_t gcBurner3OpenCount;        
  19          extern uint8_t gcBurner3CloseCount;      
  20          
  21          extern uint8_t gcBurner4OpenCount;         
  22          extern uint8_t gcBurner4CloseCount;        
  23          
  24          extern uint8_t gcBurner5OpenCount;        
  25          extern uint8_t gcBurner5CloseCount;        
  26          
  27          extern uint8_t gcBurner6OpenCount;         
  28          extern uint8_t gcBurner6CloseCount;        
  29          
  30          extern uint8_t gcBurnerStatus;            
  31          extern uint8_t gcBurnerOpenCount;   
  32          
  33          extern uint8_t gcKeyStatus;                
  34          extern uint8_t gcKeyCount;                
  35          extern uint8_t gcOneMsCount;               
  36          extern uint32_t gcButton1State;             
  37          extern uint8_t gcKeyValue;                
  38          extern uint16_t giKeySW6LongDownTime;      
  39          extern uint8_t gcBuzzerTime; 
  40          extern uint16_t giPowerUpTime;
  41          extern uint8_t  gcPowerUpTime;
  42          extern uint16_t giLEDPwmValue;
  43          extern uint16_t giLEDFlashTime;
  44          extern uint8_t gcLEDFlashCount;
  45          extern uint8_t gcSpeedLevel;
  46          extern uint32_t gllIRSendData;                //IR Send Data
  47          extern uint32_t gllIRSendDataBak;                //IR Send Data
  48          extern uint8_t  IRSendDataBitCount;          // 24bit
  49          extern uint8_t  gcIRSendStatus;
  50          extern uint16_t  gcIRSendDelayTime;             // 1S
  51          extern uint8_t gcIRSendCount;                  // 3
  52          extern uint8_t gcIRSendLightOnCount;
  53          extern uint8_t gcIRSendLightOnTime;
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 2   

  54          
  55          extern uint8_t gcIRSendLightOffCount ;        //灯开发送计数
  56          extern uint8_t gcIRSendLightOffTime ;
  57          
  58          extern uint8_t gcIRSendSpeedOffCount;        
  59          extern uint8_t gcIRSendSpeedOffTime;
  60          
  61          extern uint8_t gcIRSendSpeedCommandCount ;   
  62          extern uint8_t gcIRSendSpeedCommandTime ;
  63          
  64          extern uint8_t gcVar;
  65          extern uint8_t gcTemp;
  66          
  67          uint32_t gllTestIRSendData = 0;
  68          uint32_t gllTestIRSendData1 = 0;
  69          uint32_t gllTestIRSendData2 = 0;
  70          uint32_t gllTestIRSendData3 = 0;
  71          
  72          uint8_t gcTestSendIRStatus = 0;
  73          
  74          uint8_t gcBatHigh4bit;
  75          uint8_t gcBatLow8bit;
  76          
  77          uint8_t gcIRSendTestATime;
  78          uint8_t gcIRSendTestBTime;
  79          uint8_t gcIRSendTestCTime;
  80          
  81          extern  unsigned  int   xdata   RawData[];              
  82          extern  unsigned  int   data    BaseLine[]; 
  83          extern uint32_t gllIRSendDataBak;                //IR Send Data
  84          extern uint8_t gcIRSendCount;
  85          extern uint16_t gcIRSendDelayTime;
  86          extern uint8_t gcIRSendTestACount;
  87          extern uint8_t gcIRSendTestBCount;
  88          extern uint8_t gcIRSendTestCCount;
  89          extern uint8_t IRSendDataBitCount;   // 24bit
  90          extern uint16_t giBatValue;          //检测到的电压值
  91          extern uint16_t giADCValue;
  92          
  93          uint8_t gcTestDataACount = 0;
  94          uint8_t gcTestDataBCount = 0;
  95          uint8_t gcTestDataCCount = 0;
  96          
  97          uint8_t gcPWMCly = 0;
  98          uint8_t gcPWMWaitTime = 0;
  99          uint16_t gcPWMCount = 0;
 100          uint8_t PWMUpDown_Flag;
 101          uint8_t gcPWMDelayTime = 0;
 102          
 103          uint8_t gcSleedFlashTime = 0;
 104          extern unsigned char gcSleepDelayTime;
 105          void LED_Process(void);
 106          
 107          #define PWMMaxTime         31999
 108          uint8_t gcSleepTime;
 109          void Set_PWMDuty(uint16_t PWM)
 110          {
 111   1         // TC2_Compare16bitMatch1Set(PWM);
 112   1        PWM_IndependentModeConfigEX(PWM20, PWM, PWM_OUTPUTSTATE_ENABLE);
 113   1      }
 114          
 115          void WakeAutoSleep(void)
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 3   

 116          {
 117   1      
 118   1        if(SysWakeUpSleepFlag)
 119   1            {
 120   2              Clr_SysWakeUpSleepFlag;
 121   2              TouchKey_QuitLowPowerMode();
 122   2            }
 123   1            
 124   1      }
 125          void SleepLED_Process(void)
 126          {
 127   1        
 128   1        if (PowerUpFlag)
 129   1        {
 130   2          
 131   2        }
 132   1        else
 133   1        {
 134   2          LED_Process();
 135   2        }
 136   1      }
 137          void LED_Process(void)
 138          {
 139   1          if(TestONFlag)
 140   1          {
 141   2              if(LEDONFlag)
 142   2              {
 143   3                Set_LED;
 144   3              }
 145   2              else
 146   2              {
 147   3                Clr_LED;
 148   3              }
 149   2          }
 150   1          else if (BatLowWarrnFlag)     //低电压报警时，优先显示LED状态
 151   1            {
 152   2               if(gcBurnerStatus != 0)     //有炉头开启
 153   2               {
 154   3                if (LowFlashLedFlag)
 155   3                {
 156   4                  Set_LED;
 157   4                }
 158   3                else
 159   3                {
 160   4                  Clr_LED;
 161   4                }
 162   3                gcSleepTime = 0;
 163   3              }
 164   2            }
 165   1          else if ((LightOffDelayStartFlag)||(SpeedDelayOffStartFlag))
 166   1              {
 167   2      //          P31=~P31;
 168   2                if (HalfSecondFlag)
 169   2                {
 170   3                  Set_LED;
 171   3                }
 172   2                else
 173   2                {
 174   3                  Clr_LED;
 175   3                }
 176   2              }
 177   1          else if (ActivateModeFlag)
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 4   

 178   1               {
 179   2                   if (gcBurnerStatus != 0)
 180   2                   {
 181   3                        Set_LED;
 182   3                        gcPWMCount = 0;
 183   3                      
 184   3                   }
 185   2                   else
 186   2                   {
 187   3                       
 188   3                       Clr_LED;
 189   3                   }
 190   2                     
 191   2               }
 192   1          else
 193   1           {
 194   2              Clr_LED;
 195   2           }
 196   1      
 197   1      }
 198          //=======================================================================================
 199          //                  void Output_Process(void)
 200          //                  Run once in 10ms         
 201          //                  Return value::No
 202          //=======================================================================================
 203           void Output_Process(void)
 204           {
 205   1           if (PowerUpFlag)     //刚上电
 206   1           {
 207   2               if (giPowerUpTime == 0)
 208   2               {
 209   3                   Set_LEDOnFlag;
 210   3                   Set_LED;
 211   3                //   Set_KeyBuzzerFlag;
 212   3                   gcPWMCount = 0;
 213   3               }
 214   2               
 215   2               giPowerUpTime++;
 216   2               if (giPowerUpTime >= 80)    //上电亮0.8ms
 217   2               {
 218   3                   Clr_LED;
 219   3                   giLEDPwmValue = 0;
 220   3                   PWMUpDown_Flag = 1;
 221   3                   Clr_PowerUpFlag;
 222   3                   giPowerUpTime = 0; 
 223   3                 
 224   3                   gcPWMCount = 31999;
 225   3               }
 226   2              gcSleepTime = 0;
 227   2           }
 228   1           else
 229   1           {
 230   2              
 231   2            LED_Process(); 
 232   2            if(TestONFlag)     //测试模式下
 233   2             {
 234   3             switch(gcTestSendIRStatus)
 235   3              {
 236   4                case 0 :     //发送第一个信号
 237   4                {
 238   5      //            if(gcTestDataACount < 1)
 239   5      //            {
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 5   

 240   5      //              gcTestDataACount = 1;
 241   5                    if(TestKeyDownFlag)      //如果有按键按下    (也要保证这一段只跑一次)
 242   5                    {
 243   6                        gllTestIRSendData1 = 0x0a;
 244   6                        gllTestIRSendData1 = (gllTestIRSendData1 << 4) | 0x05;
 245   6                        gllTestIRSendData2 = gcVar;
 246   6                        gllTestIRSendData3 = ((gllTestIRSendData1 + gllTestIRSendData2 + 1) & 0xff) ;      //检验和
 247   6                        gllTestIRSendData  = (gllTestIRSendData1 << 16) | (gllTestIRSendData2 << 8) | gllTestIRSendData3;
             -     //要发送的数据
 248   6                      
 249   6                    }
 250   5                    else
 251   5                    {
 252   6                        gllTestIRSendData1 = 0x0a;
 253   6                        gllTestIRSendData1 = (gllTestIRSendData1 << 4) | 0x0a;
 254   6                        gllTestIRSendData2 = gcVar;
 255   6                        gllTestIRSendData3 = ((gllTestIRSendData1 + gllTestIRSendData2 + 1) & 0xff) ;      //检验和
 256   6                        gllTestIRSendData  = (gllTestIRSendData1 << 16) | (gllTestIRSendData2 << 8) | gllTestIRSendData3;
             -     //要发送的数据
 257   6                      
 258   6                    }
 259   5      //            }
 260   5                  
 261   5                    if(SendTestAFlag)
 262   5                      {               
 263   6                        if((SendTestAEnFlag)&&(IRSendEnFlag==0))
 264   6                        {
 265   7                          
 266   7                          gllIRSendData = gllTestIRSendData;
 267   7                          gllIRSendDataBak =  gllIRSendData;
 268   7                          Set_IRSendEnFlag;               //使能信号发送                    
 269   7                          gcIRSendStatus = 0;               
 270   7                          IRSendDataBitCount = 0;
 271   7                          gcIRSendCount = 0;      //gcIRSendTestACount;          //数据发送的次数
 272   7                          
 273   7                        }
 274   6                        else
 275   6                        {
 276   7                          gcIRSendTestATime++;
 277   7                          if (gcIRSendTestATime >=50)
 278   7                          {
 279   8                            gcIRSendTestATime = 0;
 280   8                            Set_SendTestAEnFlag;
 281   8                          }
 282   7                        }
 283   6                      }
 284   5      
 285   5                  }       
 286   4                break;          
 287   4                case 1:     //发送第二个信号 
 288   4                {
 289   5      //            if(gcTestDataBCount < 1)
 290   5      //            {
 291   5      //              gcTestDataBCount = 1;
 292   5                    if(LEDONFlag)     //LED灯亮
 293   5                     {  
 294   6                       if(JP1Flag)    //接了跳帽
 295   6                       {
 296   7                         gcTemp = gcBurnerStatus | (1<<6) | (1<<7);        //LED使bit7  跳帽是bit6
 297   7                       }
 298   6                       else
 299   6                       {
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 6   

 300   7                         gcTemp = gcBurnerStatus | (0<<6) | (1<<7);
 301   7                       }
 302   6                     }
 303   5                     else
 304   5                     {
 305   6                       if(JP1Flag)    //接了跳帽
 306   6                       {
 307   7                         gcTemp = gcBurnerStatus | (1<<6) | (0<<7);
 308   7                       }
 309   6                       else
 310   6                       {
 311   7                         gcTemp = gcBurnerStatus | (0<<6) | (0<<7);
 312   7                       }
 313   6                     }
 314   5          
 315   5                    if(ExtIRFlag)
 316   5                    {
 317   6                      gllTestIRSendData1 = 0x0b;
 318   6                      gllTestIRSendData1 = (gllTestIRSendData1 << 4) | 0x05;
 319   6                    }
 320   5                    else
 321   5                    {
 322   6                      gllTestIRSendData1 = 0x0b;
 323   6                      gllTestIRSendData1 = (gllTestIRSendData1 << 4) | 0x0a;
 324   6                    }
 325   5                  
 326   5                    gllTestIRSendData2 = gcTemp;          //第二个信号的第二个字节
 327   5                    gllTestIRSendData3 = ((gllTestIRSendData1 + gllTestIRSendData2 + 1) & 0xff);      //检验和
 328   5                    gllTestIRSendData  = (gllTestIRSendData1 << 16) | (gllTestIRSendData2 << 8) | gllTestIRSendData3;  
             -   //要发送的数据
 329   5                    
 330   5                     if(SendTestBFlag)    
 331   5                      {
 332   6                        if((SendTestBEnFlag)&&(IRSendEnFlag==0))
 333   6                        {                   
 334   7                          gllIRSendData = gllTestIRSendData;
 335   7                          gllIRSendDataBak =  gllIRSendData;                    
 336   7                          gcIRSendStatus = 0;
 337   7                          gcIRSendDelayTime = 0;
 338   7                          IRSendDataBitCount = 0;
 339   7                          gcIRSendCount = 0;        //gcIRSendTestBCount;          //数据发送的次数
 340   7                          Set_IRSendEnFlag;          //使能信号发送             
 341   7                        }
 342   6                        else
 343   6                        {
 344   7                          gcIRSendTestBTime++;
 345   7                          if (gcIRSendTestBTime >=50)
 346   7                          {
 347   8                            gcIRSendTestBTime = 0;
 348   8                            Set_SendTestBEnFlag;
 349   8                          }
 350   7                        }
 351   6                      }         
 352   5                  }
 353   4                break;
 354   4                case 2:     //发送第三个信号（ADC采样值） 
 355   4                {
 356   5                  ADC_Process();
 357   5      //            if(gcTestDataCCount < 1)
 358   5      //            {
 359   5                    gcTestDataCCount = 1;
 360   5                    gcBatHigh4bit = ((giBatValue >> 8) & 0xf);     //取高4位
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 7   

 361   5                    gcBatLow8bit = (giBatValue & 0xff);    //取低8位
 362   5                    gllTestIRSendData1 = (0x0c << 4) | gcBatHigh4bit;
 363   5                    gllTestIRSendData2 = gcBatLow8bit;           //第二个信号的第二个字节
 364   5                    gllTestIRSendData3 = ((gllTestIRSendData1 + gllTestIRSendData2 + 1) & 0xff);       //检验和
 365   5                    gllTestIRSendData  = (gllTestIRSendData1 << 16) | (gllTestIRSendData2 << 8) | gllTestIRSendData3;  
             -   //要发送的数   
 366   5      //            }
 367   5                  if(SendTestCFlag)   
 368   5                  {
 369   6                    if((SendTestCEnFlag)&&(IRSendEnFlag==0))
 370   6                    {           
 371   7                      gllIRSendData = gllTestIRSendData;
 372   7                      gllIRSendDataBak =  gllIRSendData;                    
 373   7                      gcIRSendStatus = 0;
 374   7                      gcIRSendDelayTime = 0;
 375   7                      IRSendDataBitCount = 0;
 376   7                      gcIRSendCount = 0;       //gcIRSendTestCCount;          //数据发送的次数
 377   7                      Set_IRSendEnFlag;          //使能信号发送                   
 378   7                    }
 379   6                    else
 380   6                    {
 381   7                      gcIRSendTestCTime++;
 382   7                      if (gcIRSendTestCTime >=50)
 383   7                      {
 384   8                        gcIRSendTestCTime = 0;
 385   8                        Set_SendTestCEnFlag;                
 386   8                      }
 387   7                    }
 388   6                }                  
 389   5            }
 390   4                break;
 391   4                default:
 392   4                  break;        
 393   4              } 
 394   3            }
 395   2            else               //用户模式下
 396   2            {
 397   3              if(SendSpeedOffCommandFlag)
 398   3              {
 399   4                if((SendSpeedOffEnFlag)&&(IRSendEnFlag==0))
 400   4                {
 401   5                  Set_FirstSendSpeedOffCommandFlag;
 402   5                  gllIRSendData = 0x5B9B1B; //  
 403   5                  gllIRSendDataBak = gllIRSendData;
 404   5      
 405   5                  gcIRSendStatus = 0;
 406   5                  gcIRSendDelayTime = 0;
 407   5                  IRSendDataBitCount = 0;
 408   5                  gcIRSendCount = gcIRSendSpeedOffCount;
 409   5                  Set_IRSendEnFlag;
 410   5                }
 411   4                else 
 412   4                {
 413   5                  gcIRSendSpeedOffTime++;
 414   5                  if (gcIRSendSpeedOffTime >= 100)
 415   5                  {
 416   6                    gcIRSendSpeedOffTime = 0;
 417   6                    Set_SendSpeedOffEnFlag;
 418   6                  }
 419   5                  
 420   5                }
 421   4              }
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 8   

 422   3              else
 423   3              {
 424   4                gcIRSendSpeedOffTime = SPEEDOFFTIME;
 425   4                gcIRSendSpeedOffCount = 0;
 426   4              }
 427   3              
 428   3              if(SendLightOnCommandFlag)
 429   3              {
 430   4                  if ((SendLightOnEnFlag)&&(IRSendEnFlag==0)) 
 431   4                    { 
 432   5                      Set_FirSendLightOnCommandFlag;
 433   5                      gllIRSendData =0x2BCB4B;   // 0x2D2C2B; // 210-211-212
 434   5                      gllIRSendDataBak = gllIRSendData;
 435   5      
 436   5                      gcIRSendStatus = 0;
 437   5                      gcIRSendDelayTime = 0;
 438   5                      IRSendDataBitCount = 0;
 439   5                      gcIRSendCount = gcIRSendLightOnCount;
 440   5                      Set_IRSendEnFlag;
 441   5        
 442   5                    }
 443   4                else
 444   4                  {
 445   5                    gcIRSendLightOnTime++;
 446   5                    if (gcIRSendLightOnTime >=100)
 447   5                    {
 448   6                      gcIRSendLightOnTime = 0;
 449   6                      Set_SendLightOnEnFlag;
 450   6                    }
 451   5                  }
 452   4              }
 453   3              else
 454   3              {
 455   4                gcIRSendLightOnTime = LIGHTONTIME;         //为了使其首次进入时立即发送.  
 456   4                gcIRSendLightOnCount = 0;
 457   4              }
 458   3              
 459   3              if(SendLightOffCommandFlag)
 460   3              {
 461   4                  if((SendLightOffEnFlag)&&(IRSendEnFlag==0)) 
 462   4                  {
 463   5                      Set_FirSendLightOffCommandFlag;
 464   5                      gllIRSendData = 0xEB6BAB; // 
 465   5                      gllIRSendDataBak = gllIRSendData;
 466   5      
 467   5                      gcIRSendStatus = 0;
 468   5                      gcIRSendDelayTime = 0;
 469   5                      IRSendDataBitCount = 0;
 470   5                      gcIRSendCount = gcIRSendLightOffCount; 
 471   5                      Set_IRSendEnFlag;
 472   5                  }
 473   4                  else
 474   4                  {
 475   5                    gcIRSendLightOffTime++;
 476   5                    if (gcIRSendLightOffTime >= 100)
 477   5                    {
 478   6                      gcIRSendLightOffTime = 0;
 479   6                      Set_SendLightOffEnFlag;
 480   6                    }
 481   5                  }
 482   4              }
 483   3              else
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 9   

 484   3              {
 485   4                gcIRSendLightOffTime = LIGHTOFFTIME;
 486   4                gcIRSendLightOffCount = 0;
 487   4              }
 488   3              
 489   3             if (SendSpeedCommandFlag)
 490   3              {
 491   4                if ((SendSpeedCommandEnFlag)&&(IRSendEnFlag==0))
 492   4                {
 493   5                      Set_FirstSendSpeedCommandFlag;
 494   5                      switch(gcSpeedLevel)
 495   5                      {
 496   6                          case 1:
 497   6                          {
 498   7                               gllIRSendData = 0x76B636; //  
 499   7                          }
 500   6                          break;
 501   6                          case 2:
 502   6                          {
 503   7                               gllIRSendData = 0x8E0EF6; //  
 504   7                          }
 505   6                          break;
 506   6                          case 3:
 507   6                          {
 508   7                               gllIRSendData = 0xC74787; //  
 509   7                          }
 510   6                          break;
 511   6                          case 4:
 512   6                          {
 513   7                               gllIRSendData = 0x2ECE4E; //
 514   7                          }
 515   6                          break;
 516   6                          default:
 517   6                              break;
 518   6                      }
 519   5                     
 520   5                      gllIRSendDataBak = gllIRSendData;
 521   5      
 522   5                      gcIRSendStatus = 0;
 523   5                      gcIRSendDelayTime = 0;
 524   5                      IRSendDataBitCount = 0;
 525   5                      gcIRSendCount = gcIRSendSpeedCommandCount;     
 526   5                      Set_IRSendEnFlag;
 527   5                }
 528   4                else
 529   4                {
 530   5                    gcIRSendSpeedCommandTime++;
 531   5                    if (gcIRSendSpeedCommandTime >= 100)
 532   5                    {
 533   6                      gcIRSendSpeedCommandTime = 0;
 534   6                      Set_SendSpeedCommandEnFlag;
 535   6                    }
 536   5                }
 537   4              }
 538   3              else
 539   3              {
 540   4                gcIRSendSpeedCommandTime =  SPEEDCOMMANDTIME;
 541   4                gcIRSendSpeedCommandCount = 0;          
 542   4              }
 543   3            }
 544   2              if (gcSleepDelayTime < 100)
 545   2              {
C51 COMPILER V9.60.0.0   OUTPUT_PROCESS                                                    01/06/2023 09:30:58 PAGE 10  

 546   3                gcSleepDelayTime++;
 547   3                
 548   3              }
 549   2           
 550   2              if ((SendLightOnCommandFlag == 0) &&(SendLightOffCommandFlag == 0) &&(SendSpeedOffCommandFlag == 0) &&
             -(SendSpeedCommandFlag == 0)&&(gcSleepDelayTime == 100)&&(BatLowWarrnFlag == 0)&&(AllHodCloseFlag == 0)&&(TestONFlag == 0
             -))
 551   2              {     
 552   3                gcSleepDelayTime = 101;
 553   3                Set_AllDataSendEndFlag;       //所有命令发送完成之后，允许睡眠
 554   3                Set_SleepEnFlag;
 555   3              }  
 556   2              
 557   2           }// end else
 558   1      
 559   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1805    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     33    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
