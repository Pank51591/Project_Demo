C51 COMPILER V9.60.0.0   ADC_PROCESS                                                       01/06/2023 09:30:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADC_PROCESS
OBJECT MODULE PLACED IN ..\Output\ADC_Process.obj
COMPILER INVOKED BY: D:\Program Fails\Keil_v5\C51\BIN\C51.EXE ..\User\Funtion\ADC_Process.c LARGE OBJECTADVANCED OPTIMIZ
                    -E(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKey_Lib
                    -) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\ADC_Process.lst) TABS(2) OBJECT(..\Output\ADC_Process.obj)

line level    source

   1          #include "SC_System.h"
   2           void SC_ADC_EXIRChange(uint8_t ADC_CHANNEL9_NUM);
   3           void SC_ADC_BatChange(uint8_t ADC_CHANNEL1_NUM);
   4           void SC_ADC1_Multichannal();
   5           void SC_ADC9_Multichannal();
   6          
   7          extern uint8_t gcBurner1OpenCount;
   8          extern uint8_t gcBurner1CloseCount;
   9          
  10          extern uint8_t gcBurner2OpenCount;
  11          extern uint8_t gcBurner2CloseCount;
  12          
  13          extern uint8_t gcBurner3OpenCount;
  14          extern uint8_t gcBurner3CloseCount;
  15          
  16          extern uint8_t gcBurner4OpenCount;
  17          extern uint8_t gcBurner4CloseCount;
  18          
  19          extern uint8_t gcBurner5OpenCount;
  20          extern uint8_t gcBurner5CloseCount;
  21          
  22          extern uint8_t gcBurner6OpenCount;
  23          extern uint8_t gcBurner6CloseCount;
  24          
  25          extern uint8_t gcBurnerStatus;
  26          extern uint8_t gcBurnerOpenCount;
  27          
  28          extern uint8_t gcKeyStatus;
  29          extern uint8_t gcKeyCount;
  30          extern uint8_t gcOneMsCount;
  31          extern uint32_t gcButton1State;
  32          extern uint8_t gcKeyValue;
  33          extern uint16_t giKeySW6LongDownTime;
  34          extern uint8_t gcBuzzerTime;
  35          
  36          extern uint32_t gllIRAdcSumValue;
  37          extern uint16_t giIRADCValue;
  38          extern uint8_t gcIRADCCount;
  39          
  40          extern volatile uint8_t gcADCDelayTime;
  41          uint32_t gllBatAdcSumValue = 0;
  42          uint16_t giBatValue = 0;
  43          uint8_t gcBatAdcCount = 0;
  44          uint16_t giADCValue = 0;
  45          uint8_t gcBatLowCount = 0;
  46          
  47          void Delay_Time(uint16_t Count)
  48          {
  49   1          uint16_t i = 0;
  50   1          for (i = 0; i < Count; i++)
  51   1          {
  52   2              //        asm("NOP");
  53   2          }
C51 COMPILER V9.60.0.0   ADC_PROCESS                                                       01/06/2023 09:30:57 PAGE 2   

  54   1      }
  55          
  56          void ADC_ExtIR_Check(void)    /* 上电检查 */
  57          {
  58   1          uint8_t i = 0;
  59   1          Set_ExternalIR_Send1;
  60   1        
  61   1            Delay1ms(); 
  62   1            Delay1ms(); 
  63   1            Delay1ms();   
  64   1            Delay1ms();   
  65   1            Delay1ms();
  66   1            Delay1ms(); 
  67   1            Delay1ms(); 
  68   1            Delay1ms(); 
  69   1            Delay1ms(); 
  70   1            Delay1ms();
  71   1          SC_ADC_EXIRChange(4);     /* ADC转换函数  上电默认是第九通道启动，直接转换即可 *
             -/
  72   1        
  73   1          if ((giIRADCValue > EXTIR_ADC_MIN_VALUE)&&(giIRADCValue < EXTIR_ADC_MAX_VALUE))
  74   1          {
  75   2            Set_ExtIRFlag;
  76   2          }
  77   1          else
  78   1          {
  79   2            Clr_ExtIRFlag;
  80   2          }
  81   1          /*
  82   1          if (giIRADCValue >= EXTIR_ADC_VALUE)
  83   1          {
  84   1              Clr_ExtIRFlag;
  85   1          }
  86   1          else
  87   1          {
  88   1              Set_ExtIRFlag;
  89   1          }*/
  90   1          Clr_ExternalIR_Send;
  91   1          
  92   1          Set_BAT_EN; /* 打开电池检测的三极管管脚 */
  93   1          SC_ADC1_Multichannal();
  94   1          SC_ADC_BatChange(4);
  95   1          Clr_ExternalIR_Send;
  96   1      }
  97          
  98          
  99          void ADC_Process(void)
 100          {
 101   1          Set_BAT_EN; /* 打开电池检测的三极管管脚 */
 102   1        
 103   1          SC_ADC1_Multichannal();  /* 先切换通道再转化 */
 104   1          SC_ADC_BatChange(16);    /*切换转换出值 */
 105   1        
 106   1          if (BatLowWarrnEnFlag)
 107   1          {
 108   2            if (giBatValue < VOL_LOW_VALUE)       //360
 109   2            {
 110   3              gcBatLowCount ++;
 111   3              if (gcBatLowCount >= 200)
 112   3              {
 113   4                gcBatLowCount = 0;
 114   4                if(gcBurnerStatus != 0)    //&&(TestONFlag == 0))      //有炉头开启
C51 COMPILER V9.60.0.0   ADC_PROCESS                                                       01/06/2023 09:30:57 PAGE 3   

 115   4                {                       
 116   5                  Set_BatLowWarrnFlag;
 117   5                }
 118   4                
 119   4              }
 120   3              
 121   3            }
 122   2            else        //清零之后，低电压报警就不会误判
 123   2              {
 124   3                gcBatLowCount = 0;
 125   3              }
 126   2          }
 127   1          
 128   1      }
 129          
 130          /* -----ADC转换函数------- */
 131          /* ===ADC_CHANNEL_NUM是转换次数============= */
 132          void SC_ADC_EXIRChange(uint8_t ADC_CHANNEL9_NUM)
 133          {
 134   1          uint8_t i;
 135   1          gllIRAdcSumValue = 0;
 136   1          giADCValue = 0;
 137   1          for (i = 0; i < ADC_CHANNEL9_NUM; i++)
 138   1          {
 139   2              ADCCON |= 0x40; //开始ADC转换
 140   2              while (!(ADCCON & 0x20));
 141   2              //等待标志位（不同的型号该寄存器的标志位不同，需要该，下一句同样）
 142   2              ADCCON &= 0xDF; //清标志位
 143   2              giADCValue = (ADCVH << 4) + (ADCVL >> 4);
 144   2              gllIRAdcSumValue += giADCValue;
 145   2          }
 146   1          giIRADCValue = gllIRAdcSumValue / ADC_CHANNEL9_NUM;   //返回数值
 147   1      }
 148          
 149          void SC_ADC_BatChange(uint8_t ADC_CHANNEL1_NUM)
 150          {
 151   1          uint8_t i;
 152   1          giADCValue=0;//
 153   1          gllBatAdcSumValue=0;
 154   1          for (i = 0; i < ADC_CHANNEL1_NUM; i++)
 155   1          {
 156   2              ADCCON |= 0x40; //开始ADC转换
 157   2              while (!(ADCCON & 0x20));
 158   2              //等待标志位（不同的型号该寄存器的标志位不同，需要该，下一句同样）
 159   2              ADCCON &= 0xDF; //清标志位
 160   2              giADCValue = (ADCVH << 4) + (ADCVL >> 4);
 161   2              gllBatAdcSumValue += giADCValue;
 162   2          }
 163   1          giBatValue = gllBatAdcSumValue / ADC_CHANNEL1_NUM; //返回数值
 164   1          /* >16次  gllBatAdcSumValue是否要清零*/
 165   1      }
 166          
 167          
 168          /* -------ADC双通道轮流切换---------- */
 169          void SC_ADC1_Multichannal()
 170          {
 171   1          ADC_Cmd(ENABLE);
 172   1          ADC_ChannelConfig(ADC_CHANNEL_1, ENABLE); /* 切换AIN 1 */
 173   1          /* 转换出BAT_VOL值 */
 174   1      }
 175          
 176          void SC_ADC9_Multichannal()
C51 COMPILER V9.60.0.0   ADC_PROCESS                                                       01/06/2023 09:30:57 PAGE 4   

 177          {
 178   1          ADC_Cmd(ENABLE);
 179   1          ADC_ChannelConfig(ADC_CHANNEL_9, ENABLE); /*切换AIN 9 */
 180   1          /* 转换出值IR值 */
 181   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    531    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
