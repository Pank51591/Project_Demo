C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SC95F_PWM
OBJECT MODULE PLACED IN ..\Output\sc95f_pwm.obj
COMPILER INVOKED BY: D:\Program Fails\Keil_v5\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_pwm.c LARGE OBJECTADVANCED OP
                    -TIMIZE(9,SIZE) BROWSE INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\User\Funtion;..\SOC_DebugTouchKey_Lib;..\SOC_DebugTouchKe
                    -y_Lib) DEFINE(SC95F8x1xB) DEBUG PRINT(..\List\sc95f_pwm.lst) TABS(2) OBJECT(..\Output\sc95f_pwm.obj)

line level    source

   1          //************************************************************
   2          //  Copyright (c) 深圳市赛元微电子有限公司
   3          //  文件名称  : sc95f_pwm.c
   4          //  作者    :
   5          //  模块功能  : PWM固件库函数C文件
   6          //  最后更正日期: 2022/01/07
   7          //  版本    : V1.10010
   8          //  说明        :该文件仅适用于SC95F系列芯片
   9          //*************************************************************
  10          
  11          #include "sc95f_pwm.h"
  12          //PWM2/3/4与TIM2/3/4共用寄存器
  13          #include "sc95f_timer2.h"
  14          #include "sc95f_timer3.h"
  15          #include "sc95f_timer4.h"
  16          
  17          #if defined(SC95F8x1x) || defined(SC95F7x1x)
              uint16_t xdata PWMREG[8] _at_ 0x1040;              //PWM占空比调节寄存器
              uint16_t pwm_tmpreg[8] = {0, 0, 0, 0, 0, 0, 0, 0}; //PWM占空比调节寄存器缓存数组
              
              /**************************************************
              *函数名称:void PWM_DeInit(void)
              *函数功能:PWM相关寄存器复位至缺省值
              *入口参数:void
              *出口参数:void
              **************************************************/
              void PWM_DeInit(void)
              {
                static uint8_t i;
                PWMCON = 0X00;
                PWMCFG = 0;
                PWMCON = 0;
                PWMFLT = 0X00;
                PWMDFR = 0X00;
                IE1 &= 0XFD;
                IP1 &= 0XFD;
              
                for (i = 0; i < 8; i++)
                {
                  PWMREG[i] = 0;
                }
              }
              
              /**************************************************
              *函数名称:void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              *函数功能:PWM初始化配置函数
              *入口参数:
              PWM_PresSel_TypeDef:PWM_PresSel:预分频选择
              uint16_t:PWM_Period:PWM周期配置
              *出口参数:void
              **************************************************/
              void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              {
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 2   

                PWM_Period -= 1;
                PWMCFG = (PWMCFG & 0XCF) | PWM_PresSel;                 //预分频
                PWMCFG = (PWMCFG & 0XF0) | (uint8_t)(PWM_Period / 256); //周期高4位
                PWMCON = (uint8_t)(PWM_Period & 0X00FF);                //周期低8位
              }
              
              /**************************************************
              *函数名称:void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
              *函数功能:PWMx输出使能/失能配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_OutputState_TypeDef:PWM_OutputState:PWM输出状态配置
              *出口参数:void
              **************************************************/
              void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
              {
                uint8_t i;
              
                for (i = 0; i < 8; i++)
                {
                  if (PWM_OutputPin & (0x01 << i))
                  {
                    if (PWM_OutputState == PWM_OUTPUTSTATE_DISABLE)
                    {
                      pwm_tmpreg[i] &= 0X7FFF;
                    }
                    else
                    {
                      pwm_tmpreg[i] |= 0X8000;
                    }
              
                    PWMREG[i] = pwm_tmpreg[i];
                  }
                }
              }
              
              /**************************************************
              *函数名称:void PWM_PolarityConfig(uint8_t PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
              *函数功能:PWMx正/反向输出配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_Polarity_TypeDef:PWM_Polarity:PWM输出正/反向配置
              *出口参数:void
              **************************************************/
              void PWM_PolarityConfig(uint8_t PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
              {
                uint8_t i;
              
                for (i = 0; i < 8; i++)
                {
                  if (PWM_OutputPin & (0x01 << i))
                  {
                    if (PWM_Polarity == PWM_POLARITY_NON_INVERT)
                    {
                      pwm_tmpreg[i] &= 0XBFFF;
                    }
                    else
                    {
                      pwm_tmpreg[i] |= 0X4000;
                    }
              
                    PWMREG[i] = pwm_tmpreg[i];
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 3   

                  }
                }
              }
              
              /**************************************************
              *函数名称:void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
              *函数功能:PWMx独立工作模式配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx独立通道选择
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
              {
                uint8_t i;
              
                for (i = 0; i < 8; i++)
                {
                  if (PWM_OutputPin & (0x01 << i))
                  {
                    pwm_tmpreg[i] = pwm_tmpreg[i] & 0XF000 | PWM_DutyCycle;
                    PWMREG[i] = pwm_tmpreg[i];
                  }
                }
              }
              /**************************************************
              *函数名称:void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin, 
             -uint16_t PWM_DutyCycle)
              *函数功能:PWMxPWMy互补工作模式配置函数
              *入口参数:
              PWM_ComplementaryOutputPin_TypeDef:PWM_ComplementaryOutputPin:PWMxPWMy互补通道选择
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin,
                                               uint16_t PWM_DutyCycle)
              {
                PWMCON = 0X08;
              
                switch (PWM_ComplementaryOutputPin) //设置占空比
                {
                case PWM40PWM41:
                  PWMREG[PWM40PWM41] = (PWMREG[PWM40PWM41] & 0XC000) | PWM_DutyCycle;
                  break;
              
                case PWM42PWM43:
                  PWMREG[PWM42PWM43] = (PWMREG[PWM42PWM43] & 0XC000) | PWM_DutyCycle;
                  break;
              
                case PWM50PWM51:
                  PWMREG[PWM50PWM51] = (PWMREG[PWM50PWM51] & 0XC000) | PWM_DutyCycle;
                  break;
              
                case PWM52PWM53:
                  PWMREG[PWM52PWM53] = (PWMREG[PWM52PWM53] & 0XC000) | PWM_DutyCycle;
                  break;
              
                default:
                  break;
                }
              }
              
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 4   

              /**************************************************
              *函数名称:void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTime)
              *函数功能:PWM互补工作模式下死区时间配置函数
              *入口参数:
              uint8_t:PWM_RisingDeadTime:PWM死区上升时间00-FF
              uint8_t:PWM_FallingDeadTime:PWM死区下降时间00-FF
              *出口参数:void
              **************************************************/
              void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTime)
              {
                PWMDFR = (PWM_RisingDeadTime | (PWM_FallingDeadTime << 4));
              }
              
              /*****************************************************
              *函数名称:void PWM_Cmd(FunctionalState NewState)
              *函数功能:PWM功能开关函数
              *入口参数:
              FunctionalState:NewState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void PWM_Cmd(FunctionalState NewState)
              {
                if (NewState != DISABLE)
                {
                  PWMCFG |= 0X80;
                }
                else
                {
                  PWMCFG &= 0X7F;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
              *函数功能:PWM中断初始化
              *入口参数:
              FunctionalState:NewState:中断使能/关闭选择
              PriorityStatus:Priority:中断优先级选择
              *出口参数:void
              *****************************************************/
              void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
              {
                if (NewState != DISABLE)
                {
                  IE1 |= 0X02;
                }
                else
                {
                  IE1 &= 0XFD;
                }
              
                if (Priority == LOW)
                {
                  IP1 &= ~0X02;
                }
                else
                {
                  IP1 |= 0X02;
                }
              }
              
              /*****************************************************
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 5   

              *函数名称:FlagStatus PWM_GetFlagStatus(void)
              *函数功能:获得PWM中断标志状态
              *入口参数:void
              *出口参数:
              FlagStatus:PWM中断标志状态
              *****************************************************/
              FlagStatus PWM_GetFlagStatus(void)
              {
                return (bool)(PWMCFG & 0X40);
              }
              
              /*****************************************************
              *函数名称:void PWM_ClearFlag(void)
              *函数功能:清除PWM中断标志状态
              *入口参数:void
              *出口参数:void
              *****************************************************/
              void PWM_ClearFlag(void)
              {
                PWMCFG &= 0XBF;
              }
              
              /*****************************************************
              *函数名称:FlagStatus PWM_GetFaultDetectionFlagStatus(void)
              *函数功能:获得PWM故障检测标志位状态
              *入口参数:void
              *出口参数:
              FlagStatus:PWM故障检测标志位状态
              *****************************************************/
              FlagStatus PWM_GetFaultDetectionFlagStatus(void)
              {
                return (bool)(PWMFLT & 0X40);
              }
              
              /*****************************************************
              *函数名称:void PWM_ClearFaultDetectionFlag(void)
              *函数功能:清除PWM故障检测标志位状态   // ！注意,处于锁存模式下，此位可软件清除
              *入口参数:void
              *出口参数:void
              *****************************************************/
              void PWM_ClearFaultDetectionFlag(void)
              {
                PWMFLT &= 0XBF;
              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionFunctionConfig(FunctionalState NewState)
              *函数功能:PWM故障检测功能开启/关闭
              *入口参数:
              FunctionalState:NewState:故障检测功能开启/关闭
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionConfig(FunctionalState NewState)
              {
                if (NewState != DISABLE)
                {
                  PWMFLT |= 0X80;
                }
                else
                {
                  PWMFLT &= 0X7F;
                }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 6   

              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionModeConfig(PWM_FaultDetectionMode_TypeDef FaultDetectionMode, PWM_FaultDe
             -tectionVoltageSelect_TypeDef FaultDetectionVoltageSelect, PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWave
             -FilteringTime)
              *函数功能:PWM故障检测模式设置
              *入口参数:
              PWM_FaultDetectionMode_TypeDef:FaultDetectionMode:故障检测功能模式设置:立即模式/锁存模式
              PWM_FaultDetectionVoltageSelect_TypeDef:FaultDetectionVoltageSelect:故障检测电平选择
              PWM_FaultDetectionWaveFilteringTime_TypeDef:FaultDetectionWaveFilteringTime:故障检测输入信号滤波时间选择
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionModeConfig(PWM_FaultDetectionMode_TypeDef FaultDetectionMode,
                                                PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect,
                                                PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWaveFilteringT
             -ime)
              {
                PWMFLT = (PWMFLT & 0XC0) | FaultDetectionMode | FaultDetectionVoltageSelect |
                         FaultDetectionWaveFilteringTime;
              }
              
              /*****************************************************
              *函数名称:void PWM_Aligned_Mode_Select(void)
              *函数功能:选择PWM的对齐模式
              *入口参数:
              PWM_Aligned_Mode_TypeDef:PWM_Aligned_Mode:选择对齐模式
              *出口参数:void
              *****************************************************/
              void PWM_Aligned_Mode_Select(PWM_Aligned_Mode_TypeDef PWM_Aligned_Mode)
              {
                if (PWM_Aligned_Mode == PWM_Edge_Aligned_Mode)
                {
                  PWMCON &= 0XFB;
                }
                else if (PWM_Aligned_Mode == PWM_Center_Alignment_Mode)
                {
                  PWMCON |= 0X04;
                }
              }
              #endif
 339          
 340          #if defined(SC95F8x2x) || defined(SC95F7x2x)
              unsigned int xdata PDT[8] _at_ 0x1040;
              
              /**************************************************
              *函数名称:void PWM_DeInit(void)
              *函数功能:PWM相关寄存器复位至缺省值
              *入口参数:void
              *出口参数:void
              **************************************************/
              void PWM_DeInit(void)
              {
                PWMCFG = 0X00;
                PWMCON0 = 0X00;
                PWMCON1 = 0X00;
                PWMPDL = 0X00;
                PWMPDH = 0X00;
                PWMFLT = 0X00;
                PWMDFR = 0X00;
              
                IE1 &= ~0X02;
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 7   

                IP1 &= ~0X02;
              }
              
              /**************************************************
              *函数名称:void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              *函数功能:PWM初始化配置函数
              *入口参数:
              PWM_PresSel_TypeDef:PWM_PresSel:预分频选择
              uint16_t:PWM_Period:PWM周期配置
              *出口参数:void
              **************************************************/
              void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              {
                PWM_Period -= 1;
                PWMCON0 &= 0XCF;
                PWMCON0 |= PWM_PresSel;    //预分频
                PWMPDL = PWM_Period;       //周期低八位
                PWMPDH = PWM_Period / 256; //周期高八位
              }
              
              /**************************************************
              *函数名称:void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
              *函数功能:PWMx输出使能/失能配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_OutputState_TypeDef:PWM_OutputState:PWM输出状态配置
              *出口参数:void
              **************************************************/
              void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
              {
                if (PWM_OutputState == PWM_OUTPUTSTATE_ENABLE)
                {
                  PWMCON1 |= PWM_OutputPin;
                }
                else
                {
                  PWMCON1 &= (~PWM_OutputPin);
                }
              }
              
              /**************************************************
              *函数名称:void PWM_PolarityConfig(uint8_t PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
              *函数功能:PWMx正/反向输出配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_Polarity_TypeDef:PWM_Polarity:PWM输出正/反向配置
              *出口参数:void
              **************************************************/
              void PWM_PolarityConfig(uint8_t PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
              {
                if (PWM_Polarity == PWM_POLARITY_INVERT)
                {
                  PWMCFG |= PWM_OutputPin;
                }
                else
                {
                  PWMCFG &= (~PWM_OutputPin);
                }
              }
              
              /**************************************************
              *函数名称:void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 8   

              *函数功能:PWMx独立工作模式配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx独立通道选择
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
              {
                PWMCON0 &= 0XFD; //设置PWM为独立模式
              
                switch (PWM_OutputPin) //设置占空比
                {
                case PWM0:
                  PDT[0] = PWM_DutyCycle;
                  break;
              
                case PWM1:
                  PDT[1] = PWM_DutyCycle;
                  break;
              
                case PWM2:
                  PDT[2] = PWM_DutyCycle;
                  break;
              
                case PWM3:
                  PDT[3] = PWM_DutyCycle;
                  break;
              
                case PWM4:
                  PDT[4] = PWM_DutyCycle;
                  break;
              
                case PWM5:
                  PDT[5] = PWM_DutyCycle;
                  break;
              
                case PWM6:
                  PDT[6] = PWM_DutyCycle;
                  break;
              
                case PWM7:
                  PDT[7] = PWM_DutyCycle;
                  break;
              
                default:
                  break;
                }
              }
              
              /**************************************************
              *函数名称:void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin, 
             -uint16_t PWM_DutyCycle)
              *函数功能:PWMxPWMy互补工作模式配置函数
              *入口参数:
              PWM_ComplementaryOutputPin_TypeDef:PWM_ComplementaryOutputPin:PWMxPWMy互补通道选择
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin,
                                               uint16_t PWM_DutyCycle)
              {
                PWMCON0 |= 0X02; //设置PWM为互补模式
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 9   

              
                switch (PWM_ComplementaryOutputPin) //设置占空比
                {
                case PWM0PWM1:
                  PDT[0] = PWM_DutyCycle;
                  break;
              
                case PWM2PWM3:
                  PDT[2] = PWM_DutyCycle;
                  break;
              
                case PWM4PWM5:
                  PDT[4] = PWM_DutyCycle;
                  break;
              
                case PWM6PWM7:
                  PDT[6] = PWM_DutyCycle;
                  break;
              
                default:
                  break;
                }
              }
              
              /**************************************************
              *函数名称:void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_fallingDeadTime)
              *函数功能:PWM互补工作模式下死区时间配置函数
              *入口参数:
              uint8_t:PWM_RisingDeadTime:PWM死区上升时间
              uint8_t:PWM_fallingDeadTime:PWM死区下降时间
              *出口参数:void
              **************************************************/
              void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_fallingDeadTime)
              {
                PWMDFR = (PWM_RisingDeadTime | (PWM_fallingDeadTime << 4));
              }
              
              /*****************************************************
              *函数名称:void PWM_Cmd(FunctionalState NewState)
              *函数功能:PWM功能开关函数
              *入口参数:
              FunctionalState:NewState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void PWM_Cmd(FunctionalState NewState)
              {
                if (NewState != DISABLE)
                {
                  PWMCON0 |= 0X80;
                }
                else
                {
                  PWMCON0 &= ~0X80;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
              *函数功能:PWM中断初始化
              *入口参数:
              FunctionalState:NewState:中断使能/关闭选择
              PriorityStatus:Priority:中断优先级选择
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 10  

              *出口参数:void
              *****************************************************/
              void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
              {
                if (NewState != DISABLE)
                {
                  IE1 |= 0X02;
                }
                else
                {
                  IE1 &= 0XFD;
                }
              
                if (Priority == LOW)
                {
                  IP1 &= 0XFD;
                }
                else
                {
                  IP1 |= 0X02;
                }
              }
              
              /*****************************************************
              *函数名称:FlagStatus PWM_GetFlagStatus(void)
              *函数功能:获得PWM中断标志状态
              *入口参数:void
              *出口参数:
              FlagStatus:PWM中断标志状态
              *****************************************************/
              FlagStatus PWM_GetFlagStatus(void)
              {
                return (bool)(PWMCON0 & 0X40);
              }
              
              /*****************************************************
              *函数名称:void PWM_ClearFlag(void)
              *函数功能:清除PWM中断标志状态
              *入口参数:void
              *出口参数:void
              *****************************************************/
              void PWM_ClearFlag(void)
              {
                PWMCON0 &= 0XBF;
              }
              /*****************************************************
              *函数名称:void PWM_Aligned_Mode_Select(void)
              *函数功能:选择PWM的对齐模式
              *入口参数:
              PWM_Aligned_Mode_TypeDef:PWM_Aligned_Mode:选择对齐模式
              *出口参数:void
              *****************************************************/
              void PWM_Aligned_Mode_Select(PWM_Aligned_Mode_TypeDef PWM_Aligned_Mode)
              {
                if (PWM_Aligned_Mode == PWM_Edge_Aligned_Mode)
                {
                  PWMCON0 &= 0XFE;
                }
                else if (PWM_Aligned_Mode == PWM_Center_Alignment_Mode)
                {
                  PWMCON0 |= 0X01;
                }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 11  

              }
              
              /*****************************************************
              *函数名称:FlagStatus PWM_GetFaultDetectionFlagStatus(void)
              *函数功能:获得PWM故障检测标志位状态
              *入口参数:void
              *出口参数:
              FlagStatus:PWM故障检测标志位状态
              *****************************************************/
              FlagStatus PWM_GetFaultDetectionFlagStatus(void)
              {
                return (bool)(PWMFLT & 0X40);
              }
              
              /*****************************************************
              *函数名称:void PWM_ClearFaultDetectionFlag(void)
              *函数功能:清除PWM故障检测标志位状态   // ！注意,处于锁存模式下，此位可软件清除
              *入口参数:void
              *出口参数:void
              *****************************************************/
              void PWM_ClearFaultDetectionFlag(void)
              {
                PWMFLT &= 0XBF;
              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionFunctionConfig(FunctionalState NewState)
              *函数功能:PWM故障检测功能开启/关闭
              *入口参数:
              FunctionalState:NewState:故障检测功能开启/关闭
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionConfig(FunctionalState NewState)
              {
                if (NewState != DISABLE)
                {
                  PWMFLT |= 0X80;
                }
                else
                {
                  PWMFLT &= 0X7F;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionModeConfig(PWM_FaultDetectionMode_TypeDef FaultDetectionMode, PWM_FaultDe
             -tectionVoltageSelect_TypeDef FaultDetectionVoltageSelect, PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWave
             -FilteringTime)
              *函数功能:PWM故障检测模式设置
              *入口参数:
              PWM_FaultDetectionMode_TypeDef:FaultDetectionMode:故障检测功能模式设置:立即模式/锁存模式
              PWM_FaultDetectionVoltageSelect_TypeDef:FaultDetectionVoltageSelect:故障检测电平选择
              PWM_FaultDetectionWaveFilteringTime_TypeDef:FaultDetectionWaveFilteringTime:故障检测输入信号滤波时间选择
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionModeConfig(PWM_FaultDetectionMode_TypeDef FaultDetectionMode,
                                                PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect,
                                                PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWaveFilteringT
             -ime)
              {
                PWMFLT = (PWMFLT & 0XC0) | FaultDetectionMode | FaultDetectionVoltageSelect |
                         FaultDetectionWaveFilteringTime;
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 12  

              }
              #endif
 668          
 669          #if defined(SC95FWxx)
              uint8_t xdata PWMREG[80] _at_ 0x1000; //PWM占空比调节寄存器
              /**************************************************
              *函数名称:void PWM_DeInit(void)
              *函数功能:PWM相关寄存器复位至缺省值
              *入口参数:void
              *出口参数:void
              **************************************************/
              void PWM_DeInit(void)
              {
                static uint8_t i;
                PWMCON0 = 0X00;
                PWMCON0 = 0X00;
                PWMCFG1 = 0X00;
                PWMCON1 = 0X00;
                IE1 &= 0XFD;
                IP1 &= 0XFD;
              
                for (i = 0; i < 80; i++)
                {
                  PWMREG[i] = 0;
                }
              }
              
              /**************************************************
              *函数名称:PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              *函数功能:PWM初始化配置函数
              *入口参数:  
              PWM_PresSel_TypeDef:PWM_PresSel:预分频选择
              uint16_t:PWM_Period:PWM周期配置
              *出口参数:void
              **************************************************/
              void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
              {
                if ((PWM_PresSel & 0X0F) == PWM0_Type)
                {
                  PWM_Period -= 1;
                  PWMCFG0 = (PWMCON0 & 0XCF) | (PWM_PresSel & 0XF0);        //预分频
                  PWMCFG0 = (PWMCON0 & 0XF0) | (uint8_t)(PWM_Period / 256); //周期高4位
                  PWMCON0 = (uint8_t)(PWM_Period & 0X00FF);                 //周期低8位
                }
                else if ((PWM_PresSel & 0X0F) == PWM1_Type)
                {
                  PWM_Period -= 1;
                  PWMCFG1 = (PWMCFG1 & 0XCF) | (PWM_PresSel & 0XF0);        //预分频
                  PWMCFG1 = (PWMCFG1 & 0XF0) | (uint8_t)(PWM_Period / 256); //周期高4位
                  PWMCON1 = (uint8_t)PWM_Period;                            //周期低8位
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_Aligned_Mode_Select(void)
              *函数功能:选择PWM的对齐模式
              *入口参数:
              PWM_Aligned_Mode_TypeDef:PWM_Aligned_Mode:选择对齐模式
              *出口参数:void
              *****************************************************/
              void PWM_Aligned_Mode_Select(PWM_Aligned_Mode_TypeDef PWM_Aligned_Mode)
              {
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 13  

              
                //PWM0选择对齐模式配置
                if (PWM_Aligned_Mode == PWM0_Edge_Aligned_Mode)
                {
                  PWMMOD &= 0XFE;
                }
                else if (PWM_Aligned_Mode == PWM0_Center_Alignment_Mode)
                {
                  PWMMOD |= 0X01;
                }
                //PWM1选择对齐模式配置
                else if (PWM_Aligned_Mode == PWM1_Edge_Aligned_Mode)
                {
                  PWMMOD &= 0XFB;
                }
                else if (PWM_Aligned_Mode == PWM1_Center_Alignment_Mode)
                {
                  PWMMOD |= 0X04;
                }
              }
              
              /**************************************************
              *函数名称:void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
              *函数功能:PWMx输出使能/失能配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_OutputState_TypeDef:PWM_OutputState:PWM输出状态配置
              *出口参数:void
              **************************************************/
              void PWM_OutputStateConfig(uint8_t PWM_OutputPin,
                                         PWM_OutputState_TypeDef PWM_OutputState)
              {
                if (PWM_OutputState == ENABLE)
                {
                  PWMREG[PWM_OutputPin] |= 0x80;
                }
                else
                {
                  PWMREG[PWM_OutputPin] &= 0x7F;
                }
              }
              
              /**************************************************
              *函数名称:void PWM_PolarityConfig(PWM_OutputPin_TypeDef PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
              *函数功能:PWMx正/反向输出配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
              PWM_Polarity_TypeDef:PWM_Polarity:PWM输出正/反向配置
              *出口参数:void
              **************************************************/
              void PWM_PolarityConfig(uint8_t PWM_OutputPin,
                                      PWM_Polarity_TypeDef PWM_Polarity)
              {
                if (PWM_Polarity == PWM_POLARITY_INVERT)
                {
                  PWMREG[PWM_OutputPin] |= 0x40;
                }
                else
                {
                  PWMREG[PWM_OutputPin] &= 0xBF;
                }
              }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 14  

              
              /**************************************************
              *函数名称:void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
              *函数功能:PWMx独立工作模式配置函数
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx独立通道选择（uint8_t作为入参，方便进行位或操作）
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
              {
                PWMREG[PWM_OutputPin + 1] = PWM_DutyCycle;
                PWMREG[PWM_OutputPin] = (PWMREG[PWM_OutputPin] & 0xF0) | (PWM_DutyCycle / 256);
              }
              
              /**************************************************
              *函数名称:void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin, 
             -uint16_t PWM_DutyCycle)
              *函数功能:PWMxPWMy互补工作模式配置函数
              *入口参数:
              PWM_ComplementaryOutputPin_TypeDef:PWM_ComplementaryOutputPin:PWMxPWMy互补通道选择
              uint16_t:PWM_DutyCycle:PWM占空比配置
              *出口参数:void
              **************************************************/
              void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin,
                                               uint16_t PWM_DutyCycle)
              {
                PWMMOD |= 0X08;
                PWMREG[PWM40 + PWM_ComplementaryOutputPin * 2 + 1] = PWM_DutyCycle;
                PWMREG[PWM40 + PWM_ComplementaryOutputPin * 2] = (PWMREG[PWM40 + PWM_ComplementaryOutputPin * 2] & 0xF0)
             - | (PWM_DutyCycle / 256);
              }
              
              /**************************************************
              *函数名称:void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTime)
              *函数功能:PWM互补工作模式下死区时间配置函数
              *入口参数:
              uint8_t:PWM_RisingDeadTime:PWM死区上升时间   00-FF
              uint8_t:PWM_FallingDeadTime:PWM死区下降时间  00-FF
              *出口参数:void
              **************************************************/
              void PWM_DeadTimeConfig(uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTime)
              {
                PWMDFR1 = (PWM_RisingDeadTime | (PWM_FallingDeadTime << 4));
              }
              
              /**************************************************
              *函数名称:void PWM_DeadTimeConfigEX(PWM_Type_TypeDef PWM_Type, uint8_t PWM_RisingDeadTime, uint8_t PWM_fal
             -lingDeadTime)
              *函数功能:PWM互补工作模式下死区时间配置函数
              *入口参数:
              PWM_Type_TypeDef:PWM_Type:PWM类型选择
              uint8_t:PWM_RisingDeadTime:PWM死区上升时间   00-FF
              uint8_t:PWM_FallingDeadTime:PWM死区下降时间  00-FF
              *出口参数:void
              **************************************************/
              void PWM_DeadTimeConfigEX(PWM_Type_TypeDef PWM_Type, uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTi
             -me)
              {
                if (PWM_Type == PWM1_Type)
                {
                  PWMDFR1 = (PWM_RisingDeadTime | (PWM_FallingDeadTime << 4));
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 15  

                }
              }
              
              /*****************************************************
              *函数名称:void PWM_Cmd(PWM_Type_TypeDef PWM_Type,FunctionalState NewState)
              *函数功能:PWM功能开关函数
              *入口参数:
              PWM_Type_TypeDef:PWM_Type:PWM类型
              FunctionalState:NewState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void PWM_CmdEX(PWM_Type_TypeDef PWM_Type,
                             FunctionalState NewState)
              {
                if (PWM_Type == PWM0_Type)
                {
                  if (NewState != DISABLE)
                  {
                    PWMCFG0 |= 0X80;
                  }
                  else
                  {
                    PWMCFG0 &= 0X7F;
                  }
                }
                else if (PWM_Type == PWM1_Type)
                {
                  if (NewState != DISABLE)
                  {
                    PWMCFG1 |= 0X80;
                  }
                  else
                  {
                    PWMCFG1 &= 0X7F;
                  }
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
              *函数功能:PWM中断初始化
              *入口参数:
              FunctionalState:NewState:中断使能/关闭选择
              PriorityStatus:Priority:中断优先级选择
              *出口参数:void
              *****************************************************/
              void PWM_ITConfig(FunctionalState NewState,
                                PriorityStatus Priority)
              {
                if (NewState != DISABLE)
                {
                  IE1 |= 0X02;
                }
                else
                {
                  IE1 &= 0XFD;
                }
              
                if (Priority == LOW)
                {
                  IP1 &= ~0X02;
                }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 16  

                else
                {
                  IP1 |= 0X02;
                }
              }
              
              /*****************************************************
              *函数名称:FlagStatus PWM_GetFlagStatusEX(PWM_Type_TypeDef
                                             PWM_Type)
              *函数功能:获得PWM中断标志状态，多通道
              *入口参数:
              PWM_Type_TypeDef:PWM_Type:PWM类型
              *出口参数:
              FlagStatus:PWM中断标志状态
              *****************************************************/
              FlagStatus PWM_GetFlagStatusEX(PWM_Type_TypeDef
                                                 PWM_Type)
              {
                if (PWM_Type == PWM0_Type)
                {
                  return (bool)(PWMCFG0 & 0X40);
                }
                else if (PWM_Type == PWM1_Type)
                {
                  return (bool)(PWMCFG1 & 0X40);
                }
                return 0;
              }
              
              /*****************************************************
              *函数名称:void PWM1_ClearFlag(void)
              *函数功能:清除PWM中断标志状态
              *入口参数:
              PWM_Type_TypeDef:PWM_Type:PWM类型
              *出口参数:void
              *****************************************************/
              void PWM_ClearFlagEX(PWM_Type_TypeDef PWM_Type)
              {
                if (PWM_Type == PWM0_Type)
                {
                  PWMCFG0 &= 0XBF;
                }
                else if (PWM_Type == PWM1_Type)
                {
                  PWMCFG1 &= 0XBF;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_IndependentModeConfigEX(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle, PW
             -M_OutputState_TypeDef PWM_OutputState)
              *函数功能:配置独立模式占空比，并且选择是否开启通道
              *入口参数:
              PWM_OutputPin_TypeDef:PWM_OutputPin:PWM通道
              uint16_t:PWM_DutyCycle PWM占空比配置
              PWM_OutputState_TypeDef:PWM_OutputState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void PWM_IndependentModeConfigEX(PWM_OutputPin_TypeDef PWM_OutputPin,
                                               uint16_t PWM_DutyCycle,
                                               PWM_OutputState_TypeDef PWM_OutputState)
              {
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 17  

                if (PWM_OutputState == ENABLE)
                {
                  if (PWM_OutputPin >= PWM40) //如果属于PWM1，切换为独立模式
                  {
                    PWMMOD &= 0XF7;
                  }
              
                  PWMREG[PWM_OutputPin + 1] = PWM_DutyCycle;
                  PWMREG[PWM_OutputPin] = (PWMREG[PWM_OutputPin] & 0xF0) | (PWM_DutyCycle / 256) | 0x80;
                }
                else
                {
                  PWMREG[PWM_OutputPin] &= 0x7F;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_ComplementaryModeConfigEX(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle, 
             -PWM_OutputState_TypeDef PWM_OutputState)
              *函数功能:配置PWM互补模式占空比，并选择是否开启通道
              *入口参数:
              PWM_ComplementaryOutputPin_TypeDef:PWM_ComplementaryOutputPin:PWM通道
              uint16_t:PWM_DutyCycle:PWM占空比配置
              PWM_OutputState_TypeDef:PWM_OutputState:功能启动/关闭选择
              *出口参数:void
              *****************************************************/
              void PWM_ComplementaryModeConfigEX(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin,
                                                 uint16_t PWM_DutyCycle,
                                                 PWM_OutputState_TypeDef PWM_OutputState)
              {
                if (PWM_OutputState == ENABLE)
                {
                  PWMMOD |= 0X08;
                  PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4] = (PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4] & 0xF
             -0) | (0x80 | (PWM_DutyCycle / 256));
                  PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4 + 1] = PWM_DutyCycle;
                  PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4 + 2] |= 0x80;
                }
                else
                {
                  PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4] &= 0x7F;
                  PWMREG[PWM40 + PWM_ComplementaryOutputPin * 4 + 2] &= 0x7F;
                }
              }
              
              /*****************************************************
              *函数名称:FlagStatus PWM_GetFaultDetectionFlagStatus(void)
              *函数功能:获得可选PWM源故障检测标志位状态
              *入口参数:void
              *出口参数:
              FlagStatus:PWM故障检测标志位状态
              *****************************************************/
              FlagStatus PWM_GetFaultDetectionFlagStatusEX(PWM_Type_TypeDef PWM_Type)
              {
                if (PWM_Type == PWM1_Type)
                {
                  return (bool)(PWMFLT1 & 0X40);
                }
              
                return RESET;
              }
              
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 18  

              /*****************************************************
              *函数名称:void PWM_ClearFaultDetectionFlag(void)
              *函数功能:清除可选PWM源故障检测标志位状态   // ！注意,处于锁存模式下，此位可软件清除
              *入口参数:void
              *出口参数:void
              *****************************************************/
              void PWM_ClearFaultDetectionFlagEX(PWM_Type_TypeDef PWM_Type)
              {
                if (PWM_Type == PWM1_Type)
                {
                  PWMFLT1 &= 0XBF;
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionFunctionConfig(FunctionalState NewState)
              *函数功能:PWM故障检测功能开启/关闭
              *入口参数:
              FunctionalState:NewState:故障检测功能开启/关闭
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionConfigEX(PWM_Type_TypeDef PWM_Type, FunctionalState NewState)
              {
                if (PWM_Type == PWM1_Type)
                {
                  if (NewState != DISABLE)
                  {
                    PWMFLT1 |= 0X80;
                  }
                  else
                  {
                    PWMFLT1 &= 0X7F;
                  }
                }
              }
              
              /*****************************************************
              *函数名称:void PWM_FaultDetectionModeConfigEX(PWM_Type_TypeDef PWM_Type, PWM_FaultDetectionMode_TypeDef Fa
             -ultDetectionMode, PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect, PWM_FaultDetectionWaveFilteringTi
             -me_TypeDef FaultDetectionWaveFilteringTime)
              *函数功能:PWM故障检测模式设置
              *入口参数:
              PWM_Type_TypeDef:PWM_Type:PWM类型选择
              PWM_FaultDetectionMode_TypeDef:FaultDetectionMode:故障检测功能模式设置: 立即模式/锁存模式
              PWM_FaultDetectionVoltageSelect_TypeDef:FaultDetectionVoltageSelect:故障检测电平选择
              PWM_FaultDetectionWaveFilteringTime_TypeDef:FaultDetectionWaveFilteringTime:故障检测输入信号滤波时间选择
              *出口参数:void
              *****************************************************/
              void PWM_FaultDetectionModeConfigEX(PWM_Type_TypeDef PWM_Type,
                                                  PWM_FaultDetectionMode_TypeDef FaultDetectionMode,
                                                  PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect,
                                                  PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWaveFilterin
             -gTime)
              {
                if (PWM_Type == PWM1_Type)
                {
                  PWMFLT1 = (PWMFLT1 & 0XC0) | FaultDetectionMode | FaultDetectionVoltageSelect |
                            FaultDetectionWaveFilteringTime;
                }
              }
              
              #endif
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 19  

1090          
1091          #if defined(SC95F8x3x) || defined(SC95F7x3x) || defined (SC95F8x6x) || defined (SC95F7x6x)  || defined (SC
             -95F8x1xB) || defined (SC95F7x1xB)
1092          uint8_t xdata PWMREG[28] _at_ 0x2034; //PWM占空比调节寄存器
1093          /**************************************************
1094          *函数名称:void PWM_DeInit(void)
1095          *函数功能:PWM相关寄存器复位至缺省值
1096          *入口参数:void
1097          *出口参数:void
1098          **************************************************/
1099          void PWM_DeInit(void)
1100          {
1101   1        static uint8_t i;
1102   1      
1103   1        //PWM0相关寄存器清零
1104   1        PWMCON0 = 0X00;
1105   1        PWMCFG = 0X00;
1106   1        PWMCON1 = 0X00;
1107   1        PWMPDL = 0x00;
1108   1        PWMPDH = 0x00;
1109   1        IE1 &= 0XFD;
1110   1        IP1 &= 0XFD;
1111   1      
1112   1        //PWM2/3/4相关寄存器
1113   1        for (i = 0; i < 3; i++)
1114   1        {
1115   2          TXINX = 0x02 + i;
1116   2          TXCON &= ~0x04;
1117   2          TXMOD &= ~0x3C;
1118   2          RCAPXH = 0x00;
1119   2          RCAPXL = 0x00;
1120   2        }
1121   1      
1122   1        //清零中断使能位和优先级位
1123   1        ET2 = 0;
1124   1        IP &= ~0x20;
1125   1        IE1 &= ~0xC0;
1126   1        IP1 &= ~0xC0;
1127   1      
1128   1        //占空比寄存器
1129   1        for (i = 0; i < 14; i++)
1130   1        {
1131   2          PWMREG[i] = 0;
1132   2        }
1133   1      }
1134          
1135          /**************************************************
1136          *函数名称:PWM_Init(PWM_Type_TypeDef PWM_Type,PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
1137          *函数功能:PWM初始化配置函数
1138          *入口参数: 
1139          PWM_PresSel_TypeDef:PWM_PresSel:预分频选择
1140          uint16_t:PWM_Period:PWM周期配置
1141          *出口参数:void
1142          **************************************************/
1143          void PWM_Init(PWM_PresSel_TypeDef PWM_PresSel, uint16_t PWM_Period)
1144          {
1145   1        if ((PWM_PresSel & 0X0F) == PWM0_Type)
1146   1        {
1147   2          PWM_Period -= 1;
1148   2          PWMCON0 = (PWMCON0 & 0XCF) | (PWM_PresSel & 0XF0); //预分频
1149   2          PWMPDH = (uint8_t)(PWM_Period >> 8);               //周期高8位
1150   2          PWMPDL = (uint8_t)(PWM_Period & 0X00FF);           //周期低8位
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 20  

1151   2        }
1152   1        else
1153   1        {
1154   2          TXINX = (PWM_PresSel & 0X0F);
1155   2          PWM_PresSel = DISABLE;                   //PWM2分频唯一，不用设置
1156   2          RCAPXH = (uint8_t)(PWM_Period >> 8);     //周期高8位
1157   2          RCAPXL = (uint8_t)(PWM_Period & 0X00FF); //周期低8位
1158   2        }
1159   1      }
1160          
1161          /*****************************************************
1162          *函数名称:void PWM_Aligned_Mode_Select(void)
1163          *函数功能:选择PWM的对齐模式
1164          *入口参数:
1165          PWM_Aligned_Mode_TypeDef:PWM_Aligned_Mode:选择对齐模式
1166          *出口参数:void
1167          *****************************************************/
1168          void PWM_Aligned_Mode_Select(PWM_Aligned_Mode_TypeDef PWM_Aligned_Mode)
1169          {
1170   1      
1171   1        //PWM0选择对齐模式配置
1172   1        if (PWM_Aligned_Mode == PWM0_Edge_Aligned_Mode)
1173   1        {
1174   2          PWMCON0 &= 0XFE;
1175   2        }
1176   1        else if (PWM_Aligned_Mode == PWM0_Center_Alignment_Mode)
1177   1        {
1178   2          PWMCON0 |= 0X01;
1179   2        }
1180   1      }
1181          
1182          /**************************************************
1183          *函数名称:void PWM_OutputStateConfig(uint8_t PWM_OutputPin, PWM_OutputState_TypeDef PWM_OutputState)
1184          *函数功能:PWMx输出使能/失能配置函数
1185          *入口参数:
1186          PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
1187          PWM_OutputState_TypeDef:PWM_OutputState:PWM输出状态配置
1188          *出口参数:void
1189          **************************************************/
1190          void PWM_OutputStateConfig(uint8_t PWM_OutputPin,
1191                                     PWM_OutputState_TypeDef PWM_OutputState)
1192          {
1193   1        unsigned char Reg_Data;
1194   1        if ((PWM_OutputPin & 0xF0) == 0x00)
1195   1        {
1196   2          if (PWM_OutputState == PWM_OUTPUTSTATE_ENABLE)
1197   2          {
1198   3            PWMCON1 |= 1 << ((PWM_OutputPin >> 1) & 0x0F);
1199   3          }
1200   2          else
1201   2          {
1202   3            PWMCON1 &= ~(1 << ((PWM_OutputPin >> 1) & 0x0F));
1203   3          }
1204   2        }
1205   1        else
1206   1        {
1207   2          TXINX = (PWM_OutputPin & 0xF0) >> 4;
1208   2      
1209   2          if (PWM_OutputPin & 0x02)
1210   2          {
1211   3            Reg_Data = 0x20;
1212   3          }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 21  

1213   2          else
1214   2          {
1215   3            Reg_Data = 0x10;
1216   3          }
1217   2      
1218   2          if (PWM_OutputState == PWM_OUTPUTSTATE_ENABLE)
1219   2          {
1220   3            TXMOD |= Reg_Data;
1221   3          }
1222   2          else
1223   2          {
1224   3            TXMOD &= ~Reg_Data;
1225   3          }
1226   2        }
1227   1      }
1228          
1229          /**************************************************
1230          *函数名称:void PWM_PolarityConfig(PWM_OutputPin_TypeDef PWM_OutputPin, PWM_Polarity_TypeDef PWM_Polarity)
1231          *函数功能:PWMx正/反向输出配置函数
1232          *入口参数:
1233          PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx选择（uint8_t作为入参，方便进行位或操作）
1234          PWM_Polarity_TypeDef:PWM_Polarity:PWM输出正/反向配置
1235          *出口参数:void
1236          **************************************************/
1237          void PWM_PolarityConfig(uint8_t PWM_OutputPin,
1238                                  PWM_Polarity_TypeDef PWM_Polarity)
1239          {
1240   1        unsigned char Reg_Data;
1241   1        if ((PWM_OutputPin & 0xF0) == 0x00)
1242   1        {
1243   2          if (PWM_Polarity == PWM_POLARITY_INVERT)
1244   2          {
1245   3            PWMCFG |= 1 << ((PWM_OutputPin >> 1) & 0x0F);
1246   3          }
1247   2          else
1248   2          {
1249   3            PWMCFG &= ~(1 << ((PWM_OutputPin >> 1) & 0x0F));
1250   3          }
1251   2        }
1252   1        else
1253   1        {
1254   2          TXINX = (PWM_OutputPin & 0xF0) >> 4;
1255   2      
1256   2          if (PWM_OutputPin & 0x02)
1257   2          {
1258   3            Reg_Data = 0x08;
1259   3          }
1260   2          else
1261   2          {
1262   3            Reg_Data = 0x04;
1263   3          }
1264   2      
1265   2          if (PWM_Polarity == PWM_POLARITY_INVERT)
1266   2          {
1267   3            TXMOD |= Reg_Data;
1268   3          }
1269   2          else
1270   2          {
1271   3            TXMOD &= ~Reg_Data;
1272   3          }
1273   2        }
1274   1      }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 22  

1275          
1276          /**************************************************
1277          *函数名称:void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
1278          *函数功能:PWMx独立工作模式配置函数
1279          *入口参数:
1280          PWM_OutputPin_TypeDef:PWM_OutputPin:PWMx独立通道选择
1281          uint16_t:PWM_DutyCycle:PWM占空比配置
1282          *出口参数:void
1283          **************************************************/
1284          void PWM_IndependentModeConfig(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle)
1285          {
1286   1        if ((PWM_OutputPin & 0xF0) == 0x00)
1287   1        {
1288   2          PWMCON0 &= ~0x02;
1289   2          PWMREG[12 + PWM_OutputPin] = PWM_DutyCycle >> 8;
1290   2          PWMREG[13 + PWM_OutputPin] = PWM_DutyCycle;
1291   2        }
1292   1        else
1293   1        {
1294   2          PWMREG[PWM_OutputPin & 0x0F] = PWM_DutyCycle >> 8;
1295   2          PWMREG[1 + PWM_OutputPin & 0x0F] = PWM_DutyCycle;
1296   2        }
1297   1      }
1298          
1299          /**************************************************
1300          *函数名称:void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin, 
             -uint16_t PWM_DutyCycle)
1301          *函数功能:PWMxPWMy互补工作模式配置函数
1302          *入口参数:
1303          PWM_ComplementaryOutputPin_TypeDef:PWM_ComplementaryOutputPin:PWMxPWMy互补通道选择
1304          uint16_t:PWM_DutyCycle:PWM占空比配置
1305          *出口参数:void
1306          **************************************************/
1307          void PWM_ComplementaryModeConfig(PWM_ComplementaryOutputPin_TypeDef PWM_ComplementaryOutputPin,
1308                                           uint16_t PWM_DutyCycle)
1309          {
1310   1        PWMCON0 |= 0x02;
1311   1        PWMREG[13 + PWM_ComplementaryOutputPin] = PWM_DutyCycle;
1312   1        PWMREG[12 + PWM_ComplementaryOutputPin] = PWM_DutyCycle >> 8;
1313   1      }
1314          
1315          /**************************************************
1316          *函数名称:PWM_DeadTimeConfigEX(PWM_Type_TypeDef PWM_Type,uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDe
             -adTime)
1317          *函数功能:PWM互补工作模式下死区时间配置函数
1318          *入口参数:
1319          PWM_Type_TypeDef:PWM_Type:PWM源选择
1320          uint8_t:PWM_RisingDeadTime:PWM死区上升时间   00-FF
1321          uint8_t:PWM_FallingDeadTime:PWM死区下降时间  00-FF
1322          *出口参数:void
1323          **************************************************/
1324          void PWM_DeadTimeConfigEX(PWM_Type_TypeDef PWM_Type, uint8_t PWM_RisingDeadTime, uint8_t PWM_FallingDeadTi
             -me)
1325          {
1326   1        if (PWM_Type == PWM0_Type)
1327   1        {
1328   2          PWMDFR = (PWM_RisingDeadTime | (PWM_FallingDeadTime << 4));
1329   2        }
1330   1      }
1331          
1332          /*****************************************************
1333          *函数名称:void PWM_Cmd(PWM_Type_TypeDef PWM_Type,FunctionalState NewState)
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 23  

1334          *函数功能:PWM功能开关函数
1335          *入口参数:
1336          PWM_Type_TypeDef:PWM_Type:PWM类型
1337          FunctionalState:NewState:功能启动/关闭选择
1338          *出口参数:void
1339          *****************************************************/
1340          void PWM_CmdEX(PWM_Type_TypeDef PWM_Type,
1341                         FunctionalState NewState)
1342          {
1343   1        if (PWM_Type == PWM0_Type)
1344   1        {
1345   2          if (NewState != DISABLE)
1346   2          {
1347   3            PWMCON0 |= 0X80;
1348   3          }
1349   2          else
1350   2          {
1351   3            PWMCON0 &= 0X7F;
1352   3          }
1353   2        }
1354   1        else
1355   1        {
1356   2          TXINX = PWM_Type;
1357   2          if (NewState != DISABLE)
1358   2          {
1359   3            TXCON |= 0X04;
1360   3          }
1361   2          else
1362   2          {
1363   3            TXCON &= ~0X04;
1364   3          }
1365   2        }
1366   1      }
1367          
1368          /*****************************************************
1369          *函数名称:void PWM_ITConfig(FunctionalState NewState, PriorityStatus Priority)
1370          *函数功能:PWM中断初始化
1371          *入口参数:
1372          FunctionalState:NewState:中断使能/关闭选择
1373          PriorityStatus:Priority:中断优先级选择
1374          *出口参数:void
1375          *****************************************************/
1376          void PWM_ITConfig(FunctionalState NewState,
1377                            PriorityStatus Priority)
1378          {
1379   1        if (NewState != DISABLE)
1380   1        {
1381   2          IE1 |= 0X02;
1382   2        }
1383   1        else
1384   1        {
1385   2          IE1 &= 0XFD;
1386   2        }
1387   1      
1388   1        if (Priority == LOW)
1389   1        {
1390   2          IP1 &= ~0X02;
1391   2        }
1392   1        else
1393   1        {
1394   2          IP1 |= 0X02;
1395   2        }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 24  

1396   1      }
1397          
1398          /*****************************************************
1399          *函数名称:void PWM_IndependentModeConfigEX(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle, PW
             -M_OutputState_TypeDef PWM_OutputState)
1400          *函数功能:PWM独立模式配置
1401          *入口参数:
1402          PWM_OutputPin_TypeDef:PWM_ComplementaryOutputPin:PWM通道
1403          uint16_t:PWM_DutyCycle:PWM占空比配置
1404          FunctionalState:NewState:功能启动/关闭选择
1405          *出口参数:void
1406          *****************************************************/
1407          void PWM_IndependentModeConfigEX(PWM_OutputPin_TypeDef PWM_ComplementaryOutputPin,
1408                                           uint16_t PWM_DutyCycle,
1409                                           PWM_OutputState_TypeDef PWM_OutputState)
1410          {
1411   1        PWM_IndependentModeConfig(PWM_ComplementaryOutputPin, PWM_DutyCycle); //配置占空比
1412   1        PWM_OutputStateConfig(PWM_ComplementaryOutputPin, PWM_OutputState);   //IO复用PWM配置函数
1413   1        if (PWM_OutputState == ENABLE)
1414   1        {
1415   2          PWM_CmdEX(PWM_ComplementaryOutputPin >> 4, ENABLE); //开启PWM
1416   2        }
1417   1      }
1418          
1419          /*****************************************************
1420          *函数名称:void PWM_ComplementaryModeConfigEX(PWM_OutputPin_TypeDef PWM_OutputPin, uint16_t PWM_DutyCycle, 
             -PWM_OutputState_TypeDef PWM_OutputState)
1421          *函数功能:PWM互补
1422          *入口参数:
1423          PWM_ComplementaryOutputPin_TypeDef:PWM_OutputPin:PWM通道
1424          uint16_t:PWM_DutyCycle:PWM占空比配置
1425          FunctionalState:NewState:功能启动/关闭选择
1426          *出口参数:void
1427          *****************************************************/
1428          void PWM_ComplementaryModeConfigEX(PWM_ComplementaryOutputPin_TypeDef PWM_OutputPin,
1429                                             uint16_t PWM_DutyCycle,
1430                                             PWM_OutputState_TypeDef PWM_OutputState)
1431          {
1432   1        PWM_ComplementaryModeConfig(PWM_OutputPin, PWM_DutyCycle); //配置占空比
1433   1        PWM_OutputStateConfig(PWM_OutputPin, PWM_OutputState);     //IO复用PWM配置函数
1434   1        PWM_OutputStateConfig(PWM_OutputPin + 2, PWM_OutputState); //IO复用PWM配置函数
1435   1        if (PWM_OutputState == ENABLE)
1436   1        {
1437   2          PWM_CmdEX(PWM_OutputPin >> 4, ENABLE); //开启PWM
1438   2        }
1439   1      }
1440          
1441          /*****************************************************
1442          *函数名称:PWM_GetFlagStatusEX(PWM_Type_TypeDef PWM_Type)
1443          *函数功能:获取PWM中断标志位
1444          *入口参数:
1445          PWM_Type_TypeDef:PWM_Type:PWM源选择
1446          *出口参数:void
1447          *****************************************************/
1448          FlagStatus PWM_GetFlagStatusEX(PWM_Type_TypeDef PWM_Type)
1449          {
1450   1        if ((PWM_Type == PWM0_Type))
1451   1        {
1452   2          return (bool)(PWMCON0 & 0X40);
1453   2        }
1454   1        else if ((PWM_Type == PWM2_Type) || (PWM_Type == PWM3_Type) || (PWM_Type == PWM0_Type))
1455   1        {
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 25  

1456   2          TXINX = PWM_Type;
1457   2          return (bool)(TXCON & 0x80);
1458   2        }
1459   1      
1460   1        return RESET;
1461   1      }
1462          
1463          /*****************************************************
1464          *函数名称:void PWM_ClearFlagEX(PWM_Type_TypeDef PWM_Type)
1465          *函数功能:清除PWM中断
1466          *入口参数:
1467          PWM_Type_TypeDef:PWM_Type:PWM源选择
1468          *出口参数:void
1469          *****************************************************/
1470          void PWM_ClearFlagEX(PWM_Type_TypeDef PWM_Type)
1471          {
1472   1        if ((PWM_Type == PWM0_Type))
1473   1        {
1474   2          PWMCON0 &= ~0X40;
1475   2        }
1476   1        else if ((PWM_Type == PWM2_Type) || (PWM_Type == PWM3_Type) || (PWM_Type == PWM0_Type))
1477   1        {
1478   2          TXINX = PWM_Type;
1479   2          TXCON &= ~0x80;
1480   2        }
1481   1      }
1482          
1483          /*****************************************************
1484          *函数名称:FlagStatus PWM_GetFaultDetectionFlagStatus(void)
1485          *函数功能:获得PWM故障检测标志位状态
1486          *入口参数:
1487          PWM_Type_TypeDef:PWM_Type:PWM类型
1488          *出口参数:
1489          FlagStatus:PWM故障检测标志位状态
1490          *****************************************************/
1491          FlagStatus PWM_GetFaultDetectionFlagStatusEX(PWM_Type_TypeDef PWM_Type)
1492          {
1493   1        if (PWM_Type == PWM0_Type)
1494   1        {
1495   2          return (bool)(PWMFLT & 0X40);
1496   2        }
1497   1      
1498   1        return RESET;
1499   1      }
1500          
1501          /*****************************************************
1502          *函数名称:void PWM_ClearFaultDetectionFlag(void)
1503          *函数功能:清除PWM故障检测标志位状态   // ！注意,处于锁存模式下，此位可软件清除
1504          *入口参数:
1505          PWM_Type_TypeDef:PWM_Type:PWM类型
1506          *出口参数:void
1507          *****************************************************/
1508          void PWM_ClearFaultDetectionFlagEX(PWM_Type_TypeDef PWM_Type)
1509          {
1510   1        if (PWM_Type == PWM0_Type)
1511   1        {
1512   2          PWMFLT &= 0XBF;
1513   2        }
1514   1      }
1515          
1516          /*****************************************************
1517          *函数名称:void PWM_FaultDetectionFunctionConfigEX(PWM_Type_TypeDef PWM_Type, FunctionalState NewState)
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 26  

1518          *函数功能:PWM故障检测功能开启/关闭-扩展版
1519          *入口参数:
1520          PWM_Type_TypeDef:PWM_Type:PWM类型选择
1521          FunctionalState:NewState:故障检测功能开启/关闭
1522          *出口参数:void
1523          *****************************************************/
1524          void PWM_FaultDetectionConfigEX(PWM_Type_TypeDef PWM_Type, FunctionalState NewState)
1525          {
1526   1        if (PWM_Type == PWM0_Type)
1527   1        {
1528   2          if (NewState != DISABLE)
1529   2          {
1530   3            PWMFLT |= 0X80;
1531   3          }
1532   2          else
1533   2          {
1534   3            PWMFLT &= 0X7F;
1535   3          }
1536   2        }
1537   1      }
1538          
1539          /*****************************************************
1540          *函数名称:void PWM_FaultDetectionModeConfigEX(PWM_Type_TypeDef PWM_Type, PWM_FaultDetectionMode_TypeDef Fa
             -ultDetectionMode, PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect, PWM_FaultDetectionWaveFilteringTi
             -me_TypeDef FaultDetectionWaveFilteringTime)
1541          *函数功能:PWM故障检测模式设置
1542          *入口参数:
1543          PWM_Type_TypeDef:PWM_Type:PWM类型选择
1544          PWM_FaultDetectionMode_TypeDef:FaultDetectionMode:故障检测功能模式设置: 立即模式/锁存模式
1545          PWM_FaultDetectionVoltageSelect_TypeDef:FaultDetectionVoltageSelect:故障检测电平选择
1546          PWM_FaultDetectionWaveFilteringTime_TypeDef:FaultDetectionWaveFilteringTime:故障检测输入信号滤波时间选择
1547          *出口参数:void
1548          *****************************************************/
1549          void PWM_FaultDetectionModeConfigEX(PWM_Type_TypeDef PWM_Type,
1550                                              PWM_FaultDetectionMode_TypeDef FaultDetectionMode,
1551                                              PWM_FaultDetectionVoltageSelect_TypeDef FaultDetectionVoltageSelect,
1552                                              PWM_FaultDetectionWaveFilteringTime_TypeDef FaultDetectionWaveFilterin
             -gTime)
1553          {
1554   1        if (PWM_Type == PWM0_Type)
1555   1        {
1556   2          PWMFLT = (PWMFLT & 0XC0) | FaultDetectionMode | FaultDetectionVoltageSelect |
1557   2                   FaultDetectionWaveFilteringTime;
1558   2        }
1559   1      }
1560          
1561          /*****************************************************
1562          *函数名称:void PWM_ITConfigEX(PWM_Type_TypeDef PWM_Type,FunctionalState NewState, PriorityStatus Priority)
1563          *函数功能:PWM中断配置函数-扩展版
1564          *入口参数:
1565          PWM_Type_TypeDef:PWM_Type:PWM源选择
1566          FunctionalState:NewState:中断使能/关闭选择
1567          PriorityStatus:Priority:中断优先级选择
1568          *出口参数:void
1569          *****************************************************/
1570          void PWM_ITConfigEX(PWM_Type_TypeDef PWM_Type, FunctionalState NewState, PriorityStatus Priority)
1571          {
1572   1      
1573   1        if ((PWM_Type == PWM0_Type))
1574   1        {
1575   2          PWM_ITConfig(NewState, Priority);
1576   2        }
C51 COMPILER V9.60.0.0   SC95F_PWM                                                         01/06/2023 09:31:00 PAGE 27  

1577   1        else
1578   1        {
1579   2          TXINX = PWM_Type;
1580   2      
1581   2          if (NewState == DISABLE)
1582   2          {
1583   3            ET2 = 0;
1584   3          }
1585   2          else
1586   2          {
1587   3            ET2 = 1;
1588   3          }
1589   2      
1590   2          if (Priority == LOW)
1591   2          {
1592   3            IPT2 = 0;
1593   3          }
1594   2          else
1595   2          {
1596   3            IPT2 = 1;
1597   3          }
1598   2        }
1599   1      }
1600          
1601          #endif
1602          /******************* (C) COPYRIGHT 2020 SinOne Microelectronics *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    843    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
