; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\STM3210E-EVAL\usb_pwr.o --depend=.\STM3210E-EVAL\usb_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Utilities\STM32_EVAL -I..\Utilities\STM32_EVAL\Common -I..\Utilities\STM32_EVAL\STM3210E_EVAL -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\src\usb_pwr.c]
                          THUMB

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;79     *******************************************************************************/
;;;80     RESULT PowerOff()
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82     #ifndef STM32F10X_CL
;;;83       /* disable all ints and force USB reset */
;;;84       _SetCNTR(CNTR_FRES);
000002  2001              MOVS     r0,#1
000004  4907              LDR      r1,|L1.36|
000006  6008              STR      r0,[r1,#0]
;;;85       /* clear interrupt status register */
;;;86       _SetISTR(0);
000008  f04f0000          MOV      r0,#0
00000c  4906              LDR      r1,|L1.40|
00000e  f8c10c44          STR      r0,[r1,#0xc44]
;;;87       /* Disable the Pull-Up*/
;;;88       USB_Cable_Config(DISABLE);
000012  f7fffffe          BL       USB_Cable_Config
;;;89       /* switch-off device */
;;;90       _SetCNTR(CNTR_FRES + CNTR_PDWN);
000016  2003              MOVS     r0,#3
000018  4902              LDR      r1,|L1.36|
00001a  6008              STR      r0,[r1,#0]
;;;91     #endif /* STM32F10X_CL */
;;;92     
;;;93       /* sw variables reset */
;;;94       /* ... */
;;;95     
;;;96       return USB_SUCCESS;
00001c  f04f0000          MOV      r0,#0
;;;97     }
000020  bd10              POP      {r4,pc}
;;;98     
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x40005c40
                  |L1.40|
                          DCD      0x40005000

                          AREA ||i.PowerOn||, CODE, READONLY, ALIGN=2

                  PowerOn PROC
;;;47     *******************************************************************************/
;;;48     RESULT PowerOn(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50     #ifndef STM32F10X_CL
;;;51       uint16_t wRegVal;
;;;52     
;;;53       /*** cable plugged-in ? ***/
;;;54       USB_Cable_Config(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       USB_Cable_Config
;;;55     
;;;56       /*** CNTR_PWDN = 0 ***/
;;;57       wRegVal = CNTR_FRES;
000008  2401              MOVS     r4,#1
;;;58       _SetCNTR(wRegVal);
00000a  480d              LDR      r0,|L2.64|
00000c  6004              STR      r4,[r0,#0]
;;;59     
;;;60       /*** CNTR_FRES = 0 ***/
;;;61       wInterrupt_Mask = 0;
00000e  f04f0000          MOV      r0,#0
000012  490c              LDR      r1,|L2.68|
000014  8008              STRH     r0,[r1,#0]
;;;62       _SetCNTR(wInterrupt_Mask);
000016  4608              MOV      r0,r1
000018  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
00001a  490b              LDR      r1,|L2.72|
00001c  f8c10c40          STR      r0,[r1,#0xc40]
;;;63       /*** Clear pending interrupts ***/
;;;64       _SetISTR(0);
000020  f04f0000          MOV      r0,#0
000024  4909              LDR      r1,|L2.76|
000026  6008              STR      r0,[r1,#0]
;;;65       /*** Set interrupt mask ***/
;;;66       wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
000028  f44f50e0          MOV      r0,#0x1c00
00002c  4905              LDR      r1,|L2.68|
00002e  8008              STRH     r0,[r1,#0]
;;;67       _SetCNTR(wInterrupt_Mask);
000030  4608              MOV      r0,r1
000032  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000034  4904              LDR      r1,|L2.72|
000036  f8c10c40          STR      r0,[r1,#0xc40]
;;;68     #endif /* STM32F10X_CL */
;;;69     
;;;70       return USB_SUCCESS;
00003a  f04f0000          MOV      r0,#0
;;;71     }
00003e  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  |L2.64|
                          DCD      0x40005c40
                  |L2.68|
                          DCD      wInterrupt_Mask
                  |L2.72|
                          DCD      0x40005000
                  |L2.76|
                          DCD      0x40005c44

                          AREA ||i.Resume||, CODE, READONLY, ALIGN=2

                  Resume PROC
;;;185    *******************************************************************************/
;;;186    void Resume(RESUME_STATE eResumeSetVal)
000000  b570              PUSH     {r4-r6,lr}
;;;187    {
000002  4605              MOV      r5,r0
;;;188    #ifndef STM32F10X_CL
;;;189      uint16_t wCNTR;
;;;190    #endif /* STM32F10X_CL */
;;;191    
;;;192      if (eResumeSetVal != RESUME_ESOF)
000004  2d07              CMP      r5,#7
000006  d001              BEQ      |L3.12|
;;;193        ResumeS.eState = eResumeSetVal;
000008  482a              LDR      r0,|L3.180|
00000a  7005              STRB     r5,[r0,#0]
                  |L3.12|
;;;194    
;;;195      switch (ResumeS.eState)
00000c  4829              LDR      r0,|L3.180|
00000e  7800              LDRB     r0,[r0,#0]  ; ResumeS
000010  2808              CMP      r0,#8
000012  d246              BCS      |L3.162|
000014  e8dff000          TBB      [pc,r0]
000018  040a1016          DCB      0x04,0x0a,0x10,0x16
00001c  21314647          DCB      0x21,0x31,0x46,0x47
;;;196      {
;;;197        case RESUME_EXTERNAL:
;;;198          Resume_Init();
000020  f7fffffe          BL       Resume_Init
;;;199          ResumeS.eState = RESUME_OFF;
000024  2006              MOVS     r0,#6
000026  4923              LDR      r1,|L3.180|
000028  7008              STRB     r0,[r1,#0]
;;;200          break;
00002a  e040              B        |L3.174|
;;;201        case RESUME_INTERNAL:
;;;202          Resume_Init();
00002c  f7fffffe          BL       Resume_Init
;;;203          ResumeS.eState = RESUME_START;
000030  2004              MOVS     r0,#4
000032  4920              LDR      r1,|L3.180|
000034  7008              STRB     r0,[r1,#0]
;;;204          break;
000036  e03a              B        |L3.174|
;;;205        case RESUME_LATER:
;;;206          ResumeS.bESOFcnt = 2;
000038  2002              MOVS     r0,#2
00003a  491e              LDR      r1,|L3.180|
00003c  7048              STRB     r0,[r1,#1]
;;;207          ResumeS.eState = RESUME_WAIT;
00003e  2003              MOVS     r0,#3
000040  7008              STRB     r0,[r1,#0]
;;;208          break;
000042  e034              B        |L3.174|
;;;209        case RESUME_WAIT:
;;;210          ResumeS.bESOFcnt--;
000044  481b              LDR      r0,|L3.180|
000046  7840              LDRB     r0,[r0,#1]  ; ResumeS
000048  1e40              SUBS     r0,r0,#1
00004a  491a              LDR      r1,|L3.180|
00004c  7048              STRB     r0,[r1,#1]
;;;211          if (ResumeS.bESOFcnt == 0)
00004e  4608              MOV      r0,r1
000050  7840              LDRB     r0,[r0,#1]  ; ResumeS
000052  b908              CBNZ     r0,|L3.88|
;;;212            ResumeS.eState = RESUME_START;
000054  2004              MOVS     r0,#4
000056  7008              STRB     r0,[r1,#0]
                  |L3.88|
;;;213          break;
000058  e029              B        |L3.174|
;;;214        case RESUME_START:
;;;215         #ifdef STM32F10X_CL
;;;216          OTGD_FS_SetRemoteWakeup();
;;;217         #else 
;;;218          wCNTR = _GetCNTR();
00005a  4817              LDR      r0,|L3.184|
00005c  6800              LDR      r0,[r0,#0]
00005e  b284              UXTH     r4,r0
;;;219          wCNTR |= CNTR_RESUME;
000060  f0440410          ORR      r4,r4,#0x10
;;;220          _SetCNTR(wCNTR);
000064  4815              LDR      r0,|L3.188|
000066  f8c04c40          STR      r4,[r0,#0xc40]
;;;221         #endif /* STM32F10X_CL */
;;;222          ResumeS.eState = RESUME_ON;
00006a  f04f0005          MOV      r0,#5
00006e  4911              LDR      r1,|L3.180|
000070  7008              STRB     r0,[r1,#0]
;;;223          ResumeS.bESOFcnt = 10;
000072  f04f000a          MOV      r0,#0xa
000076  7048              STRB     r0,[r1,#1]
;;;224          break;
000078  e019              B        |L3.174|
;;;225        case RESUME_ON:
;;;226        #ifndef STM32F10X_CL      
;;;227          ResumeS.bESOFcnt--;
00007a  480e              LDR      r0,|L3.180|
00007c  7840              LDRB     r0,[r0,#1]  ; ResumeS
00007e  1e40              SUBS     r0,r0,#1
000080  490c              LDR      r1,|L3.180|
000082  7048              STRB     r0,[r1,#1]
;;;228          if (ResumeS.bESOFcnt == 0)
000084  4608              MOV      r0,r1
000086  7840              LDRB     r0,[r0,#1]  ; ResumeS
000088  b950              CBNZ     r0,|L3.160|
;;;229          {
;;;230         #endif /* STM32F10X_CL */    
;;;231           #ifdef STM32F10X_CL
;;;232            OTGD_FS_ResetRemoteWakeup();
;;;233           #else
;;;234            wCNTR = _GetCNTR();
00008a  480b              LDR      r0,|L3.184|
00008c  6800              LDR      r0,[r0,#0]
00008e  b284              UXTH     r4,r0
;;;235            wCNTR &= (~CNTR_RESUME);
000090  f0240410          BIC      r4,r4,#0x10
;;;236            _SetCNTR(wCNTR);
000094  4809              LDR      r0,|L3.188|
000096  f8c04c40          STR      r4,[r0,#0xc40]
;;;237           #endif /* STM32F10X_CL */
;;;238            ResumeS.eState = RESUME_OFF;
00009a  f04f0006          MOV      r0,#6
00009e  7008              STRB     r0,[r1,#0]
                  |L3.160|
;;;239         #ifndef STM32F10X_CL
;;;240          }
;;;241         #endif /* STM32F10X_CL */
;;;242          break;
0000a0  e005              B        |L3.174|
                  |L3.162|
;;;243        case RESUME_OFF:
0000a2  bf00              NOP      
;;;244        case RESUME_ESOF:
0000a4  bf00              NOP      
;;;245        default:
;;;246          ResumeS.eState = RESUME_OFF;
0000a6  2006              MOVS     r0,#6
0000a8  4902              LDR      r1,|L3.180|
0000aa  7008              STRB     r0,[r1,#0]
;;;247          break;
0000ac  bf00              NOP      
                  |L3.174|
0000ae  bf00              NOP                            ;200
;;;248      }
;;;249    }
0000b0  bd70              POP      {r4-r6,pc}
;;;250    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L3.180|
                          DCD      ResumeS
                  |L3.184|
                          DCD      0x40005c40
                  |L3.188|
                          DCD      0x40005000

                          AREA ||i.Resume_Init||, CODE, READONLY, ALIGN=2

                  Resume_Init PROC
;;;142    *******************************************************************************/
;;;143    void Resume_Init(void)
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145    #ifndef STM32F10X_CL
;;;146      uint16_t wCNTR;
;;;147    #endif /* STM32F10X_CL */ 
;;;148    
;;;149      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;150      /* restart the clocks */
;;;151      /* ...  */
;;;152    
;;;153    #ifndef STM32F10X_CL
;;;154      /* CNTR_LPMODE = 0 */
;;;155      wCNTR = _GetCNTR();
000002  4807              LDR      r0,|L4.32|
000004  6800              LDR      r0,[r0,#0]
000006  b284              UXTH     r4,r0
;;;156      wCNTR &= (~CNTR_LPMODE);
000008  f0240404          BIC      r4,r4,#4
;;;157      _SetCNTR(wCNTR);
00000c  4805              LDR      r0,|L4.36|
00000e  f8c04c40          STR      r4,[r0,#0xc40]
;;;158    #endif /* STM32F10X_CL */ 
;;;159    
;;;160      /* restore full power */
;;;161      /* ... on connected devices */
;;;162      Leave_LowPowerMode();
000012  f7fffffe          BL       Leave_LowPowerMode
;;;163    
;;;164    #ifndef STM32F10X_CL
;;;165      /* reset FSUSP bit */
;;;166      _SetCNTR(IMR_MSK);
000016  f44f4006          MOV      r0,#0x8600
00001a  4901              LDR      r1,|L4.32|
00001c  6008              STR      r0,[r1,#0]
;;;167    #endif /* STM32F10X_CL */
;;;168    
;;;169      /* reverse suspend preparation */
;;;170      /* ... */
;;;171    
;;;172    }
00001e  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L4.32|
                          DCD      0x40005c40
                  |L4.36|
                          DCD      0x40005000

                          AREA ||i.Suspend||, CODE, READONLY, ALIGN=2

                  Suspend PROC
;;;105    *******************************************************************************/
;;;106    void Suspend(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108    #ifndef STM32F10X_CL
;;;109      uint16_t wCNTR;
;;;110      /* suspend preparation */
;;;111      /* ... */
;;;112    
;;;113      /* macrocell enters suspend mode */
;;;114      wCNTR = _GetCNTR();
000002  4809              LDR      r0,|L5.40|
000004  6800              LDR      r0,[r0,#0]
000006  b284              UXTH     r4,r0
;;;115      wCNTR |= CNTR_FSUSP;
000008  f0440408          ORR      r4,r4,#8
;;;116      _SetCNTR(wCNTR);
00000c  4807              LDR      r0,|L5.44|
00000e  f8c04c40          STR      r4,[r0,#0xc40]
;;;117    #endif /* STM32F10X_CL */
;;;118    
;;;119      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;120      /* power reduction */
;;;121      /* ... on connected devices */
;;;122    
;;;123    #ifndef STM32F10X_CL
;;;124      /* force low-power mode in the macrocell */
;;;125      wCNTR = _GetCNTR();
000012  4805              LDR      r0,|L5.40|
000014  6800              LDR      r0,[r0,#0]
000016  b284              UXTH     r4,r0
;;;126      wCNTR |= CNTR_LPMODE;
000018  f0440404          ORR      r4,r4,#4
;;;127      _SetCNTR(wCNTR);
00001c  4803              LDR      r0,|L5.44|
00001e  f8c04c40          STR      r4,[r0,#0xc40]
;;;128    #endif /* STM32F10X_CL */
;;;129    
;;;130      /* switch-off the clocks */
;;;131      /* ... */
;;;132      Enter_LowPowerMode();
000022  f7fffffe          BL       Enter_LowPowerMode
;;;133    
;;;134    }
000026  bd10              POP      {r4,pc}
;;;135    
                          ENDP

                  |L5.40|
                          DCD      0x40005c40
                  |L5.44|
                          DCD      0x40005000

                          AREA ||.data||, DATA, ALIGN=2

                  bDeviceState
                          DCD      0x00000000
                  fSuspendEnabled
000004  01                DCB      0x01
                  ResumeS
000005  0000              DCB      0x00,0x00
