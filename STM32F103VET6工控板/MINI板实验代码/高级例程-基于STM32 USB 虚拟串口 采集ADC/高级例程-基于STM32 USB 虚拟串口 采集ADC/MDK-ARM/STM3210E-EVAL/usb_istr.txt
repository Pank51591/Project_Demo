; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\STM3210E-EVAL\usb_istr.o --depend=.\STM3210E-EVAL\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Utilities\STM32_EVAL -I..\Utilities\STM32_EVAL\Common -I..\Utilities\STM32_EVAL\STM3210E_EVAL -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;63     *******************************************************************************/
;;;64     void USB_Istr(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     
;;;67       wIstr = _GetISTR();
000002  4819              LDR      r0,|L1.104|
000004  6800              LDR      r0,[r0,#0]
000006  4919              LDR      r1,|L1.108|
000008  8008              STRH     r0,[r1,#0]
;;;68     
;;;69     #if (IMR_MSK & ISTR_SOF)
;;;70       if (wIstr & ISTR_SOF & wInterrupt_Mask)
00000a  4608              MOV      r0,r1
00000c  8800              LDRH     r0,[r0,#0]  ; wIstr
00000e  f4007000          AND      r0,r0,#0x200
000012  4917              LDR      r1,|L1.112|
000014  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000016  4208              TST      r0,r1
000018  d00b              BEQ      |L1.50|
;;;71       {
;;;72         _SetISTR((uint16_t)CLR_SOF);
00001a  f64f50ff          MOV      r0,#0xfdff
00001e  4912              LDR      r1,|L1.104|
000020  6008              STR      r0,[r1,#0]
;;;73         bIntPackSOF++;
000022  4814              LDR      r0,|L1.116|
000024  7800              LDRB     r0,[r0,#0]  ; bIntPackSOF
000026  f1000001          ADD      r0,r0,#1
00002a  4912              LDR      r1,|L1.116|
00002c  7008              STRB     r0,[r1,#0]
;;;74     
;;;75     #ifdef SOF_CALLBACK
;;;76         SOF_Callback();
00002e  f7fffffe          BL       SOF_Callback
                  |L1.50|
;;;77     #endif
;;;78       }
;;;79     #endif
;;;80       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;81       
;;;82     #if (IMR_MSK & ISTR_CTR)
;;;83       if (wIstr & ISTR_CTR & wInterrupt_Mask)
000032  480e              LDR      r0,|L1.108|
000034  8800              LDRH     r0,[r0,#0]  ; wIstr
000036  f4004000          AND      r0,r0,#0x8000
00003a  490d              LDR      r1,|L1.112|
00003c  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00003e  4208              TST      r0,r1
000040  d001              BEQ      |L1.70|
;;;84       {
;;;85         /* servicing of the endpoint correct transfer interrupt */
;;;86         /* clear of the CTR flag into the sub */
;;;87         CTR_LP();
000042  f7fffffe          BL       CTR_LP
                  |L1.70|
;;;88     #ifdef CTR_CALLBACK
;;;89         CTR_Callback();
;;;90     #endif
;;;91       }
;;;92     #endif
;;;93       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;94     #if (IMR_MSK & ISTR_RESET)
;;;95       if (wIstr & ISTR_RESET & wInterrupt_Mask)
000046  4809              LDR      r0,|L1.108|
000048  8800              LDRH     r0,[r0,#0]  ; wIstr
00004a  f4006080          AND      r0,r0,#0x400
00004e  4908              LDR      r1,|L1.112|
000050  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000052  4208              TST      r0,r1
000054  d006              BEQ      |L1.100|
;;;96       {
;;;97         _SetISTR((uint16_t)CLR_RESET);
000056  f64f30ff          MOV      r0,#0xfbff
00005a  4903              LDR      r1,|L1.104|
00005c  6008              STR      r0,[r1,#0]
;;;98         Device_Property.Reset();
00005e  4906              LDR      r1,|L1.120|
000060  6848              LDR      r0,[r1,#4]  ; Device_Property
000062  4780              BLX      r0
                  |L1.100|
;;;99     #ifdef RESET_CALLBACK
;;;100        RESET_Callback();
;;;101    #endif
;;;102      }
;;;103    #endif
;;;104      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;105    #if (IMR_MSK & ISTR_DOVR)
;;;106      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;107      {
;;;108        _SetISTR((uint16_t)CLR_DOVR);
;;;109    #ifdef DOVR_CALLBACK
;;;110        DOVR_Callback();
;;;111    #endif
;;;112      }
;;;113    #endif
;;;114      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;115    #if (IMR_MSK & ISTR_ERR)
;;;116      if (wIstr & ISTR_ERR & wInterrupt_Mask)
;;;117      {
;;;118        _SetISTR((uint16_t)CLR_ERR);
;;;119    #ifdef ERR_CALLBACK
;;;120        ERR_Callback();
;;;121    #endif
;;;122      }
;;;123    #endif
;;;124      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;125    #if (IMR_MSK & ISTR_WKUP)
;;;126      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
;;;127      {
;;;128        _SetISTR((uint16_t)CLR_WKUP);
;;;129        Resume(RESUME_EXTERNAL);
;;;130    #ifdef WKUP_CALLBACK
;;;131        WKUP_Callback();
;;;132    #endif
;;;133      }
;;;134    #endif
;;;135      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;136    #if (IMR_MSK & ISTR_SUSP)
;;;137      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
;;;138      {
;;;139    
;;;140        /* check if SUSPEND is possible */
;;;141        if (fSuspendEnabled)
;;;142        {
;;;143          Suspend();
;;;144        }
;;;145        else
;;;146        {
;;;147          /* if not possible then resume after xx ms */
;;;148          Resume(RESUME_LATER);
;;;149        }
;;;150        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;151        _SetISTR((uint16_t)CLR_SUSP);
;;;152    #ifdef SUSP_CALLBACK
;;;153        SUSP_Callback();
;;;154    #endif
;;;155      }
;;;156    #endif
;;;157      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;158    
;;;159    #if (IMR_MSK & ISTR_ESOF)
;;;160      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
;;;161      {
;;;162        _SetISTR((uint16_t)CLR_ESOF);
;;;163        /* resume handling timing is made with ESOFs */
;;;164        Resume(RESUME_ESOF); /* request without change of the machine state */
;;;165    
;;;166    #ifdef ESOF_CALLBACK
;;;167        ESOF_Callback();
;;;168    #endif
;;;169      }
;;;170    #endif
;;;171    } /* USB_Istr */
000064  bd10              POP      {r4,pc}
;;;172    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      0x40005c44
                  |L1.108|
                          DCD      wIstr
                  |L1.112|
                          DCD      wInterrupt_Mask
                  |L1.116|
                          DCD      bIntPackSOF
                  |L1.120|
                          DCD      Device_Property

                          AREA ||.data||, DATA, ALIGN=2

                  bIntPackSOF
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      EP3_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  wIstr
00003c  0000              DCB      0x00,0x00
